import{_ as i,c as r,b as a,d as t,e as s,a as l,f as o,r as p,o as c}from"./app-DmvF8OAs.js";const d={};function u(y,e){const n=p("RouteLink");return c(),r("div",null,[e[6]||(e[6]=a(`<h1 id="database-programming" tabindex="-1"><a class="header-anchor" href="#database-programming"><span>Database Programming</span></a></h1><h2 id="trigger" tabindex="-1"><a class="header-anchor" href="#trigger"><span>TRIGGER</span></a></h2><h3 id="_1-instructions" tabindex="-1"><a class="header-anchor" href="#_1-instructions"><span>1. Instructions</span></a></h3><p>The trigger provides a mechanism for listening to changes in time series data. With user-defined logic, tasks such as alerting and data forwarding can be conducted.</p><p>The trigger is implemented based on the reflection mechanism. Users can monitor data changes by implementing the Java interfaces. IoTDB allows users to dynamically register and drop triggers without restarting the server.</p><p>The document will help you learn to define and manage triggers.</p><h4 id="pattern-for-listening" tabindex="-1"><a class="header-anchor" href="#pattern-for-listening"><span>Pattern for Listening</span></a></h4><p>A single trigger can be used to listen for data changes in a time series that match a specific pattern. For example, a trigger can listen for the data changes of time series <code>root.sg.a</code>, or time series that match the pattern <code>root.sg.*</code>. When you register a trigger, you can specify the path pattern that the trigger listens on through an SQL statement.</p><h4 id="trigger-type" tabindex="-1"><a class="header-anchor" href="#trigger-type"><span>Trigger Type</span></a></h4><p>There are currently two types of triggers, and you can specify the type through an SQL statement when registering a trigger:</p><ul><li>Stateful triggers: The execution logic of this type of trigger may depend on data from multiple insertion statement . The framework will aggregate the data written by different nodes into the same trigger instance for calculation to retain context information. This type of trigger is usually used for sampling or statistical data aggregation for a period of time. information. Only one node in the cluster holds an instance of a stateful trigger.</li><li>Stateless triggers: The execution logic of the trigger is only related to the current input data. The framework does not need to aggregate the data of different nodes into the same trigger instance. This type of trigger is usually used for calculation of single row data and abnormal detection. Each node in the cluster holds an instance of a stateless trigger.</li></ul><h4 id="trigger-event" tabindex="-1"><a class="header-anchor" href="#trigger-event"><span>Trigger Event</span></a></h4><p>There are currently two trigger events for the trigger, and other trigger events will be expanded in the future. When you register a trigger, you can specify the trigger event through an SQL statement:</p><ul><li>BEFORE INSERT: Fires before the data is persisted. <strong>Please note that currently the trigger does not support data cleaning and will not change the data to be persisted itself.</strong></li><li>AFTER INSERT: Fires after the data is persisted.</li></ul><h3 id="_2-how-to-implement-a-trigger" tabindex="-1"><a class="header-anchor" href="#_2-how-to-implement-a-trigger"><span>2. How to Implement a Trigger</span></a></h3><p>You need to implement the trigger by writing a Java class, where the dependency shown below is required. If you use <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven</a>, you can search for them directly from the <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven repository</a>.</p><h4 id="dependency" tabindex="-1"><a class="header-anchor" href="#dependency"><span>Dependency</span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;org.apache.iotdb&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;iotdb-server&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;1.0.0&lt;/</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;provided&lt;/</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the dependency version should be correspondent to the target server version.</p><h4 id="interface-description" tabindex="-1"><a class="header-anchor" href="#interface-description"><span>Interface Description</span></a></h4><p>To implement a trigger, you need to implement the <code>org.apache.iotdb.trigger.api.Trigger</code> class.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.trigger.api.enums.FailureStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.write.record.Tablet</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> Trigger</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * This method is mainly used to validate {@link TriggerAttributes} before calling {@link</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * Trigger#onCreate(TriggerAttributes)}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#7F848E;font-style:italic;"> TriggerAttributes</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TriggerAttributes</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * This method will be called when creating a trigger after validation.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#7F848E;font-style:italic;"> TriggerAttributes</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> onCreate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TriggerAttributes</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * This method will be called when dropping a trigger.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> onDrop</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * When restarting a DataNode, Triggers that have been registered will be restored and this method</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * will be called during the process of restoring.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> restore</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * Overrides this method to set the expected FailureStrategy, {@link FailureStrategy#OPTIMISTIC}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * is the default strategy.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@link FailureStrategy}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#E5C07B;"> FailureStrategy</span><span style="color:#61AFEF;"> getFailureStrategy</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> FailureStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OPTIMISTIC</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> tablet</span><span style="color:#7F848E;font-style:italic;"> see {@link Tablet} for detailed information of data structure. Data that is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *     inserted will be constructed as a Tablet and you can define process logic with {@link</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *     Tablet}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> true if successfully fired</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> fire</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Tablet</span><span style="color:#E06C75;font-style:italic;"> tablet</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This class provides two types of programming interfaces: <strong>Lifecycle related interfaces</strong> and <strong>data change listening related interfaces</strong>. All the interfaces in this class are not required to be implemented. When the interfaces are not implemented, the trigger will not respond to the data changes. You can implement only some of these interfaces according to your needs.</p><p>Descriptions of the interfaces are as followed.</p><h5 id="lifecycle-related-interfaces" tabindex="-1"><a class="header-anchor" href="#lifecycle-related-interfaces"><span>Lifecycle Related Interfaces</span></a></h5><table><thead><tr><th>Interface</th><th>Description</th></tr></thead><tbody><tr><td><em>default void validate(TriggerAttributes attributes) throws Exception {}</em></td><td>When you creates a trigger using the <code>CREATE TRIGGER</code> statement, you can specify the parameters that the trigger needs to use, and this interface will be used to verify the correctness of the parameters。</td></tr><tr><td><em>default void onCreate(TriggerAttributes attributes) throws Exception {}</em></td><td>This interface is called once when you create a trigger using the <code>CREATE TRIGGER</code> statement. During the lifetime of each trigger instance, this interface will be called only once. This interface is mainly used for the following functions: helping users to parse custom attributes in SQL statements (using <code>TriggerAttributes</code>). You can create or apply for resources, such as establishing external links, opening files, etc.</td></tr><tr><td><em>default void onDrop() throws Exception {}</em></td><td>This interface is called when you drop a trigger using the <code>DROP TRIGGER</code> statement. During the lifetime of each trigger instance, this interface will be called only once. This interface mainly has the following functions: it can perform the operation of resource release and can be used to persist the results of trigger calculations.</td></tr><tr><td><em>default void restore() throws Exception {}</em></td><td>When the DataNode is restarted, the cluster will restore the trigger instance registered on the DataNode, and this interface will be called once for stateful trigger during the process. After the DataNode where the stateful trigger instance is located goes down, the cluster will restore the trigger instance on another available DataNode, calling this interface once in the process. This interface can be used to customize recovery logic.</td></tr></tbody></table><h5 id="data-change-listening-related-interfaces" tabindex="-1"><a class="header-anchor" href="#data-change-listening-related-interfaces"><span>Data Change Listening Related Interfaces</span></a></h5><h6 id="listening-interface" tabindex="-1"><a class="header-anchor" href="#listening-interface"><span>Listening Interface</span></a></h6><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> tablet</span><span style="color:#7F848E;font-style:italic;"> see {@link Tablet} for detailed information of data structure. Data that is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *     inserted will be constructed as a Tablet and you can define process logic with {@link</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *     Tablet}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> true if successfully fired</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> fire</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Tablet</span><span style="color:#E06C75;"> tablet) throws Exception {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the data changes, the trigger uses the Tablet as the unit of firing operation. You can obtain the metadata and data of the corresponding sequence through Tablet, and then perform the corresponding trigger operation. If the fire process is successful, the return value should be true. If the interface returns false or throws an exception, we consider the trigger fire process as failed. When the trigger fire process fails, we will perform corresponding operations according to the listening strategy interface.</p><p>When performing an INSERT operation, for each time series in it, we will detect whether there is a trigger that listens to the path pattern, and then assemble the time series data that matches the path pattern listened by the same trigger into a new Tablet for trigger fire interface. Can be understood as:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">PartialPath</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Trigger</span><span style="color:#ABB2BF;">&gt;&gt;</span><span style="color:#E06C75;"> pathToTriggerListMap </span><span style="color:#56B6C2;">=&gt;</span><span style="color:#E5C07B;"> Map</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Trigger</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> Tablet</span><span style="color:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Note that currently we do not make any guarantees about the order in which triggers fire.</strong></p><p>Here is an example:</p><p>Suppose there are three triggers, and the trigger event of the triggers are all BEFORE INSERT:</p><ul><li>Trigger1 listens on <code>root.sg.*</code></li><li>Trigger2 listens on <code>root.sg.a</code></li><li>Trigger3 listens on <code>root.sg.b</code></li></ul><p>Insertion statement:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, a, b) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The time series <code>root.sg.a</code> matches Trigger1 and Trigger2, and the sequence <code>root.sg.b</code> matches Trigger1 and Trigger3, then:</p><ul><li>The data of <code>root.sg.a</code> and <code>root.sg.b</code> will be assembled into a new tablet1, and Trigger1.fire(tablet1) will be executed at the corresponding Trigger Event.</li><li>The data of <code>root.sg.a</code> will be assembled into a new tablet2, and Trigger2.fire(tablet2) will be executed at the corresponding Trigger Event.</li><li>The data of <code>root.sg.b</code> will be assembled into a new tablet3, and Trigger3.fire(tablet3) will be executed at the corresponding Trigger Event.</li></ul><h6 id="listening-strategy-interface" tabindex="-1"><a class="header-anchor" href="#listening-strategy-interface"><span>Listening Strategy Interface</span></a></h6><p>When the trigger fails to fire, we will take corresponding actions according to the strategy set by the listening strategy interface. You can set <code>org.apache.iotdb.trigger.api.enums.FailureStrategy</code>. There are currently two strategies, optimistic and pessimistic:</p><ul><li>Optimistic strategy: The trigger that fails to fire does not affect the firing of subsequent triggers, nor does it affect the writing process, that is, we do not perform additional processing on the sequence involved in the trigger failure, only log the failure to record the failure, and finally inform user that data insertion is successful, but the trigger fire part failed.</li><li>Pessimistic strategy: The failure trigger affects the processing of all subsequent Pipelines, that is, we believe that the firing failure of the trigger will cause all subsequent triggering processes to no longer be carried out. If the trigger event of the trigger is BEFORE INSERT, then the insertion will no longer be performed, and the insertion failure will be returned directly.</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;"> /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * Overrides this method to set the expected FailureStrategy, {@link FailureStrategy#OPTIMISTIC}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * is the default strategy.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@link FailureStrategy}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#E5C07B;"> FailureStrategy</span><span style="color:#61AFEF;"> getFailureStrategy</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> FailureStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OPTIMISTIC</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><p>If you use <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven</a>, you can refer to our sample project <strong>trigger-example</strong>.</p><p>You can find it <a href="https://github.com/apache/iotdb/tree/master/example/trigger" target="_blank" rel="noopener noreferrer">here</a>.</p><p>Here is the code from one of the sample projects:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Licensed to the Apache Software Foundation (ASF) under one</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * or more contributor license agreements.  See the NOTICE file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * distributed with this work for additional information</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * regarding copyright ownership.  The ASF licenses this file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * to you under the Apache License, Version 2.0 (the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &quot;License&quot;); you may not use this file except in compliance</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * with the License.  You may obtain a copy of the License at</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Unless required by applicable law or agreed to in writing,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * software distributed under the License is distributed on an</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * KIND, either express or implied.  See the License for the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * specific language governing permissions and limitations</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * under the License.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.apache.iotdb.trigger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.db.storageengine.trigger.sink.alertmanager.AlertManagerConfiguration</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.db.storageengine.trigger.sink.alertmanager.AlertManagerEvent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.db.storageengine.trigger.sink.alertmanager.AlertManagerHandler</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.trigger.api.Trigger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.trigger.api.TriggerAttributes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.file.metadata.enums.TSDataType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.write.record.Tablet</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.write.schema.MeasurementSchema</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.slf4j.Logger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.slf4j.LoggerFactory</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.HashMap</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.List</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ClusterAlertingExample</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Trigger</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Logger</span><span style="color:#E06C75;"> LOGGER </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LoggerFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLogger</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ClusterAlertingExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> AlertManagerHandler</span><span style="color:#E06C75;"> alertManagerHandler </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AlertManagerHandler</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> AlertManagerConfiguration</span><span style="color:#E06C75;"> alertManagerConfiguration </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#C678DD;">      new</span><span style="color:#61AFEF;"> AlertManagerConfiguration</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;http://127.0.0.1:9093/api/v2/alerts&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> alertname</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> labels </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> annotations </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> onCreate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TriggerAttributes</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    alertname </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;alert_test&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;series&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;root.ln.wf01.wt01.temperature&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;severity&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    annotations</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;summary&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;high temperature&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    annotations</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;{{.alertname}}: {{.series}} is {{.value}}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    alertManagerHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(alertManagerConfiguration);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> onDrop</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    alertManagerHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> fire</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Tablet</span><span style="color:#E06C75;font-style:italic;"> tablet</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">MeasurementSchema</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">measurementSchemaList</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tablet</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSchemas</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, n </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> measurementSchemaList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">(); i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> n; i++) {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">measurementSchemaList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(i).</span><span style="color:#61AFEF;">getType</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TSDataType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">DOUBLE</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // for example, we only deal with the columns of Double type</span></span>
<span class="line"><span style="color:#C678DD;">        double</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">values</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">[]) </span><span style="color:#E5C07B;">tablet</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">values</span><span style="color:#ABB2BF;">[i];</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">double</span><span style="color:#E06C75;"> value</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> values) {</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;"> (value </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 100.0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;trigger value &gt; 100&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">(value));</span></span>
<span class="line"><span style="color:#E5C07B;">            labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;severity&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;critical&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            AlertManagerEvent</span><span style="color:#E06C75;"> alertManagerEvent</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#C678DD;">                new</span><span style="color:#61AFEF;"> AlertManagerEvent</span><span style="color:#ABB2BF;">(alertname, labels, annotations);</span></span>
<span class="line"><span style="color:#E5C07B;">            alertManagerHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onEvent</span><span style="color:#ABB2BF;">(alertManagerEvent);</span></span>
<span class="line"><span style="color:#ABB2BF;">          } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (value </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 50.0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;trigger value &gt; 50&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">(value));</span></span>
<span class="line"><span style="color:#E5C07B;">            labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;severity&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;warning&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            AlertManagerEvent</span><span style="color:#E06C75;"> alertManagerEvent</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#C678DD;">                new</span><span style="color:#61AFEF;"> AlertManagerEvent</span><span style="color:#ABB2BF;">(alertname, labels, annotations);</span></span>
<span class="line"><span style="color:#E5C07B;">            alertManagerHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onEvent</span><span style="color:#ABB2BF;">(alertManagerEvent);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-trigger-management" tabindex="-1"><a class="header-anchor" href="#_3-trigger-management"><span>3. Trigger Management</span></a></h3><p>You can create and drop a trigger through an SQL statement, and you can also query all registered triggers through an SQL statement.</p><p><strong>We recommend that you stop insertion while creating triggers.</strong></p><h4 id="create-trigger" tabindex="-1"><a class="header-anchor" href="#create-trigger"><span>Create Trigger</span></a></h4><p>Triggers can be registered on arbitrary path patterns. The time series registered with the trigger will be listened to by the trigger. When there is data change on the series, the corresponding fire method in the trigger will be called.</p><p>Registering a trigger can be done as follows:</p><ol><li>Implement a Trigger class as described in the How to implement a Trigger chapter, assuming the class&#39;s full class name is <code>org.apache.iotdb.trigger.ClusterAlertingExample</code></li><li>Package the project into a JAR package.</li><li>Register the trigger with an SQL statement. During the creation process, the <code>validate</code> and <code>onCreate</code> interfaces of the trigger will only be called once. For details, please refer to the chapter of How to implement a Trigger.</li></ol><p>The complete SQL syntax is as follows:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// </span><span style="color:#C678DD;">Create</span><span style="color:#ABB2BF;"> Trigger</span></span>
<span class="line"><span style="color:#ABB2BF;">createTrigger</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> triggerType TRIGGER triggerName</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">identifier triggerEventClause </span><span style="color:#C678DD;">ON</span><span style="color:#ABB2BF;"> pathPattern </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> className</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">STRING_LITERAL uriClause? triggerAttributeClause?</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">triggerType</span></span>
<span class="line"><span style="color:#ABB2BF;">    : STATELESS | STATEFUL</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">triggerEventClause</span></span>
<span class="line"><span style="color:#ABB2BF;">    : (</span><span style="color:#C678DD;">BEFORE</span><span style="color:#ABB2BF;"> | </span><span style="color:#C678DD;">AFTER</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">INSERT</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">uriClause</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#C678DD;">USING</span><span style="color:#ABB2BF;"> URI uri</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">uri</span></span>
<span class="line"><span style="color:#ABB2BF;">    : STRING_LITERAL</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">triggerAttributeClause</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#C678DD;">WITH</span><span style="color:#ABB2BF;"> LR_BRACKET triggerAttribute (COMMA triggerAttribute)* RR_BRACKET</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">triggerAttribute</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#C678DD;">key</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">attributeKey operator_eq </span><span style="color:#C678DD;">value</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">attributeValue</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Below is the explanation for the SQL syntax:</p><ul><li>triggerName: The trigger ID, which is globally unique and used to distinguish different triggers, is case-sensitive.</li><li>triggerType: Trigger types are divided into two categories, STATELESS and STATEFUL.</li><li>triggerEventClause: when the trigger fires, BEFORE INSERT and AFTER INSERT are supported now.</li><li>pathPattern：The path pattern the trigger listens on, can contain wildcards * and **.</li><li>className：The class name of the Trigger class.</li><li>jarLocation: Optional. When this option is not specified, by default, we consider that the DBA has placed the JAR package required to create the trigger in the trigger_root_dir directory (configuration item, default is IOTDB_HOME/ext/trigger) of each DataNode node. When this option is specified, we will download and distribute the file resource corresponding to the URI to the trigger_root_dir/install directory of each DataNode.</li><li>triggerAttributeClause: It is used to specify the parameters that need to be set when the trigger instance is created. This part is optional in the SQL syntax.</li></ul><p>Here is an example SQL statement to help you understand:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> STATELESS TRIGGER triggerTest</span></span>
<span class="line"><span style="color:#C678DD;">BEFORE</span><span style="color:#C678DD;"> INSERT</span></span>
<span class="line"><span style="color:#C678DD;">ON</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.**</span></span>
<span class="line"><span style="color:#C678DD;">AS</span><span style="color:#98C379;"> &#39;org.apache.iotdb.trigger.ClusterAlertingExample&#39;</span></span>
<span class="line"><span style="color:#C678DD;">USING</span><span style="color:#ABB2BF;"> URI </span><span style="color:#98C379;">&#39;/jar/ClusterAlertingExample.jar&#39;</span></span>
<span class="line"><span style="color:#C678DD;">WITH</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#98C379;">    &quot;name&quot;</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;trigger&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;limit&quot;</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;100&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above SQL statement creates a trigger named triggerTest:</p><ul><li>The trigger is stateless.</li><li>Fires before insertion.</li><li>Listens on path pattern root.sg.**</li><li>The implemented trigger class is named <code>org.apache.iotdb.trigger.ClusterAlertingExample</code></li><li>The JAR package URI is <a href="http://jar/ClusterAlertingExample.jar" target="_blank" rel="noopener noreferrer">http://jar/ClusterAlertingExample.jar</a></li><li>When creating the trigger instance, two parameters, name and limit, are passed in.</li></ul><h4 id="drop-trigger" tabindex="-1"><a class="header-anchor" href="#drop-trigger"><span>Drop Trigger</span></a></h4><p>The trigger can be dropped by specifying the trigger ID. During the process of dropping the trigger, the <code>onDrop</code> interface of the trigger will be called only once.</p><p>The SQL syntax is:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// </span><span style="color:#C678DD;">Drop</span><span style="color:#ABB2BF;"> Trigger</span></span>
<span class="line"><span style="color:#ABB2BF;">dropTrigger</span></span>
<span class="line"><span style="color:#ABB2BF;">  : </span><span style="color:#C678DD;">DROP</span><span style="color:#ABB2BF;"> TRIGGER triggerName</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">identifier</span></span>
<span class="line"><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here is an example statement:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">DROP</span><span style="color:#C678DD;"> TRIGGER</span><span style="color:#ABB2BF;"> triggerTest1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The above statement will drop the trigger with ID triggerTest1.</p><h4 id="show-trigger" tabindex="-1"><a class="header-anchor" href="#show-trigger"><span>Show Trigger</span></a></h4><p>You can query information about triggers that exist in the cluster through an SQL statement.</p><p>The SQL syntax is as follows:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">SHOW TRIGGERS</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The result set format of this statement is as follows:</p><table><thead><tr><th>TriggerName</th><th>Event</th><th>Type</th><th>State</th><th>PathPattern</th><th>ClassName</th><th>NodeId</th></tr></thead><tbody><tr><td>triggerTest1</td><td>BEFORE_INSERT / AFTER_INSERT</td><td>STATELESS / STATEFUL</td><td>INACTIVE / ACTIVE / DROPPING / TRANSFFERING</td><td>root.**</td><td>org.apache.iotdb.trigger.TriggerExample</td><td>ALL(STATELESS) / DATA_NODE_ID(STATEFUL)</td></tr></tbody></table><h4 id="trigger-state" tabindex="-1"><a class="header-anchor" href="#trigger-state"><span>Trigger State</span></a></h4><p>During the process of creating and dropping triggers in the cluster, we maintain the states of the triggers. The following is a description of these states:</p><table><thead><tr><th>State</th><th>Description</th><th>Is it recommended to insert data?</th></tr></thead><tbody><tr><td>INACTIVE</td><td>The intermediate state of executing <code>CREATE TRIGGER</code>, the cluster has just recorded the trigger information on the ConfigNode, and the trigger has not been activated on any DataNode.</td><td>NO</td></tr><tr><td>ACTIVE</td><td>Status after successful execution of <code>CREATE TRIGGE</code>, the trigger is available on all DataNodes in the cluster.</td><td>YES</td></tr><tr><td>DROPPING</td><td>Intermediate state of executing <code>DROP TRIGGER</code>, the cluster is in the process of dropping the trigger.</td><td>NO</td></tr><tr><td>TRANSFERRING</td><td>The cluster is migrating the location of this trigger instance.</td><td>NO</td></tr></tbody></table><h3 id="_4-notes" tabindex="-1"><a class="header-anchor" href="#_4-notes"><span>4. Notes</span></a></h3><ul><li>The trigger takes effect from the time of registration, and does not process the existing historical data. **That is, only insertion requests that occur after the trigger is successfully registered will be listened to by the trigger. **</li><li>The fire process of trigger is synchronous currently, so you need to ensure the efficiency of the trigger, otherwise the writing performance may be greatly affected. <strong>You need to guarantee concurrency safety of triggers yourself</strong>.</li><li>Please do no register too many triggers in the cluster. Because the trigger information is fully stored in the ConfigNode, and there is a copy of the information in all DataNodes</li><li><strong>It is recommended to stop writing when registering triggers</strong>. Registering a trigger is not an atomic operation. When registering a trigger, there will be an intermediate state in which some nodes in the cluster have registered the trigger, and some nodes have not yet registered successfully. To avoid write requests on some nodes being listened to by triggers and not being listened to on some nodes, we recommend not to perform writes when registering triggers.</li><li>When the node holding the stateful trigger instance goes down, we will try to restore the corresponding instance on another node. During the recovery process, we will call the restore interface of the trigger class once.</li><li>The trigger JAR package has a size limit, which must be less than min(<code>config_node_ratis_log_appender_buffer_size_max</code>, 2G), where <code>config_node_ratis_log_appender_buffer_size_max</code> is a configuration item. For the specific meaning, please refer to the IOTDB configuration item description.</li><li><strong>It is better not to have classes with the same full class name but different function implementations in different JAR packages.</strong> For example, trigger1 and trigger2 correspond to resources trigger1.jar and trigger2.jar respectively. If two JAR packages contain a <code>org.apache.iotdb.trigger.example.AlertListener</code> class, when <code>CREATE TRIGGER</code> uses this class, the system will randomly load the class in one of the JAR packages, which will eventually leads the inconsistent behavior of trigger and other issues.</li></ul><h3 id="_5-configuration-parameters" tabindex="-1"><a class="header-anchor" href="#_5-configuration-parameters"><span>5. Configuration Parameters</span></a></h3><table><thead><tr><th>Parameter</th><th>Meaning</th></tr></thead><tbody><tr><td><em>trigger_lib_dir</em></td><td>Directory to save the trigger jar package</td></tr><tr><td><em>stateful_trigger_retry_num_when_not_found</em></td><td>How many times will we retry to found an instance of stateful trigger on DataNodes if not found</td></tr></tbody></table><h2 id="continuous-query-cq" tabindex="-1"><a class="header-anchor" href="#continuous-query-cq"><span>CONTINUOUS QUERY (CQ)</span></a></h2><h3 id="_1-introduction" tabindex="-1"><a class="header-anchor" href="#_1-introduction"><span>1. Introduction</span></a></h3><p>Continuous queries(CQ) are queries that run automatically and periodically on realtime data and store query results in other specified time series.</p><p>Users can implement sliding window streaming computing through continuous query, such as calculating the hourly average temperature of a sequence and writing it into a new sequence. Users can customize the <code>RESAMPLE</code> clause to create different sliding windows, which can achieve a certain degree of tolerance for out-of-order data.</p><h3 id="_2-syntax" tabindex="-1"><a class="header-anchor" href="#_2-syntax"><span>2. Syntax</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> (CONTINUOUS QUERY | CQ) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">cq_id</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#C678DD;">RESAMPLE</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">  [EVERY &lt;every_interval&gt;]</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">  [BOUNDARY &lt;execution_boundary_time&gt;]</span></span>
<span class="line"><span style="color:#E06C75;">  [RANGE &lt;start_time_offset&gt;[, end_time_offset]</span><span style="color:#ABB2BF;">] </span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">[TIMEOUT POLICY BLOCKED|DISCARD]</span></span>
<span class="line"><span style="color:#C678DD;">BEGIN</span></span>
<span class="line"><span style="color:#C678DD;">  SELECT</span><span style="color:#ABB2BF;"> CLAUSE</span></span>
<span class="line"><span style="color:#C678DD;">    INTO</span><span style="color:#ABB2BF;"> CLAUSE</span></span>
<span class="line"><span style="color:#C678DD;">    FROM</span><span style="color:#ABB2BF;"> CLAUSE</span></span>
<span class="line"><span style="color:#E06C75;">    [WHERE CLAUSE]</span></span>
<span class="line"><span style="color:#E06C75;">    [GROUP BY(&lt;group_by_interval&gt;[, &lt;sliding_step&gt;]</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">[, level = &lt;level&gt;]</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">    [HAVING CLAUSE]</span></span>
<span class="line"><span style="color:#E06C75;">    [FILL {PREVIOUS | LINEAR | constant}]</span></span>
<span class="line"><span style="color:#E06C75;">    [LIMIT rowLimit OFFSET rowOffset]</span></span>
<span class="line"><span style="color:#E06C75;">    [ALIGN BY DEVICE]</span></span>
<span class="line"><span style="color:#C678DD;">END</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Note:</p><ol><li>If there exists any time filters in WHERE CLAUSE, IoTDB will throw an error, because IoTDB will automatically generate a time range for the query each time it&#39;s executed.</li><li>GROUP BY TIME CLAUSE is different, it doesn&#39;t contain its original first display window parameter which is [start_time, end_time). It&#39;s still because IoTDB will automatically generate a time range for the query each time it&#39;s executed.</li><li>If there is no group by time clause in query, EVERY clause is required, otherwise IoTDB will throw an error.</li></ol></blockquote><h4 id="descriptions-of-parameters-in-cq-syntax" tabindex="-1"><a class="header-anchor" href="#descriptions-of-parameters-in-cq-syntax"><span>Descriptions of parameters in CQ syntax</span></a></h4><ul><li><code>&lt;cq_id&gt;</code> specifies the globally unique id of CQ.</li><li><code>&lt;every_interval&gt;</code> specifies the query execution time interval. We currently support the units of ns, us, ms, s, m, h, d, w, and its value should not be lower than the minimum threshold configured by the user, which is <code>continuous_query_min_every_interval</code>. It&#39;s an optional parameter, default value is set to <code>group_by_interval</code> in group by clause.</li><li><code>&lt;start_time_offset&gt;</code> specifies the start time of each query execution as <code>now()-&lt;start_time_offset&gt;</code>. We currently support the units of ns, us, ms, s, m, h, d, <a href="http://w.It" target="_blank" rel="noopener noreferrer">w.It</a>&#39;s an optional parameter, default value is set to <code>every_interval</code> in resample clause.</li><li><code>&lt;end_time_offset&gt;</code> specifies the end time of each query execution as <code>now()-&lt;end_time_offset&gt;</code>. We currently support the units of ns, us, ms, s, m, h, d, <a href="http://w.It" target="_blank" rel="noopener noreferrer">w.It</a>&#39;s an optional parameter, default value is set to <code>0</code>.</li><li><code>&lt;execution_boundary_time&gt;</code> is a date that represents the execution time of a certain cq task. <ul><li><code>&lt;execution_boundary_time&gt;</code> can be earlier than, equals to, later than <strong>current time</strong>.</li><li>This parameter is optional. If not specified, it is equal to <code>BOUNDARY 0</code>。</li><li><strong>The start time of the first time window</strong> is <code>&lt;execution_boundary_time&gt; - &lt;start_time_offset&gt;</code>.</li><li><strong>The end time of the first time window</strong> is <code>&lt;execution_boundary_time&gt; - &lt;end_time_offset&gt;</code>.</li><li>The <strong>time range</strong> of the <code>i (1 &lt;= i)th</code> window is <code>[&lt;execution_boundary_time&gt; - &lt;start_time_offset&gt; + (i - 1) * &lt;every_interval&gt;, &lt;execution_boundary_time&gt; - &lt;end_time_offset&gt; + (i - 1) * &lt;every_interval&gt;)</code>.</li><li>If the <strong>current time</strong> is earlier than or equal to <code>execution_boundary_time</code>, then the first execution moment of the continuous query is <code>execution_boundary_time</code>.</li><li>If the <strong>current time</strong> is later than <code>execution_boundary_time</code>, then the first execution moment of the continuous query is the first <code>execution_boundary_time + i * &lt;every_interval&gt;</code> that is later than or equal to the current time .</li></ul></li></ul><blockquote><ul><li><code>&lt;every_interval&gt;</code>，<code>&lt;start_time_offset&gt;</code> and <code>&lt;group_by_interval&gt;</code> should all be greater than <code>0</code>.</li><li>The value of <code>&lt;group_by_interval&gt;</code> should be less than or equal to the value of <code>&lt;start_time_offset&gt;</code>, otherwise the system will throw an error.</li><li>Users should specify the appropriate <code>&lt;start_time_offset&gt;</code> and <code>&lt;every_interval&gt;</code> according to actual needs. <ul><li>If <code>&lt;start_time_offset&gt;</code> is greater than <code>&lt;every_interval&gt;</code>, there will be partial data overlap in each query window.</li><li>If <code>&lt;start_time_offset&gt;</code> is less than <code>&lt;every_interval&gt;</code>, there may be uncovered data between each query window.</li></ul></li><li><code>start_time_offset</code> should be larger than <code>end_time_offset</code>, otherwise the system will throw an error.</li></ul></blockquote><h5 id="start-time-offset-every-interval" tabindex="-1"><a class="header-anchor" href="#start-time-offset-every-interval"><span><code>&lt;start_time_offset&gt;</code> == <code>&lt;every_interval&gt;</code></span></a></h5><figure><img src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/Continuous-Query/pic1.png?raw=true" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><h5 id="start-time-offset-every-interval-1" tabindex="-1"><a class="header-anchor" href="#start-time-offset-every-interval-1"><span><code>&lt;start_time_offset&gt;</code> &gt; <code>&lt;every_interval&gt;</code></span></a></h5><figure><img src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/Continuous-Query/pic2.png?raw=true" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure><h5 id="start-time-offset-every-interval-2" tabindex="-1"><a class="header-anchor" href="#start-time-offset-every-interval-2"><span><code>&lt;start_time_offset&gt;</code> &lt; <code>&lt;every_interval&gt;</code></span></a></h5><figure><img src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/Continuous-Query/pic3.png?raw=true" alt="3" tabindex="0" loading="lazy"><figcaption>3</figcaption></figure><h5 id="every-interval-is-not-zero" tabindex="-1"><a class="header-anchor" href="#every-interval-is-not-zero"><span><code>&lt;every_interval&gt;</code> is not zero</span></a></h5><figure><img src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/Continuous-Query/pic4.png?raw=true" alt="4" tabindex="0" loading="lazy"><figcaption>4</figcaption></figure><ul><li><code>TIMEOUT POLICY</code> specify how we deal with the cq task whose previous time interval execution is not finished while the next execution time has reached. The default value is <code>BLOCKED</code>. <ul><li><code>BLOCKED</code> means that we will block and wait to do the current cq execution task until the previous time interval cq task finishes. If using <code>BLOCKED</code> policy, all the time intervals will be executed, but it may be behind the latest time interval.</li><li><code>DISCARD</code> means that we just discard the current cq execution task and wait for the next execution time and do the next time interval cq task. If using <code>DISCARD</code> policy, some time intervals won&#39;t be executed when the execution time of one cq task is longer than the <code>&lt;every_interval&gt;</code>. However, once a cq task is executed, it will use the latest time interval, so it can catch up at the sacrifice of some time intervals being discarded.</li></ul></li></ul><h3 id="_3-examples-of-cq" tabindex="-1"><a class="header-anchor" href="#_3-examples-of-cq"><span>3. Examples of CQ</span></a></h3><p>The examples below use the following sample data. It&#39;s a real time data stream and we can assume that the data arrives on time.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature|root.ln.wf02.wt01.temperature|root.ln.wf01.wt02.temperature|root.ln.wf01.wt01.temperature|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:14.598+08:00|                        121.0|                         72.0|                        183.0|                        115.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:19.941+08:00|                          0.0|                         68.0|                         68.0|                        103.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:24.949+08:00|                        122.0|                         45.0|                         11.0|                         14.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:29.967+08:00|                         47.0|                         14.0|                         59.0|                        181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:34.979+08:00|                        182.0|                        113.0|                         29.0|                        180.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:39.990+08:00|                         42.0|                         11.0|                         52.0|                         19.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:44.995+08:00|                         78.0|                         38.0|                        123.0|                         52.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:49.999+08:00|                        137.0|                        172.0|                        135.0|                        193.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:55.003+08:00|                         16.0|                        124.0|                        183.0|                         18.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configuring-execution-intervals" tabindex="-1"><a class="header-anchor" href="#configuring-execution-intervals"><span>Configuring execution intervals</span></a></h4><p>Use an <code>EVERY</code> interval in the <code>RESAMPLE</code> clause to specify the CQ’s execution interval, if not specific, default value is equal to <code>group_by_interval</code>.</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> CONTINUOUS QUERY cq1</span></span>
<span class="line"><span style="color:#C678DD;">RESAMPLE</span><span style="color:#ABB2BF;"> EVERY 20s</span></span>
<span class="line"><span style="color:#C678DD;">BEGIN</span></span>
<span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> max_value(temperature)</span></span>
<span class="line"><span style="color:#C678DD;">  INTO</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt02</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt02</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">(temperature_max)</span></span>
<span class="line"><span style="color:#C678DD;">  FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.*.*</span></span>
<span class="line"><span style="color:#C678DD;">  GROUP BY</span><span style="color:#ABB2BF;">(10s)</span></span>
<span class="line"><span style="color:#C678DD;">END</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq1</code> calculates the 10-second average of <code>temperature</code> sensor under the <code>root.ln</code> prefix path and stores the results in the <code>temperature_max</code> sensor using the same prefix path as the corresponding sensor.</p><p><code>cq1</code> executes at 20-second intervals, the same interval as the <code>EVERY</code> interval. Every 20 seconds, <code>cq1</code> runs a single query that covers the time range for the current time bucket, that is, the 20-second time bucket that intersects with <code>now()</code>.</p><p>Supposing that the current time is <code>2021-05-11T22:18:40.000+08:00</code>, we can see annotated log output about <code>cq1</code> running at DataNode if you set log level to DEBUG:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>At **2021-05-11T22:18:40.000+08:00**, \`cq1\` executes a query within the time range \`[2021-05-11T22:18:20, 2021-05-11T22:18:40)\`.</span></span>
<span class="line"><span>\`cq1\` generate 2 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>At **2021-05-11T22:19:00.000+08:00**, \`cq1\` executes a query within the time range \`[2021-05-11T22:18:40, 2021-05-11T22:19:00)\`.</span></span>
<span class="line"><span>\`cq1\` generate 2 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:40.000+08:00|                            137.0|                            172.0|                            135.0|                            193.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:50.000+08:00|                             16.0|                            124.0|                            183.0|                             18.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq1</code> won&#39;t deal with data that is before the current time window which is <code>2021-05-11T22:18:20.000+08:00</code>, so here are the results:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>&gt; SELECT temperature_max from root.ln.*.*;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:40.000+08:00|                            137.0|                            172.0|                            135.0|                            193.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:50.000+08:00|                             16.0|                            124.0|                            183.0|                             18.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configuring-time-range-for-resampling" tabindex="-1"><a class="header-anchor" href="#configuring-time-range-for-resampling"><span>Configuring time range for resampling</span></a></h4><p>Use <code>start_time_offset</code> in the <code>RANGE</code> clause to specify the start time of the CQ’s time range, if not specific, default value is equal to <code>EVERY</code> interval.</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> CONTINUOUS QUERY cq2</span></span>
<span class="line"><span style="color:#C678DD;">RESAMPLE</span><span style="color:#C678DD;"> RANGE</span><span style="color:#ABB2BF;"> 40s</span></span>
<span class="line"><span style="color:#C678DD;">BEGIN</span></span>
<span class="line"><span style="color:#C678DD;">  SELECT</span><span style="color:#ABB2BF;"> max_value(temperature)</span></span>
<span class="line"><span style="color:#C678DD;">  INTO</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt02</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt02</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">(temperature_max)</span></span>
<span class="line"><span style="color:#C678DD;">  FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.*.*</span></span>
<span class="line"><span style="color:#C678DD;">  GROUP BY</span><span style="color:#ABB2BF;">(10s)</span></span>
<span class="line"><span style="color:#C678DD;">END</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq2</code> calculates the 10-second average of <code>temperature</code> sensor under the <code>root.ln</code> prefix path and stores the results in the <code>temperature_max</code> sensor using the same prefix path as the corresponding sensor.</p><p><code>cq2</code> executes at 10-second intervals, the same interval as the <code>group_by_interval</code>. Every 10 seconds, <code>cq2</code> runs a single query that covers the time range between <code>now()</code> minus the <code>start_time_offset</code> and <code>now()</code> , that is, the time range between 40 seconds prior to <code>now()</code> and <code>now()</code>.</p><p>Supposing that the current time is <code>2021-05-11T22:18:40.000+08:00</code>, we can see annotated log output about <code>cq2</code> running at DataNode if you set log level to DEBUG:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>At **2021-05-11T22:18:40.000+08:00**, \`cq2\` executes a query within the time range \`[2021-05-11T22:18:00, 2021-05-11T22:18:40)\`.</span></span>
<span class="line"><span>\`cq2\` generate 4 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:00.000+08:00|                             NULL|                             NULL|                             NULL|                             NULL|</span></span>
<span class="line"><span>|2021-05-11T22:18:10.000+08:00|                            121.0|                             72.0|                            183.0|                            115.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>At **2021-05-11T22:18:50.000+08:00**, \`cq2\` executes a query within the time range \`[2021-05-11T22:18:10, 2021-05-11T22:18:50)\`.</span></span>
<span class="line"><span>\`cq2\` generate 4 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:10.000+08:00|                            121.0|                             72.0|                            183.0|                            115.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:40.000+08:00|                            137.0|                            172.0|                            135.0|                            193.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>At **2021-05-11T22:19:00.000+08:00**, \`cq2\` executes a query within the time range \`[2021-05-11T22:18:20, 2021-05-11T22:19:00)\`.</span></span>
<span class="line"><span>\`cq2\` generate 4 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:40.000+08:00|                            137.0|                            172.0|                            135.0|                            193.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:50.000+08:00|                             16.0|                            124.0|                            183.0|                             18.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq2</code> won&#39;t write lines that are all null. Notice <code>cq2</code> will also calculate the results for some time interval many times. Here are the results:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>&gt; SELECT temperature_max from root.ln.*.*;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:10.000+08:00|                            121.0|                             72.0|                            183.0|                            115.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:40.000+08:00|                            137.0|                            172.0|                            135.0|                            193.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:50.000+08:00|                             16.0|                            124.0|                            183.0|                             18.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configuring-execution-intervals-and-cq-time-ranges" tabindex="-1"><a class="header-anchor" href="#configuring-execution-intervals-and-cq-time-ranges"><span>Configuring execution intervals and CQ time ranges</span></a></h4><p>Use an <code>EVERY</code> interval and <code>RANGE</code> interval in the <code>RESAMPLE</code> clause to specify the CQ’s execution interval and the length of the CQ’s time range. And use <code>fill()</code> to change the value reported for time intervals with no data.</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> CONTINUOUS QUERY cq3</span></span>
<span class="line"><span style="color:#C678DD;">RESAMPLE</span><span style="color:#ABB2BF;"> EVERY 20s </span><span style="color:#C678DD;">RANGE</span><span style="color:#ABB2BF;"> 40s</span></span>
<span class="line"><span style="color:#C678DD;">BEGIN</span></span>
<span class="line"><span style="color:#C678DD;">  SELECT</span><span style="color:#ABB2BF;"> max_value(temperature)</span></span>
<span class="line"><span style="color:#C678DD;">  INTO</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt02</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt02</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">(temperature_max)</span></span>
<span class="line"><span style="color:#C678DD;">  FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.*.*</span></span>
<span class="line"><span style="color:#C678DD;">  GROUP BY</span><span style="color:#ABB2BF;">(10s)</span></span>
<span class="line"><span style="color:#ABB2BF;">  FILL(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">END</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq3</code> calculates the 10-second average of <code>temperature</code> sensor under the <code>root.ln</code> prefix path and stores the results in the <code>temperature_max</code> sensor using the same prefix path as the corresponding sensor. Where possible, it writes the value <code>100.0</code> for time intervals with no results.</p><p><code>cq3</code> executes at 20-second intervals, the same interval as the <code>EVERY</code> interval. Every 20 seconds, <code>cq3</code> runs a single query that covers the time range between <code>now()</code> minus the <code>start_time_offset</code> and <code>now()</code>, that is, the time range between 40 seconds prior to <code>now()</code> and <code>now()</code>.</p><p>Supposing that the current time is <code>2021-05-11T22:18:40.000+08:00</code>, we can see annotated log output about <code>cq3</code> running at DataNode if you set log level to DEBUG:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>At **2021-05-11T22:18:40.000+08:00**, \`cq3\` executes a query within the time range \`[2021-05-11T22:18:00, 2021-05-11T22:18:40)\`.</span></span>
<span class="line"><span>\`cq3\` generate 4 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:00.000+08:00|                            100.0|                            100.0|                            100.0|                            100.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:10.000+08:00|                            121.0|                             72.0|                            183.0|                            115.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>At **2021-05-11T22:19:00.000+08:00**, \`cq3\` executes a query within the time range \`[2021-05-11T22:18:20, 2021-05-11T22:19:00)\`.</span></span>
<span class="line"><span>\`cq3\` generate 4 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:40.000+08:00|                            137.0|                            172.0|                            135.0|                            193.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:50.000+08:00|                             16.0|                            124.0|                            183.0|                             18.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that <code>cq3</code> will calculate the results for some time interval many times, so here are the results:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>&gt; SELECT temperature_max from root.ln.*.*;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:00.000+08:00|                            100.0|                            100.0|                            100.0|                            100.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:10.000+08:00|                            121.0|                             72.0|                            183.0|                            115.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:40.000+08:00|                            137.0|                            172.0|                            135.0|                            193.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:50.000+08:00|                             16.0|                            124.0|                            183.0|                             18.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configuring-end-time-offset-for-cq-time-range" tabindex="-1"><a class="header-anchor" href="#configuring-end-time-offset-for-cq-time-range"><span>Configuring end_time_offset for CQ time range</span></a></h4><p>Use an <code>EVERY</code> interval and <code>RANGE</code> interval in the RESAMPLE clause to specify the CQ’s execution interval and the length of the CQ’s time range. And use <code>fill()</code> to change the value reported for time intervals with no data.</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> CONTINUOUS QUERY cq4</span></span>
<span class="line"><span style="color:#C678DD;">RESAMPLE</span><span style="color:#ABB2BF;"> EVERY 20s </span><span style="color:#C678DD;">RANGE</span><span style="color:#ABB2BF;"> 40s, 20s</span></span>
<span class="line"><span style="color:#C678DD;">BEGIN</span></span>
<span class="line"><span style="color:#C678DD;">  SELECT</span><span style="color:#ABB2BF;"> max_value(temperature)</span></span>
<span class="line"><span style="color:#C678DD;">  INTO</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt02</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt02</span><span style="color:#ABB2BF;">(temperature_max), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">(temperature_max)</span></span>
<span class="line"><span style="color:#C678DD;">  FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.*.*</span></span>
<span class="line"><span style="color:#C678DD;">  GROUP BY</span><span style="color:#ABB2BF;">(10s)</span></span>
<span class="line"><span style="color:#ABB2BF;">  FILL(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">END</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq4</code> calculates the 10-second average of <code>temperature</code> sensor under the <code>root.ln</code> prefix path and stores the results in the <code>temperature_max</code> sensor using the same prefix path as the corresponding sensor. Where possible, it writes the value <code>100.0</code> for time intervals with no results.</p><p><code>cq4</code> executes at 20-second intervals, the same interval as the <code>EVERY</code> interval. Every 20 seconds, <code>cq4</code> runs a single query that covers the time range between <code>now()</code> minus the <code>start_time_offset</code> and <code>now()</code> minus the <code>end_time_offset</code>, that is, the time range between 40 seconds prior to <code>now()</code> and 20 seconds prior to <code>now()</code>.</p><p>Supposing that the current time is <code>2021-05-11T22:18:40.000+08:00</code>, we can see annotated log output about <code>cq4</code> running at DataNode if you set log level to DEBUG:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>At **2021-05-11T22:18:40.000+08:00**, \`cq4\` executes a query within the time range \`[2021-05-11T22:18:00, 2021-05-11T22:18:20)\`.</span></span>
<span class="line"><span>\`cq4\` generate 2 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:00.000+08:00|                            100.0|                            100.0|                            100.0|                            100.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:10.000+08:00|                            121.0|                             72.0|                            183.0|                            115.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>At **2021-05-11T22:19:00.000+08:00**, \`cq4\` executes a query within the time range \`[2021-05-11T22:18:20, 2021-05-11T22:18:40)\`.</span></span>
<span class="line"><span>\`cq4\` generate 2 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that <code>cq4</code> will calculate the results for all time intervals only once after a delay of 20 seconds, so here are the results:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>&gt; SELECT temperature_max from root.ln.*.*;</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.temperature_max|root.ln.wf02.wt01.temperature_max|root.ln.wf01.wt02.temperature_max|root.ln.wf01.wt01.temperature_max|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span>|2021-05-11T22:18:00.000+08:00|                            100.0|                            100.0|                            100.0|                            100.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:10.000+08:00|                            121.0|                             72.0|                            183.0|                            115.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:20.000+08:00|                            122.0|                             45.0|                             59.0|                            181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:30.000+08:00|                            182.0|                            113.0|                             52.0|                            180.0|</span></span>
<span class="line"><span>+-----------------------------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cq-without-group-by-clause" tabindex="-1"><a class="header-anchor" href="#cq-without-group-by-clause"><span>CQ without group by clause</span></a></h4><p>Use an <code>EVERY</code> interval in the <code>RESAMPLE</code> clause to specify the CQ’s execution interval and the length of the CQ’s time range.</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> CONTINUOUS QUERY cq5</span></span>
<span class="line"><span style="color:#C678DD;">RESAMPLE</span><span style="color:#ABB2BF;"> EVERY 20s</span></span>
<span class="line"><span style="color:#C678DD;">BEGIN</span></span>
<span class="line"><span style="color:#C678DD;">  SELECT</span><span style="color:#ABB2BF;"> temperature + </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">  INTO</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">precalculated_sg</span><span style="color:#ABB2BF;">.::(temperature)</span></span>
<span class="line"><span style="color:#C678DD;">  FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.*.*</span></span>
<span class="line"><span style="color:#ABB2BF;">  align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device</span></span>
<span class="line"><span style="color:#C678DD;">END</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq5</code> calculates the <code>temperature + 1</code> under the <code>root.ln</code> prefix path and stores the results in the <code>root.precalculated_sg</code> database. Sensors use the same prefix path as the corresponding sensor.</p><p><code>cq5</code> executes at 20-second intervals, the same interval as the <code>EVERY</code> interval. Every 20 seconds, <code>cq5</code> runs a single query that covers the time range for the current time bucket, that is, the 20-second time bucket that intersects with <code>now()</code>.</p><p>Supposing that the current time is <code>2021-05-11T22:18:40.000+08:00</code>, we can see annotated log output about <code>cq5</code> running at DataNode if you set log level to DEBUG:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>At **2021-05-11T22:18:40.000+08:00**, \`cq5\` executes a query within the time range \`[2021-05-11T22:18:20, 2021-05-11T22:18:40)\`.</span></span>
<span class="line"><span>\`cq5\` generate 16 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+-----------+</span></span>
<span class="line"><span>|                         Time|                         Device|temperature|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+-----------+</span></span>
<span class="line"><span>|2021-05-11T22:18:24.949+08:00|root.precalculated_sg.wf02.wt02|      123.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:29.967+08:00|root.precalculated_sg.wf02.wt02|       48.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:34.979+08:00|root.precalculated_sg.wf02.wt02|      183.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:39.990+08:00|root.precalculated_sg.wf02.wt02|       45.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:24.949+08:00|root.precalculated_sg.wf02.wt01|       46.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:29.967+08:00|root.precalculated_sg.wf02.wt01|       15.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:34.979+08:00|root.precalculated_sg.wf02.wt01|      114.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:39.990+08:00|root.precalculated_sg.wf02.wt01|       12.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:24.949+08:00|root.precalculated_sg.wf01.wt02|       12.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:29.967+08:00|root.precalculated_sg.wf01.wt02|       60.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:34.979+08:00|root.precalculated_sg.wf01.wt02|       30.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:39.990+08:00|root.precalculated_sg.wf01.wt02|       53.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:24.949+08:00|root.precalculated_sg.wf01.wt01|       15.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:29.967+08:00|root.precalculated_sg.wf01.wt01|      182.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:34.979+08:00|root.precalculated_sg.wf01.wt01|      181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:39.990+08:00|root.precalculated_sg.wf01.wt01|       20.0|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+-----------+</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>At **2021-05-11T22:19:00.000+08:00**, \`cq5\` executes a query within the time range \`[2021-05-11T22:18:40, 2021-05-11T22:19:00)\`.</span></span>
<span class="line"><span>\`cq5\` generate 12 lines:</span></span>
<span class="line"><span>&gt;</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+-----------+</span></span>
<span class="line"><span>|                         Time|                         Device|temperature|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+-----------+</span></span>
<span class="line"><span>|2021-05-11T22:18:44.995+08:00|root.precalculated_sg.wf02.wt02|       79.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:49.999+08:00|root.precalculated_sg.wf02.wt02|      138.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:55.003+08:00|root.precalculated_sg.wf02.wt02|       17.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:44.995+08:00|root.precalculated_sg.wf02.wt01|       39.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:49.999+08:00|root.precalculated_sg.wf02.wt01|      173.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:55.003+08:00|root.precalculated_sg.wf02.wt01|      125.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:44.995+08:00|root.precalculated_sg.wf01.wt02|      124.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:49.999+08:00|root.precalculated_sg.wf01.wt02|      136.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:55.003+08:00|root.precalculated_sg.wf01.wt02|      184.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:44.995+08:00|root.precalculated_sg.wf01.wt01|       53.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:49.999+08:00|root.precalculated_sg.wf01.wt01|      194.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:55.003+08:00|root.precalculated_sg.wf01.wt01|       19.0|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+-----------+</span></span>
<span class="line"><span>&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq5</code> won&#39;t deal with data that is before the current time window which is <code>2021-05-11T22:18:20.000+08:00</code>, so here are the results:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>&gt; SELECT temperature from root.precalculated_sg.*.* align by device;</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+-----------+</span></span>
<span class="line"><span>|                         Time|                         Device|temperature|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+-----------+</span></span>
<span class="line"><span>|2021-05-11T22:18:24.949+08:00|root.precalculated_sg.wf02.wt02|      123.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:29.967+08:00|root.precalculated_sg.wf02.wt02|       48.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:34.979+08:00|root.precalculated_sg.wf02.wt02|      183.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:39.990+08:00|root.precalculated_sg.wf02.wt02|       45.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:44.995+08:00|root.precalculated_sg.wf02.wt02|       79.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:49.999+08:00|root.precalculated_sg.wf02.wt02|      138.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:55.003+08:00|root.precalculated_sg.wf02.wt02|       17.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:24.949+08:00|root.precalculated_sg.wf02.wt01|       46.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:29.967+08:00|root.precalculated_sg.wf02.wt01|       15.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:34.979+08:00|root.precalculated_sg.wf02.wt01|      114.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:39.990+08:00|root.precalculated_sg.wf02.wt01|       12.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:44.995+08:00|root.precalculated_sg.wf02.wt01|       39.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:49.999+08:00|root.precalculated_sg.wf02.wt01|      173.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:55.003+08:00|root.precalculated_sg.wf02.wt01|      125.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:24.949+08:00|root.precalculated_sg.wf01.wt02|       12.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:29.967+08:00|root.precalculated_sg.wf01.wt02|       60.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:34.979+08:00|root.precalculated_sg.wf01.wt02|       30.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:39.990+08:00|root.precalculated_sg.wf01.wt02|       53.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:44.995+08:00|root.precalculated_sg.wf01.wt02|      124.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:49.999+08:00|root.precalculated_sg.wf01.wt02|      136.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:55.003+08:00|root.precalculated_sg.wf01.wt02|      184.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:24.949+08:00|root.precalculated_sg.wf01.wt01|       15.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:29.967+08:00|root.precalculated_sg.wf01.wt01|      182.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:34.979+08:00|root.precalculated_sg.wf01.wt01|      181.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:39.990+08:00|root.precalculated_sg.wf01.wt01|       20.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:44.995+08:00|root.precalculated_sg.wf01.wt01|       53.0| </span></span>
<span class="line"><span>|2021-05-11T22:18:49.999+08:00|root.precalculated_sg.wf01.wt01|      194.0|</span></span>
<span class="line"><span>|2021-05-11T22:18:55.003+08:00|root.precalculated_sg.wf01.wt01|       19.0|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+-----------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-cq-management" tabindex="-1"><a class="header-anchor" href="#_4-cq-management"><span>4. CQ Management</span></a></h3><h4 id="listing-continuous-queries" tabindex="-1"><a class="header-anchor" href="#listing-continuous-queries"><span>Listing continuous queries</span></a></h4><p>List every CQ on the IoTDB Cluster with:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">SHOW (CONTINUOUS QUERIES | CQS)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>SHOW (CONTINUOUS QUERIES | CQS)</code> order results by <code>cq_id</code>.</p><h5 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h5><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">SHOW CONTINUOUS QUERIES;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>we will get:</p><table><thead><tr><th style="text-align:left;">cq_id</th><th>query</th><th>state</th></tr></thead><tbody><tr><td style="text-align:left;">s1_count_cq</td><td>CREATE CQ s1_count_cq<br>BEGIN<br>SELECT count(s1)<br>INTO root.sg_count.d.count_s1<br>FROM root.sg.d<br>GROUP BY(30m)<br>END</td><td>active</td></tr></tbody></table><h4 id="dropping-continuous-queries" tabindex="-1"><a class="header-anchor" href="#dropping-continuous-queries"><span>Dropping continuous queries</span></a></h4><p>Drop a CQ with a specific <code>cq_id</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">DROP</span><span style="color:#ABB2BF;"> (CONTINUOUS QUERY | CQ) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">cq_id</span><span style="color:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>DROP CQ returns an empty result.</p><h5 id="examples-1" tabindex="-1"><a class="header-anchor" href="#examples-1"><span>Examples</span></a></h5><p>Drop the CQ named <code>s1_count_cq</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">DROP</span><span style="color:#ABB2BF;"> CONTINUOUS QUERY s1_count_cq;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="altering-continuous-queries" tabindex="-1"><a class="header-anchor" href="#altering-continuous-queries"><span>Altering continuous queries</span></a></h4><p>CQs can&#39;t be altered once they&#39;re created. To change a CQ, you must <code>DROP</code> and re<code>CREATE</code> it with the updated settings.</p><h3 id="_5-cq-use-cases" tabindex="-1"><a class="header-anchor" href="#_5-cq-use-cases"><span>5. CQ Use Cases</span></a></h3><h4 id="downsampling-and-data-retention" tabindex="-1"><a class="header-anchor" href="#downsampling-and-data-retention"><span>Downsampling and Data Retention</span></a></h4><p>Use CQs with <code>TTL</code> set on database in IoTDB to mitigate storage concerns. Combine CQs and <code>TTL</code> to automatically downsample high precision data to a lower precision and remove the dispensable, high precision data from the database.</p><h4 id="recalculating-expensive-queries" tabindex="-1"><a class="header-anchor" href="#recalculating-expensive-queries"><span>Recalculating expensive queries</span></a></h4><p>Shorten query runtimes by pre-calculating expensive queries with CQs. Use a CQ to automatically downsample commonly-queried, high precision data to a lower precision. Queries on lower precision data require fewer resources and return faster.</p><blockquote><p>Pre-calculate queries for your preferred graphing tool to accelerate the population of graphs and dashboards.</p></blockquote><h4 id="substituting-for-sub-query" tabindex="-1"><a class="header-anchor" href="#substituting-for-sub-query"><span>Substituting for sub-query</span></a></h4><p>IoTDB does not support sub queries. We can get the same functionality by creating a CQ as a sub query and store its result into other time series and then querying from those time series again will be like doing nested sub query.</p><h5 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h5><p>IoTDB does not accept the following query with a nested sub query. The query calculates the average number of non-null values of <code>s1</code> at 30 minute intervals:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(count_s1) </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> count_s1 </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">now</span><span style="color:#ABB2BF;">()), 30m));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To get the same results:</p><p><strong>1. Create a CQ</strong></p><p>This step performs the nested sub query in from clause of the query above. The following CQ automatically calculates the number of non-null values of <code>s1</code> at 30 minute intervals and writes those counts into the new <code>root.sg_count.d.count_s1</code> time series.</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> CQ s1_count_cq </span></span>
<span class="line"><span style="color:#C678DD;">BEGIN</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">    SELECT</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(s1)  </span></span>
<span class="line"><span style="color:#C678DD;">        INTO</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_count</span><span style="color:#ABB2BF;">.d(count_s1)</span></span>
<span class="line"><span style="color:#C678DD;">        FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d</span></span>
<span class="line"><span style="color:#C678DD;">        GROUP BY</span><span style="color:#ABB2BF;">(30m)</span></span>
<span class="line"><span style="color:#C678DD;">END</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. Query the CQ results</strong></p><p>Next step performs the avg([...]) part of the outer query above.</p><p>Query the data in the time series <code>root.sg_count.d.count_s1</code> to calculate the average of it:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(count_s1) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_count</span><span style="color:#ABB2BF;">.d;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_6-system-parameter-configuration" tabindex="-1"><a class="header-anchor" href="#_6-system-parameter-configuration"><span>6. System Parameter Configuration</span></a></h3><table><thead><tr><th style="text-align:left;">Name</th><th>Description</th><th>Data Type</th><th>Default Value</th></tr></thead><tbody><tr><td style="text-align:left;"><code>continuous_query_submit_thread_count</code></td><td>The number of threads in the scheduled thread pool that submit continuous query tasks periodically</td><td>int32</td><td>2</td></tr><tr><td style="text-align:left;"><code>continuous_query_min_every_interval_in_ms</code></td><td>The minimum value of the continuous query execution time interval</td><td>duration</td><td>1000</td></tr></tbody></table><h2 id="user-defined-function-udf" tabindex="-1"><a class="header-anchor" href="#user-defined-function-udf"><span>USER-DEFINED FUNCTION (UDF)</span></a></h2><p>IoTDB provides a variety of built-in functions to meet your computing needs, and you can also create user defined functions to meet more computing needs.</p><p>This document describes how to write, register and use a UDF.</p><h3 id="udf-types" tabindex="-1"><a class="header-anchor" href="#udf-types"><span>UDF Types</span></a></h3><p>In IoTDB, you can expand two types of UDF:</p><table><thead><tr><th>UDF Class</th><th>Description</th></tr></thead><tbody><tr><td>UDTF（User Defined Timeseries Generating Function）</td><td>This type of function can take <strong>multiple</strong> time series as input, and output <strong>one</strong> time series, which can have any number of data points.</td></tr><tr><td>UDAF（User Defined Aggregation Function）</td><td>Under development, please stay tuned.</td></tr></tbody></table><h3 id="udf-development-dependencies" tabindex="-1"><a class="header-anchor" href="#udf-development-dependencies"><span>UDF Development Dependencies</span></a></h3><p>If you use <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven</a>, you can search for the development dependencies listed below from the <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven repository</a> . Please note that you must select the same dependency version as the target IoTDB server version for development.</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;org.apache.iotdb&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;udf-api&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;1.0.0&lt;/</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;provided&lt;/</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="udtf-user-defined-timeseries-generating-function" tabindex="-1"><a class="header-anchor" href="#udtf-user-defined-timeseries-generating-function"><span>UDTF（User Defined Timeseries Generating Function）</span></a></h3><p>To write a UDTF, you need to inherit the <code>org.apache.iotdb.udf.api.UDTF</code> class, and at least implement the <code>beforeStart</code> method and a <code>transform</code> method.</p><p>The following table shows all the interfaces available for user implementation.</p><table><thead><tr><th style="text-align:left;">Interface definition</th><th style="text-align:left;">Description</th><th>Required to Implement</th></tr></thead><tbody><tr><td style="text-align:left;"><code>void validate(UDFParameterValidator validator) throws Exception</code></td><td style="text-align:left;">This method is mainly used to validate <code>UDFParameters</code> and it is executed before <code>beforeStart(UDFParameters, UDTFConfigurations)</code> is called.</td><td>Optional</td></tr><tr><td style="text-align:left;"><code>void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception</code></td><td style="text-align:left;">The initialization method to call the user-defined initialization behavior before a UDTF processes the input data. Every time a user executes a UDTF query, the framework will construct a new UDF instance, and <code>beforeStart</code> will be called.</td><td>Required</td></tr><tr><td style="text-align:left;"><code>void transform(Row row, PointCollector collector) throws Exception</code></td><td style="text-align:left;">This method is called by the framework. This data processing method will be called when you choose to use the <code>RowByRowAccessStrategy</code> strategy (set in <code>beforeStart</code>) to consume raw data. Input data is passed in by <code>Row</code>, and the transformation result should be output by <code>PointCollector</code>. You need to call the data collection method provided by <code>collector</code> to determine the output data.</td><td>Required to implement at least one <code>transform</code> method</td></tr><tr><td style="text-align:left;"><code>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</code></td><td style="text-align:left;">This method is called by the framework. This data processing method will be called when you choose to use the <code>SlidingSizeWindowAccessStrategy</code> or <code>SlidingTimeWindowAccessStrategy</code> strategy (set in <code>beforeStart</code>) to consume raw data. Input data is passed in by <code>RowWindow</code>, and the transformation result should be output by <code>PointCollector</code>. You need to call the data collection method provided by <code>collector</code> to determine the output data.</td><td>Required to implement at least one <code>transform</code> method</td></tr><tr><td style="text-align:left;"><code>void terminate(PointCollector collector) throws Exception</code></td><td style="text-align:left;">This method is called by the framework. This method will be called once after all <code>transform</code> calls have been executed. In a single UDF query, this method will and will only be called once. You need to call the data collection method provided by <code>collector</code> to determine the output data.</td><td>Optional</td></tr><tr><td style="text-align:left;"><code>void beforeDestroy() </code></td><td style="text-align:left;">This method is called by the framework after the last input data is processed, and will only be called once in the life cycle of each UDF instance.</td><td>Optional</td></tr></tbody></table><p>In the life cycle of a UDTF instance, the calling sequence of each method is as follows:</p><ol><li><code>void validate(UDFParameterValidator validator) throws Exception</code></li><li><code>void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception</code></li><li><code>void transform(Row row, PointCollector collector) throws Exception</code> or <code>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</code></li><li><code>void terminate(PointCollector collector) throws Exception</code></li><li><code>void beforeDestroy() </code></li></ol><p>Note that every time the framework executes a UDTF query, a new UDF instance will be constructed. When the query ends, the corresponding instance will be destroyed. Therefore, the internal data of the instances in different UDTF queries (even in the same SQL statement) are isolated. You can maintain some state data in the UDTF without considering the influence of concurrency and other factors.</p><p>The usage of each interface will be described in detail below.</p><h4 id="void-validate-udfparametervalidator-validator-throws-exception" tabindex="-1"><a class="header-anchor" href="#void-validate-udfparametervalidator-validator-throws-exception"><span>void validate(UDFParameterValidator validator) throws Exception</span></a></h4><p>The <code>validate</code> method is used to validate the parameters entered by the user.</p><p>In this method, you can limit the number and types of input time series, check the attributes of user input, or perform any custom verification.</p><p>Please refer to the Javadoc for the usage of <code>UDFParameterValidator</code>.</p><h4 id="void-beforestart-udfparameters-parameters-udtfconfigurations-configurations-throws-exception" tabindex="-1"><a class="header-anchor" href="#void-beforestart-udfparameters-parameters-udtfconfigurations-configurations-throws-exception"><span>void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception</span></a></h4><p>This method is mainly used to customize UDTF. In this method, the user can do the following things:</p><ol><li>Use UDFParameters to get the time series paths and parse key-value pair attributes entered by the user.</li><li>Set the strategy to access the raw data and set the output data type in UDTFConfigurations.</li><li>Create resources, such as establishing external connections, opening files, etc.</li></ol><h5 id="udfparameters" tabindex="-1"><a class="header-anchor" href="#udfparameters"><span>UDFParameters</span></a></h5><p><code>UDFParameters</code> is used to parse UDF parameters in SQL statements (the part in parentheses after the UDF function name in SQL). The input parameters have two parts. The first part is data types of the time series that the UDF needs to process, and the second part is the key-value pair attributes for customization. Only the second part can be empty.</p><p>Example：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> UDF(s1, s2, </span><span style="color:#98C379;">&#39;key1&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;iotdb&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;key2&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;123.45&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Usage：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;"> parameters</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> UDTFConfigurations</span><span style="color:#E06C75;"> configurations) throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B;">  String</span><span style="color:#E06C75;"> stringValue </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key1&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // iotdb</span></span>
<span class="line"><span style="color:#E5C07B;">  Float</span><span style="color:#E06C75;"> floatValue </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFloat</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key2&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 123.45</span></span>
<span class="line"><span style="color:#E5C07B;">  Double</span><span style="color:#E06C75;"> doubleValue </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDouble</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key3&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // null</span></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#E06C75;"> intValue </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getIntOrDefault</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key4&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">678</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 678</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // do something</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // configurations</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="udtfconfigurations" tabindex="-1"><a class="header-anchor" href="#udtfconfigurations"><span>UDTFConfigurations</span></a></h5><p>You must use <code>UDTFConfigurations</code> to specify the strategy used by UDF to access raw data and the type of output sequence.</p><p>Usage：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;"> parameters</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> UDTFConfigurations</span><span style="color:#E06C75;"> configurations) throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // parameters</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // configurations</span></span>
<span class="line"><span style="color:#E06C75;">  configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RowByRowAccessStrategy</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT32</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>setAccessStrategy</code> method is used to set the UDF&#39;s strategy for accessing the raw data, and the <code>setOutputDataType</code> method is used to set the data type of the output sequence.</p><h6 id="setaccessstrategy" tabindex="-1"><a class="header-anchor" href="#setaccessstrategy"><span>setAccessStrategy</span></a></h6><p>Note that the raw data access strategy you set here determines which <code>transform</code> method the framework will call. Please implement the <code>transform</code> method corresponding to the raw data access strategy. Of course, you can also dynamically decide which strategy to set based on the attribute parameters parsed by <code>UDFParameters</code>. Therefore, two <code>transform</code> methods are also allowed to be implemented in one UDF.</p><p>The following are the strategies you can set:</p><table><thead><tr><th style="text-align:left;">Interface definition</th><th style="text-align:left;">Description</th><th>The <code>transform</code> Method to Call</th></tr></thead><tbody><tr><td style="text-align:left;"><code>RowByRowAccessStrategy</code></td><td style="text-align:left;">Process raw data row by row. The framework calls the <code>transform</code> method once for each row of raw data input. When UDF has only one input sequence, a row of input is one data point in the input sequence. When UDF has multiple input sequences, one row of input is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of <code>null</code>, but not all of them are <code>null</code>)</td><td><code>void transform(Row row, PointCollector collector) throws Exception</code></td></tr><tr><td style="text-align:left;"><code>SlidingTimeWindowAccessStrategy</code></td><td style="text-align:left;">Process a batch of data in a fixed time interval each time. We call the container of a data batch a window. The framework calls the <code>transform</code> method once for each raw data input window. There may be multiple rows of data in a window, and each row is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of <code>null</code>, but not all of them are <code>null</code>)</td><td><code>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</code></td></tr><tr><td style="text-align:left;"><code>SlidingSizeWindowAccessStrategy</code></td><td style="text-align:left;">The raw data is processed batch by batch, and each batch contains a fixed number of raw data rows (except the last batch). We call the container of a data batch a window. The framework calls the <code>transform</code> method once for each raw data input window. There may be multiple rows of data in a window, and each row is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of <code>null</code>, but not all of them are <code>null</code>)</td><td><code>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</code></td></tr><tr><td style="text-align:left;"><code>SessionTimeWindowAccessStrategy</code></td><td style="text-align:left;">The raw data is processed batch by batch. We call the container of a data batch a window. The time interval between each two windows is greater than or equal to the <code>sessionGap</code> given by the user. The framework calls the <code>transform</code> method once for each raw data input window. There may be multiple rows of data in a window, and each row is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of <code>null</code>, but not all of them are <code>null</code>)</td><td><code>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</code></td></tr><tr><td style="text-align:left;"><code>StateWindowAccessStrategy</code></td><td style="text-align:left;">The raw data is processed batch by batch. We call the container of a data batch a window. In the state window, for text type or boolean type data, each value of the point in window is equal to the value of the first point in the window, and for numerical data, the distance between each value of the point in window and the value of the first point in the window is less than the threshold <code>delta</code> given by the user. The framework calls the <code>transform</code> method once for each raw data input window. There may be multiple rows of data in a window. Currently, we only support state window for one measurement, that is, a column of data.</td><td><code>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</code></td></tr></tbody></table><p><code>RowByRowAccessStrategy</code>: The construction of <code>RowByRowAccessStrategy</code> does not require any parameters.</p><p>The <code>SlidingTimeWindowAccessStrategy</code> is shown schematically below.<br><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/UDF-User-Defined-Function/timeWindow.png"></p><p><code>SlidingTimeWindowAccessStrategy</code>: <code>SlidingTimeWindowAccessStrategy</code> has many constructors, you can pass 3 types of parameters to them:</p><ul><li>Parameter 1: The display window on the time axis</li><li>Parameter 2: Time interval for dividing the time axis (should be positive)</li><li>Parameter 3: Time sliding step (not required to be greater than or equal to the time interval, but must be a positive number)</li></ul><p>The first type of parameters are optional. If the parameters are not provided, the beginning time of the display window will be set to the same as the minimum timestamp of the query result set, and the ending time of the display window will be set to the same as the maximum timestamp of the query result set.</p><p>The sliding step parameter is also optional. If the parameter is not provided, the sliding step will be set to the same as the time interval for dividing the time axis.</p><p>The relationship between the three types of parameters can be seen in the figure below. Please see the Javadoc for more details.</p><div style="text-align:center;"><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/github/99787878-47b51480-2b5b-11eb-8ed3-84088c5c30f7.png"></div><p>Note that the actual time interval of some of the last time windows may be less than the specified time interval parameter. In addition, there may be cases where the number of data rows in some time windows is 0. In these cases, the framework will also call the <code>transform</code> method for the empty windows.</p><p>The <code>SlidingSizeWindowAccessStrategy</code> is shown schematically below.<br><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/UDF-User-Defined-Function/countWindow.png"></p><p><code>SlidingSizeWindowAccessStrategy</code>: <code>SlidingSizeWindowAccessStrategy</code> has many constructors, you can pass 2 types of parameters to them:</p><ul><li>Parameter 1: Window size. This parameter specifies the number of data rows contained in a data processing window. Note that the number of data rows in some of the last time windows may be less than the specified number of data rows.</li><li>Parameter 2: Sliding step. This parameter means the number of rows between the first point of the next window and the first point of the current window. (This parameter is not required to be greater than or equal to the window size, but must be a positive number)</li></ul><p>The sliding step parameter is optional. If the parameter is not provided, the sliding step will be set to the same as the window size.</p><p>The <code>SessionTimeWindowAccessStrategy</code> is shown schematically below. <strong>Time intervals less than or equal to the given minimum time interval <code>sessionGap</code> are assigned in one group</strong><br><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/UDF-User-Defined-Function/sessionWindow.png"></p><p><code>SessionTimeWindowAccessStrategy</code>: <code>SessionTimeWindowAccessStrategy</code> has many constructors, you can pass 2 types of parameters to them:</p><ul><li>Parameter 1: The display window on the time axis.</li><li>Parameter 2: The minimum time interval <code>sessionGap</code> of two adjacent windows.</li></ul><p>The <code>StateWindowAccessStrategy</code> is shown schematically below. **For numerical data, if the state difference is less than or equal to the given threshold <code>delta</code>, it will be assigned in one group. **<br><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/UDF-User-Defined-Function/stateWindow.png"></p><p><code>StateWindowAccessStrategy</code> has four constructors.</p><ul><li>Constructor 1: For numerical data, there are 3 parameters: the time axis can display the start and end time of the time window and the threshold <code>delta</code> for the allowable change within a single window.</li><li>Constructor 2: For text data and boolean data, there are 3 parameters: the time axis can be provided to display the start and end time of the time window. For both data types, the data within a single window is same, and there is no need to provide an allowable change threshold.</li><li>Constructor 3: For numerical data, there are 1 parameters: you can only provide the threshold delta that is allowed to change within a single window. The start time of the time axis display time window will be defined as the smallest timestamp in the entire query result set, and the time axis display time window end time will be defined as The largest timestamp in the entire query result set.</li><li>Constructor 4: For text data and boolean data, you can provide no parameter. The start and end timestamps are explained in Constructor 3.</li></ul><p>StateWindowAccessStrategy can only take one column as input for now.</p><p>Please see the Javadoc for more details.</p><h6 id="setoutputdatatype" tabindex="-1"><a class="header-anchor" href="#setoutputdatatype"><span>setOutputDataType</span></a></h6><p>Note that the type of output sequence you set here determines the type of data that the <code>PointCollector</code> can actually receive in the <code>transform</code> method. The relationship between the output data type set in <code>setOutputDataType</code> and the actual data output type that <code>PointCollector</code> can receive is as follows:</p><table><thead><tr><th style="text-align:left;">Output Data Type Set in <code>setOutputDataType</code></th><th style="text-align:left;">Data Type that <code>PointCollector</code> Can Receive</th></tr></thead><tbody><tr><td style="text-align:left;"><code>INT32</code></td><td style="text-align:left;"><code>int</code></td></tr><tr><td style="text-align:left;"><code>INT64</code></td><td style="text-align:left;"><code>long</code></td></tr><tr><td style="text-align:left;"><code>FLOAT</code></td><td style="text-align:left;"><code>float</code></td></tr><tr><td style="text-align:left;"><code>DOUBLE</code></td><td style="text-align:left;"><code>double</code></td></tr><tr><td style="text-align:left;"><code>BOOLEAN</code></td><td style="text-align:left;"><code>boolean</code></td></tr><tr><td style="text-align:left;"><code>TEXT</code></td><td style="text-align:left;"><code>java.lang.String</code> and <code>org.apache.iotdb.udf.api.type.Binary</code></td></tr></tbody></table><p>The type of output time series of a UDTF is determined at runtime, which means that a UDTF can dynamically determine the type of output time series according to the type of input time series.<br> Here is a simple example:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;"> parameters</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> UDTFConfigurations</span><span style="color:#E06C75;"> configurations) throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // do something</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">  configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RowByRowAccessStrategy</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="void-transform-row-row-pointcollector-collector-throws-exception" tabindex="-1"><a class="header-anchor" href="#void-transform-row-row-pointcollector-collector-throws-exception"><span>void transform(Row row, PointCollector collector) throws Exception</span></a></h4><p>You need to implement this method when you specify the strategy of UDF to read the original data as <code>RowByRowAccessStrategy</code>.</p><p>This method processes the raw data one row at a time. The raw data is input from <code>Row</code> and output by <code>PointCollector</code>. You can output any number of data points in one <code>transform</code> method call. It should be noted that the type of output data points must be the same as you set in the <code>beforeStart</code> method, and the timestamps of output data points must be strictly monotonically increasing.</p><p>The following is a complete UDF example that implements the <code>void transform(Row row, PointCollector collector) throws Exception</code> method. It is an adder that receives two columns of time series as input. When two data points in a row are not <code>null</code>, this UDF will output the algebraic sum of these two data points.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.UDTF</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.access.Row</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.collector.PointCollector</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.config.UDTFConfigurations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.strategy.RowByRowAccessStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.type.Type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Adder</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> UDTF</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;font-style:italic;"> parameters</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">UDTFConfigurations</span><span style="color:#E06C75;font-style:italic;"> configurations</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TSDataType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT64</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RowByRowAccessStrategy</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Row</span><span style="color:#E06C75;font-style:italic;"> row</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PointCollector</span><span style="color:#E06C75;font-style:italic;"> collector</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNull</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNull</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putLong</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="void-transform-rowwindow-rowwindow-pointcollector-collector-throws-exception" tabindex="-1"><a class="header-anchor" href="#void-transform-rowwindow-rowwindow-pointcollector-collector-throws-exception"><span>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</span></a></h4><p>You need to implement this method when you specify the strategy of UDF to read the original data as <code>SlidingTimeWindowAccessStrategy</code> or <code>SlidingSizeWindowAccessStrategy</code>.</p><p>This method processes a batch of data in a fixed number of rows or a fixed time interval each time, and we call the container containing this batch of data a window. The raw data is input from <code>RowWindow</code> and output by <code>PointCollector</code>. <code>RowWindow</code> can help you access a batch of <code>Row</code>, it provides a set of interfaces for random access and iterative access to this batch of <code>Row</code>. You can output any number of data points in one <code>transform</code> method call. It should be noted that the type of output data points must be the same as you set in the <code>beforeStart</code> method, and the timestamps of output data points must be strictly monotonically increasing.</p><p>Below is a complete UDF example that implements the <code>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</code> method. It is a counter that receives any number of time series as input, and its function is to count and output the number of data rows in each time window within a specified time range.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.UDTF</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.access.Row</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.access.RowWindow</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.collector.PointCollector</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.config.UDTFConfigurations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.strategy.SlidingTimeWindowAccessStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.type.Type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Counter</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> UDTF</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;font-style:italic;"> parameters</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">UDTFConfigurations</span><span style="color:#E06C75;font-style:italic;"> configurations</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TSDataType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT32</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> SlidingTimeWindowAccessStrategy</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">            parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;time_interval&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">            parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sliding_step&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">            parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;display_window_begin&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">            parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;display_window_end&quot;</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">RowWindow</span><span style="color:#E06C75;font-style:italic;"> rowWindow</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PointCollector</span><span style="color:#E06C75;font-style:italic;"> collector</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">rowWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">windowSize</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rowWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">windowStartTime</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">rowWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">windowSize</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="void-terminate-pointcollector-collector-throws-exception" tabindex="-1"><a class="header-anchor" href="#void-terminate-pointcollector-collector-throws-exception"><span>void terminate(PointCollector collector) throws Exception</span></a></h4><p>In some scenarios, a UDF needs to traverse all the original data to calculate the final output data points. The <code>terminate</code> interface provides support for those scenarios.</p><p>This method is called after all <code>transform</code> calls are executed and before the <code>beforeDestory</code> method is executed. You can implement the <code>transform</code> method to perform pure data processing (without outputting any data points), and implement the <code>terminate</code> method to output the processing results.</p><p>The processing results need to be output by the <code>PointCollector</code>. You can output any number of data points in one <code>terminate</code> method call. It should be noted that the type of output data points must be the same as you set in the <code>beforeStart</code> method, and the timestamps of output data points must be strictly monotonically increasing.</p><p>Below is a complete UDF example that implements the <code>void terminate(PointCollector collector) throws Exception</code> method. It takes one time series whose data type is <code>INT32</code> as input, and outputs the maximum value point of the series.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.UDTF</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.access.Row</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.collector.PointCollector</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.config.UDTFConfigurations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.strategy.RowByRowAccessStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.type.Type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Max</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> UDTF</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> Long</span><span style="color:#E06C75;"> time</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;font-style:italic;"> parameters</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">UDTFConfigurations</span><span style="color:#E06C75;font-style:italic;"> configurations</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TSDataType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT32</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RowByRowAccessStrategy</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Row</span><span style="color:#E06C75;font-style:italic;"> row</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PointCollector</span><span style="color:#E06C75;font-style:italic;"> collector</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNull</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> candidateValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (time </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> value </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> candidateValue) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      time </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">      value </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> candidateValue;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> terminate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">PointCollector</span><span style="color:#E06C75;font-style:italic;"> collector</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (time </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putInt</span><span style="color:#ABB2BF;">(time, value);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="void-beforedestroy" tabindex="-1"><a class="header-anchor" href="#void-beforedestroy"><span>void beforeDestroy()</span></a></h4><p>The method for terminating a UDF.</p><p>This method is called by the framework. For a UDF instance, <code>beforeDestroy</code> will be called after the last record is processed. In the entire life cycle of the instance, <code>beforeDestroy</code> will only be called once.</p><h3 id="maven-project-example" tabindex="-1"><a class="header-anchor" href="#maven-project-example"><span>Maven Project Example</span></a></h3><p>If you use Maven, you can build your own UDF project referring to our <strong>udf-example</strong> module. You can find the project <a href="https://github.com/apache/iotdb/tree/master/example/udf" target="_blank" rel="noopener noreferrer">here</a>.</p><h3 id="udf-registration" tabindex="-1"><a class="header-anchor" href="#udf-registration"><span>UDF Registration</span></a></h3><p>The process of registering a UDF in IoTDB is as follows:</p><ol><li>Implement a complete UDF class, assuming the full class name of this class is <code>org.apache.iotdb.udf.ExampleUDTF</code>.</li><li>Package your project into a JAR. If you use Maven to manage your project, you can refer to the Maven project example above.</li><li>Make preparations for registration according to the registration mode. For details, see the following example.</li><li>You can use following SQL to register UDF.</li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#C678DD;"> FUNCTION</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#ABB2BF;">UDF-</span><span style="color:#C678DD;">NAME</span><span style="color:#56B6C2;">&gt;</span><span style="color:#C678DD;"> AS</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#ABB2BF;">UDF-CLASS-FULL-PATHNAME</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">USING</span><span style="color:#ABB2BF;"> URI URI-STRING)?</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="example-register-udf-named-example-you-can-choose-either-of-the-following-two-registration-methods" tabindex="-1"><a class="header-anchor" href="#example-register-udf-named-example-you-can-choose-either-of-the-following-two-registration-methods"><span>Example: register UDF named <code>example</code>, you can choose either of the following two registration methods</span></a></h4><h5 id="no-uri" tabindex="-1"><a class="header-anchor" href="#no-uri"><span>No URI</span></a></h5><p>Prepare:<br> When use this method to register，you should put JAR to directory <code>iotdb-server-1.0.0-all-bin/ext/udf</code>（directory can config）.<br><strong>Note，you should put JAR to this directory of all DataNodes if using Cluster</strong></p><p>SQL:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#C678DD;"> FUNCTION</span><span style="color:#61AFEF;"> example</span><span style="color:#C678DD;"> AS</span><span style="color:#98C379;"> &#39;org.apache.iotdb.udf.UDTFExample&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="using-uri" tabindex="-1"><a class="header-anchor" href="#using-uri"><span>Using URI</span></a></h5><p>Prepare:<br> When use this method to register，you need to upload the JAR to URI server and ensure the IoTDB instance executing this registration statement has access to the URI server.<br><strong>Note，you needn&#39;t place JAR manually，IoTDB will download the JAR and sync it.</strong></p><p>SQL:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#C678DD;"> FUNCTION</span><span style="color:#61AFEF;"> example</span><span style="color:#C678DD;"> AS</span><span style="color:#98C379;"> &#39;org.apache.iotdb.udf.UDTFExample&#39;</span><span style="color:#C678DD;"> USING</span><span style="color:#ABB2BF;"> URI </span><span style="color:#98C379;">&#39;http://jar/example.jar&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>Note</span></a></h4><p>Since UDF instances are dynamically loaded through reflection technology, you do not need to restart the server during the UDF registration process.</p><p>UDF function names are not case-sensitive.</p><p>Please ensure that the function name given to the UDF is different from all built-in function names. A UDF with the same name as a built-in function cannot be registered.</p><p>We recommend that you do not use classes that have the same class name but different function logic in different JAR packages. For example, in <code>UDF(UDAF/UDTF): udf1, udf2</code>, the JAR package of udf1 is <code>udf1.jar</code> and the JAR package of udf2 is <code>udf2.jar</code>. Assume that both JAR packages contain the <code>org.apache.iotdb.udf.ExampleUDTF</code> class. If you use two UDFs in the same SQL statement at the same time, the system will randomly load either of them and may cause inconsistency in UDF execution behavior.</p><h3 id="udf-deregistration" tabindex="-1"><a class="header-anchor" href="#udf-deregistration"><span>UDF Deregistration</span></a></h3><p>The following shows the SQL syntax of how to deregister a UDF.</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">DROP</span><span style="color:#C678DD;"> FUNCTION</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#ABB2BF;">UDF-</span><span style="color:#C678DD;">NAME</span><span style="color:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here is an example:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">DROP</span><span style="color:#C678DD;"> FUNCTION</span><span style="color:#ABB2BF;"> example</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="udf-queries" tabindex="-1"><a class="header-anchor" href="#udf-queries"><span>UDF Queries</span></a></h3><p>The usage of UDF is similar to that of built-in aggregation functions.</p><h4 id="basic-sql-syntax-support" tabindex="-1"><a class="header-anchor" href="#basic-sql-syntax-support"><span>Basic SQL syntax support</span></a></h4><ul><li>Support <code>SLIMIT</code> / <code>SOFFSET</code></li><li>Support <code>LIMIT</code> / <code>OFFSET</code></li><li>Support queries with time filters</li><li>Support queries with value filters</li></ul><h4 id="queries-with-in-select-clauses" tabindex="-1"><a class="header-anchor" href="#queries-with-in-select-clauses"><span>Queries with * in SELECT Clauses</span></a></h4><p>Assume that there are 2 time series (<code>root.sg.d1.s1</code> and <code>root.sg.d1.s2</code>) in the system.</p><ul><li><strong><code>SELECT example(*) from root.sg.d1</code></strong></li></ul><p>Then the result set will include the results of <code>example (root.sg.d1.s1)</code> and <code>example (root.sg.d1.s2)</code>.</p><ul><li><strong><code>SELECT example(s1, *) from root.sg.d1</code></strong></li></ul><p>Then the result set will include the results of <code>example(root.sg.d1.s1, root.sg.d1.s1)</code> and <code>example(root.sg.d1.s1, root.sg.d1.s2)</code>.</p><ul><li><strong><code>SELECT example(*, *) from root.sg.d1</code></strong></li></ul><p>Then the result set will include the results of <code>example(root.sg.d1.s1, root.sg.d1.s1)</code>, <code>example(root.sg.d1.s2, root.sg.d1.s1)</code>, <code>example(root.sg.d1.s1, root.sg.d1.s2)</code> and <code>example(root.sg.d1.s2, root.sg.d1.s2)</code>.</p><h4 id="queries-with-key-value-attributes-in-udf-parameters" tabindex="-1"><a class="header-anchor" href="#queries-with-key-value-attributes-in-udf-parameters"><span>Queries with Key-value Attributes in UDF Parameters</span></a></h4><p>You can pass any number of key-value pair parameters to the UDF when constructing a UDF query. The key and value in the key-value pair need to be enclosed in single or double quotes. Note that key-value pair parameters can only be passed in after all time series have been passed in. Here is a set of examples:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> example(s1, </span><span style="color:#98C379;">&#39;key1&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;value1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;key2&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;value2&#39;</span><span style="color:#ABB2BF;">), example(*, </span><span style="color:#98C379;">&#39;key3&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;value3&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1;</span></span>
<span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> example(s1, s2, </span><span style="color:#98C379;">&#39;key1&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;value1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;key2&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;value2&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nested-queries" tabindex="-1"><a class="header-anchor" href="#nested-queries"><span>Nested Queries</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> s1, s2, example(s1, s2) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1;</span></span>
<span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> *, example(*) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">DISABLE</span><span style="color:#ABB2BF;"> ALIGN;</span></span>
<span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> s1 * example(* / s1 + s2) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1;</span></span>
<span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> s1, s2, s1 + example(s1, s2), s1 - example(s1 + example(s1, s2) / s2) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="show-all-registered-udfs" tabindex="-1"><a class="header-anchor" href="#show-all-registered-udfs"><span>Show All Registered UDFs</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">SHOW FUNCTIONS</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="user-permission-management" tabindex="-1"><a class="header-anchor" href="#user-permission-management"><span>User Permission Management</span></a></h3><p>There are 3 types of user permissions related to UDF:</p><ul><li><code>CREATE_FUNCTION</code>: Only users with this permission are allowed to register UDFs</li><li><code>DROP_FUNCTION</code>: Only users with this permission are allowed to deregister UDFs</li><li><code>READ_TIMESERIES</code>: Only users with this permission are allowed to use UDFs for queries</li></ul>`,321)),t("p",null,[e[1]||(e[1]=s("For more user permissions related content, please refer to ")),l(n,{to:"/UserGuide/V1.2.x/User-Manual/Authority-Management.html"},{default:o(()=>e[0]||(e[0]=[s("Account Management Statements")])),_:1}),e[2]||(e[2]=s("."))]),e[7]||(e[7]=a('<h3 id="configurable-properties" tabindex="-1"><a class="header-anchor" href="#configurable-properties"><span>Configurable Properties</span></a></h3><p>You can use <code>udf_lib_dir</code> to config udf lib directory.<br> When querying by a UDF, IoTDB may prompt that there is insufficient memory. You can resolve the issue by configuring <code>udf_initial_byte_array_length_for_memory_control</code>, <code>udf_memory_budget_in_mb</code> and <code>udf_reader_transformer_collector_memory_proportion</code> in <code>iotdb-datanode.properties</code> and restarting the server.</p><h3 id="contribute-udf" tabindex="-1"><a class="header-anchor" href="#contribute-udf"><span>Contribute UDF</span></a></h3><p>This part mainly introduces how external users can contribute their own UDFs to the IoTDB community.</p><h4 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h4><ol><li><p>UDFs must be universal.</p><p>The &quot;universal&quot; mentioned here refers to: UDFs can be widely used in some scenarios. In other words, the UDF function must have reuse value and may be directly used by other users in the community.</p><p>If you are not sure whether the UDF you want to contribute is universal, you can send an email to <code>dev@iotdb.apache.org</code> or create an issue to initiate a discussion.</p></li><li><p>The UDF you are going to contribute has been well tested and can run normally in the production environment.</p></li></ol><h4 id="what-you-need-to-prepare" tabindex="-1"><a class="header-anchor" href="#what-you-need-to-prepare"><span>What you need to prepare</span></a></h4><ol><li>UDF source code</li><li>Test cases</li><li>Instructions</li></ol><h5 id="udf-source-code" tabindex="-1"><a class="header-anchor" href="#udf-source-code"><span>UDF Source Code</span></a></h5><ol><li>Create the UDF main class and related classes in <code>iotdb-core/node-commons/src/main/java/org/apache/iotdb/commons/udf/builtin</code> or in its subfolders.</li><li>Register your UDF in <code>iotdb-core/node-commons/src/main/java/org/apache/iotdb/commons/udf/builtin/BuiltinTimeSeriesGeneratingFunction.java</code>.</li></ol><h5 id="test-cases" tabindex="-1"><a class="header-anchor" href="#test-cases"><span>Test Cases</span></a></h5><p>At a minimum, you need to write integration tests for the UDF.</p><p>You can add a test class in <code>integration-test/src/test/java/org/apache/iotdb/db/it/udf</code>.</p><h5 id="instructions" tabindex="-1"><a class="header-anchor" href="#instructions"><span>Instructions</span></a></h5><p>The instructions need to include: the name and the function of the UDF, the attribute parameters that must be provided when the UDF is executed, the applicable scenarios, and the usage examples, etc.</p><p>The instructions should be added in <code>docs/UserGuide/Operation Manual/DML Data Manipulation Language.md</code>.</p><h4 id="submit-a-pr" tabindex="-1"><a class="header-anchor" href="#submit-a-pr"><span>Submit a PR</span></a></h4><p>When you have prepared the UDF source code, test cases, and instructions, you are ready to submit a Pull Request (PR) on <a href="https://github.com/apache/iotdb" target="_blank" rel="noopener noreferrer">Github</a>. You can refer to our code contribution guide to submit a PR: <a href="https://iotdb.apache.org/Community/Development-Guide.html" target="_blank" rel="noopener noreferrer">Development Guide</a>.</p><h3 id="known-implementations" tabindex="-1"><a class="header-anchor" href="#known-implementations"><span>Known Implementations</span></a></h3><h4 id="built-in-udf" tabindex="-1"><a class="header-anchor" href="#built-in-udf"><span>Built-in UDF</span></a></h4>',20)),t("p",null,[e[4]||(e[4]=s("See ")),l(n,{to:"/UserGuide/V1.2.x/User-Manual/Operator-and-Expression.html#OPERATORS"},{default:o(()=>e[3]||(e[3]=[s("Built-in Functions")])),_:1}),e[5]||(e[5]=a("，containing the following function types:<br> Aggregate Functions<br> Mathematical<br> Comparison<br> String<br> Conversion<br> Constant<br> Selection<br> Continuous-Interval<br> Variation-Trend<br> Sample<br> Time-Series",23))]),e[8]||(e[8]=a('<h4 id="data-quality-function-library" tabindex="-1"><a class="header-anchor" href="#data-quality-function-library"><span>Data Quality Function Library</span></a></h4><h5 id="about" tabindex="-1"><a class="header-anchor" href="#about"><span>About</span></a></h5><p>For applications based on time series data, data quality is vital. <strong>UDF Library</strong> is IoTDB User Defined Functions (UDF) about data quality, including data profiling, data quality evalution and data repairing. It effectively meets the demand for data quality in the industrial field.</p><h5 id="quick-start" tabindex="-1"><a class="header-anchor" href="#quick-start"><span>Quick Start</span></a></h5><p>The functions in this function library are not built-in functions, and must be loaded into the system before use.</p><ol><li><a href="https://archive.apache.org/dist/iotdb/1.0.1/apache-iotdb-1.0.1-library-udf-bin.zip" target="_blank" rel="noopener noreferrer">Download</a> the JAR with all dependencies and the script of registering UDF.</li><li>Copy the JAR package to <code>ext\\udf</code> under the directory of IoTDB system (Please put JAR to this directory of all DataNodes if you use Cluster).</li><li>Run <code>sbin\\start-server.bat</code> (for Windows) or <code>sbin\\start-server.sh</code> (for Linux or MacOS) to start IoTDB server.</li><li>Copy the script to the directory of IoTDB system (under the root directory, at the same level as <code>sbin</code>), modify the parameters in the script if needed and run it to register UDF.</li></ol><h5 id="implemented-functions" tabindex="-1"><a class="header-anchor" href="#implemented-functions"><span>Implemented Functions</span></a></h5><h3 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a"><span>Q&amp;A</span></a></h3><p>Q1: How to modify the registered UDF?</p><p>A1: Assume that the name of the UDF is <code>example</code> and the full class name is <code>org.apache.iotdb.udf.ExampleUDTF</code>, which is introduced by <code>example.jar</code>.</p><ol><li>Unload the registered function by executing <code>DROP FUNCTION example</code>.</li><li>Delete <code>example.jar</code> under <code>iotdb-server-1.0.0-all-bin/ext/udf</code>.</li><li>Modify the logic in <code>org.apache.iotdb.udf.ExampleUDTF</code> and repackage it. The name of the JAR package can still be <code>example.jar</code>.</li><li>Upload the new JAR package to <code>iotdb-server-1.0.0-all-bin/ext/udf</code>.</li><li>Load the new UDF by executing <code>CREATE FUNCTION example AS &quot;org.apache.iotdb.udf.ExampleUDTF&quot;</code>.</li></ol>',11))])}const m=i(d,[["render",u],["__file","Database-Programming.html.vue"]]),B=JSON.parse('{"path":"/UserGuide/V1.2.x/User-Manual/Database-Programming.html","title":"Database Programming","lang":"en-US","frontmatter":{"description":"Database Programming TRIGGER 1. Instructions The trigger provides a mechanism for listening to changes in time series data. With user-defined logic, tasks such as alerting and d...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://iotdb.apache.org/zh/UserGuide/V1.2.x/User-Manual/Database-Programming.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/UserGuide/V1.2.x/User-Manual/Database-Programming.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"Database Programming"}],["meta",{"property":"og:description","content":"Database Programming TRIGGER 1. Instructions The trigger provides a mechanism for listening to changes in time series data. With user-defined logic, tasks such as alerting and d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://alioss.timecho.com/docs/img/UserGuide/Process-Data/Continuous-Query/pic1.png?raw=true"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-16T09:28:53.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-16T09:28:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Database Programming\\",\\"image\\":[\\"https://alioss.timecho.com/docs/img/UserGuide/Process-Data/Continuous-Query/pic1.png?raw=true\\",\\"https://alioss.timecho.com/docs/img/UserGuide/Process-Data/Continuous-Query/pic2.png?raw=true\\",\\"https://alioss.timecho.com/docs/img/UserGuide/Process-Data/Continuous-Query/pic3.png?raw=true\\",\\"https://alioss.timecho.com/docs/img/UserGuide/Process-Data/Continuous-Query/pic4.png?raw=true\\"],\\"dateModified\\":\\"2024-12-16T09:28:53.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"TRIGGER","slug":"trigger","link":"#trigger","children":[{"level":3,"title":"1. Instructions","slug":"_1-instructions","link":"#_1-instructions","children":[]},{"level":3,"title":"2. How to Implement a Trigger","slug":"_2-how-to-implement-a-trigger","link":"#_2-how-to-implement-a-trigger","children":[]},{"level":3,"title":"3. Trigger Management","slug":"_3-trigger-management","link":"#_3-trigger-management","children":[]},{"level":3,"title":"4. Notes","slug":"_4-notes","link":"#_4-notes","children":[]},{"level":3,"title":"5. Configuration Parameters","slug":"_5-configuration-parameters","link":"#_5-configuration-parameters","children":[]}]},{"level":2,"title":"CONTINUOUS QUERY (CQ)","slug":"continuous-query-cq","link":"#continuous-query-cq","children":[{"level":3,"title":"1. Introduction","slug":"_1-introduction","link":"#_1-introduction","children":[]},{"level":3,"title":"2. Syntax","slug":"_2-syntax","link":"#_2-syntax","children":[]},{"level":3,"title":"3. Examples of CQ","slug":"_3-examples-of-cq","link":"#_3-examples-of-cq","children":[]},{"level":3,"title":"4. CQ Management","slug":"_4-cq-management","link":"#_4-cq-management","children":[]},{"level":3,"title":"5. CQ Use Cases","slug":"_5-cq-use-cases","link":"#_5-cq-use-cases","children":[]},{"level":3,"title":"6. System Parameter Configuration","slug":"_6-system-parameter-configuration","link":"#_6-system-parameter-configuration","children":[]}]},{"level":2,"title":"USER-DEFINED FUNCTION (UDF)","slug":"user-defined-function-udf","link":"#user-defined-function-udf","children":[{"level":3,"title":"UDF Types","slug":"udf-types","link":"#udf-types","children":[]},{"level":3,"title":"UDF Development Dependencies","slug":"udf-development-dependencies","link":"#udf-development-dependencies","children":[]},{"level":3,"title":"UDTF（User Defined Timeseries Generating Function）","slug":"udtf-user-defined-timeseries-generating-function","link":"#udtf-user-defined-timeseries-generating-function","children":[]},{"level":3,"title":"Maven Project Example","slug":"maven-project-example","link":"#maven-project-example","children":[]},{"level":3,"title":"UDF Registration","slug":"udf-registration","link":"#udf-registration","children":[]},{"level":3,"title":"UDF Deregistration","slug":"udf-deregistration","link":"#udf-deregistration","children":[]},{"level":3,"title":"UDF Queries","slug":"udf-queries","link":"#udf-queries","children":[]},{"level":3,"title":"Show All Registered UDFs","slug":"show-all-registered-udfs","link":"#show-all-registered-udfs","children":[]},{"level":3,"title":"User Permission Management","slug":"user-permission-management","link":"#user-permission-management","children":[]},{"level":3,"title":"Configurable Properties","slug":"configurable-properties","link":"#configurable-properties","children":[]},{"level":3,"title":"Contribute UDF","slug":"contribute-udf","link":"#contribute-udf","children":[]},{"level":3,"title":"Known Implementations","slug":"known-implementations","link":"#known-implementations","children":[]},{"level":3,"title":"Q&A","slug":"q-a","link":"#q-a","children":[]}]}],"git":{"createdTime":1690869728000,"updatedTime":1734341333000,"contributors":[{"name":"W1y1r","username":"W1y1r","email":"150988475+W1y1r@users.noreply.github.com","commits":1,"url":"https://github.com/W1y1r"},{"name":"majialin","username":"majialin","email":"107627937+mal117@users.noreply.github.com","commits":2,"url":"https://github.com/majialin"},{"name":"wanghui42","username":"wanghui42","email":"105700158+wanghui42@users.noreply.github.com","commits":2,"url":"https://github.com/wanghui42"},{"name":"Lei","username":"Lei","email":"33376433+LeiRui@users.noreply.github.com","commits":1,"url":"https://github.com/Lei"}]},"readingTime":{"minutes":39.78,"words":11933},"filePathRelative":"UserGuide/V1.2.x/User-Manual/Database-Programming.md","localizedDate":"August 1, 2023","autoDesc":true}');export{m as comp,B as data};
