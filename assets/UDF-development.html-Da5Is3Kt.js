import{_ as a,c as n,b as l,o as e}from"./app-BrzuM4xY.js";const o={};function t(p,s){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="udf-开发" tabindex="-1"><a class="header-anchor" href="#udf-开发"><span>UDF 开发</span></a></h1><h2 id="_1-udf-开发" tabindex="-1"><a class="header-anchor" href="#_1-udf-开发"><span>1. UDF 开发</span></a></h2><h3 id="_1-1-udf-依赖" tabindex="-1"><a class="header-anchor" href="#_1-1-udf-依赖"><span>1.1 UDF 依赖</span></a></h3><p>如果您使用 <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven</a> ，可以从 <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven 库</a> 中搜索下面示例中的依赖。请注意选择和目标 IoTDB 服务器版本相同的依赖版本。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;org.apache.iotdb&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;udf-api&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;1.0.0&lt;/</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;provided&lt;/</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-udtf-user-defined-timeseries-generating-function" tabindex="-1"><a class="header-anchor" href="#_1-2-udtf-user-defined-timeseries-generating-function"><span>1.2 UDTF（User Defined Timeseries Generating Function）</span></a></h3><p>编写一个 UDTF 需要继承<code>org.apache.iotdb.udf.api.UDTF</code>类，并至少实现<code>beforeStart</code>方法和一种<code>transform</code>方法。</p><h4 id="接口说明" tabindex="-1"><a class="header-anchor" href="#接口说明"><span>接口说明:</span></a></h4><table><thead><tr><th style="text-align:left;">接口定义</th><th style="text-align:left;">描述</th><th>是否必须</th></tr></thead><tbody><tr><td style="text-align:left;">void validate(UDFParameterValidator validator) throws Exception</td><td style="text-align:left;">在初始化方法<code>beforeStart</code>调用前执行，用于检测<code>UDFParameters</code>中用户输入的参数是否合法。</td><td>否</td></tr><tr><td style="text-align:left;">void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception</td><td style="text-align:left;">初始化方法，在 UDTF 处理输入数据前，调用用户自定义的初始化行为。用户每执行一次 UDTF 查询，框架就会构造一个新的 UDF 类实例，该方法在每个 UDF 类实例被初始化时调用一次。在每一个 UDF 类实例的生命周期内，该方法只会被调用一次。</td><td>是</td></tr><tr><td style="text-align:left;">Object transform(Row row) throws Exception\`</td><td style="text-align:left;">这个方法由框架调用。当您在<code>beforeStart</code>中选择以<code>MappableRowByRowAccessStrategy</code>的策略消费原始数据时，可以选用该方法进行数据处理。输入参数以<code>Row</code>的形式传入，输出结果通过返回值<code>Object</code>输出。</td><td>所有<code>transform</code>方法四选一</td></tr><tr><td style="text-align:left;">void transform(Column[] columns, ColumnBuilder builder) throws Exception</td><td style="text-align:left;">这个方法由框架调用。当您在<code>beforeStart</code>中选择以<code>MappableRowByRowAccessStrategy</code>的策略消费原始数据时，可以选用该方法进行数据处理。输入参数以<code>Column[]</code>的形式传入，输出结果通过<code>ColumnBuilder</code>输出。您需要在该方法内自行调用<code>builder</code>提供的数据收集方法，以决定最终的输出数据。</td><td>所有<code>transform</code>方法四选一</td></tr><tr><td style="text-align:left;">void transform(Row row, PointCollector collector) throws Exception</td><td style="text-align:left;">这个方法由框架调用。当您在<code>beforeStart</code>中选择以<code>RowByRowAccessStrategy</code>的策略消费原始数据时，这个数据处理方法就会被调用。输入参数以<code>Row</code>的形式传入，输出结果通过<code>PointCollector</code>输出。您需要在该方法内自行调用<code>collector</code>提供的数据收集方法，以决定最终的输出数据。</td><td>所有<code>transform</code>方法四选一</td></tr><tr><td style="text-align:left;">void transform(RowWindow rowWindow, PointCollector collector) throws Exception</td><td style="text-align:left;">这个方法由框架调用。当您在<code>beforeStart</code>中选择以<code>SlidingSizeWindowAccessStrategy</code>或者<code>SlidingTimeWindowAccessStrategy</code>的策略消费原始数据时，这个数据处理方法就会被调用。输入参数以<code>RowWindow</code>的形式传入，输出结果通过<code>PointCollector</code>输出。您需要在该方法内自行调用<code>collector</code>提供的数据收集方法，以决定最终的输出数据。</td><td>所有<code>transform</code>方法四选一</td></tr><tr><td style="text-align:left;">void terminate(PointCollector collector) throws Exception</td><td style="text-align:left;">这个方法由框架调用。该方法会在所有的<code>transform</code>调用执行完成后，在<code>beforeDestory</code>方法执行前被调用。在一个 UDF 查询过程中，该方法会且只会调用一次。您需要在该方法内自行调用<code>collector</code>提供的数据收集方法，以决定最终的输出数据。</td><td>否</td></tr><tr><td style="text-align:left;">void beforeDestroy()</td><td style="text-align:left;">UDTF 的结束方法。此方法由框架调用，并且只会被调用一次，即在处理完最后一条记录之后被调用。</td><td>否</td></tr></tbody></table><p>在一个完整的 UDTF 实例生命周期中，各个方法的调用顺序如下：</p><ol><li>void validate(UDFParameterValidator validator) throws Exception</li><li>void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception</li><li>Object transform(Row row) throws Exception 或着 void transform(Column[] columns, ColumnBuilder builder) throws Exception 或者 void transform(Row row, PointCollector collector) throws Exception 或者 void transform(RowWindow rowWindow, PointCollector collector) throws Exception</li><li>void terminate(PointCollector collector) throws Exception</li><li>void beforeDestroy()</li></ol><blockquote><p>注意，框架每执行一次 UDTF 查询，都会构造一个全新的 UDF 类实例，查询结束时，对应的 UDF 类实例即被销毁，因此不同 UDTF 查询（即使是在同一个 SQL 语句中）UDF 类实例内部的数据都是隔离的。您可以放心地在 UDTF 中维护一些状态数据，无需考虑并发对 UDF 类实例内部状态数据的影响。</p></blockquote><h4 id="接口详细介绍" tabindex="-1"><a class="header-anchor" href="#接口详细介绍"><span>接口详细介绍：</span></a></h4><ol><li><strong>void validate(UDFParameterValidator validator) throws Exception</strong></li></ol><p><code>validate</code>方法能够对用户输入的参数进行验证。</p><p>您可以在该方法中限制输入序列的数量和类型，检查用户输入的属性或者进行自定义逻辑的验证。</p><p><code>UDFParameterValidator</code>的使用方法请见 Javadoc。</p><ol start="2"><li><strong>void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception</strong></li></ol><p><code>beforeStart</code>方法有两个作用：</p><ol><li>帮助用户解析 SQL 语句中的 UDF 参数</li><li>配置 UDF 运行时必要的信息，即指定 UDF 访问原始数据时采取的策略和输出结果序列的类型</li><li>创建资源，比如建立外部链接，打开文件等</li></ol><p>2.1 <strong>UDFParameters</strong></p><p><code>UDFParameters</code>的作用是解析 SQL 语句中的 UDF 参数（SQL 中 UDF 函数名称后括号中的部分）。参数包括序列类型参数和字符串 key-value 对形式输入的属性参数。</p><p>示例：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> UDF(s1, s2, </span><span style="color:#98C379;">&#39;key1&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;iotdb&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;key2&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;123.45&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>用法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;"> parameters</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> UDTFConfigurations</span><span style="color:#E06C75;"> configurations) throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B;">  String</span><span style="color:#E06C75;"> stringValue </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key1&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // iotdb</span></span>
<span class="line"><span style="color:#E5C07B;">  Float</span><span style="color:#E06C75;"> floatValue </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFloat</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key2&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 123.45</span></span>
<span class="line"><span style="color:#E5C07B;">  Double</span><span style="color:#E06C75;"> doubleValue </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDouble</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key3&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // null</span></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#E06C75;"> intValue </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getIntOrDefault</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key4&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">678</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 678</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // do something</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // configurations</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2 <strong>UDTFConfigurations</strong></p><p>您必须使用 <code>UDTFConfigurations</code> 指定 UDF 访问原始数据时采取的策略和输出结果序列的类型。</p><p>用法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;"> parameters</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> UDTFConfigurations</span><span style="color:#E06C75;"> configurations) throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // parameters</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // configurations</span></span>
<span class="line"><span style="color:#E06C75;">  configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RowByRowAccessStrategy</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT32</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>setAccessStrategy</code>方法用于设定 UDF 访问原始数据时采取的策略，<code>setOutputDataType</code>用于设定输出结果序列的类型。</p><p>2.2.1 <strong>setAccessStrategy</strong></p><p>注意，您在此处设定的原始数据访问策略决定了框架会调用哪一种<code>transform</code>方法 ，请实现与原始数据访问策略对应的<code>transform</code>方法。当然，您也可以根据<code>UDFParameters</code>解析出来的属性参数，动态决定设定哪一种策略，因此，实现两种<code>transform</code>方法也是被允许的。</p><p>下面是您可以设定的访问原始数据的策略：</p><table><thead><tr><th>接口定义</th><th>描述</th><th>调用的<code>transform</code>方法</th></tr></thead><tbody><tr><td>MappableRowByRowStrategy</td><td>自定义标量函数<br>框架会为每一行原始数据输入调用一次<code>transform</code>方法，输入 k 列时间序列 1 行数据，输出 1 列时间序列 1 行数据，可用于标量函数出现的任何子句和表达式中，如select子句、where子句等。</td><td>void transform(Column[] columns, ColumnBuilder builder) throws ExceptionObject transform(Row row) throws Exception</td></tr><tr><td>RowByRowAccessStrategy</td><td>自定义时间序列生成函数，逐行地处理原始数据。<br>框架会为每一行原始数据输入调用一次<code>transform</code>方法，输入 k 列时间序列 1 行数据，输出 1 列时间序列 n 行数据。<br> 当输入一个序列时，该行就作为输入序列的一个数据点。<br> 当输入多个序列时，输入序列按时间对齐后，每一行作为的输入序列的一个数据点。<br>（一行数据中，可能存在某一列为<code>null</code>值，但不会全部都是<code>null</code>）</td><td>void transform(Row row, PointCollector collector) throws Exception</td></tr><tr><td>SlidingTimeWindowAccessStrategy</td><td>自定义时间序列生成函数，以滑动时间窗口的方式处理原始数据。<br>框架会为每一个原始数据输入窗口调用一次<code>transform</code>方法，输入 k 列时间序列 m 行数据，输出 1 列时间序列 n 行数据。<br>一个窗口可能存在多行数据，输入序列按时间对齐后，每个窗口作为的输入序列的一个数据点。 <br>（每个窗口可能存在 i 行，每行数据可能存在某一列为<code>null</code>值，但不会全部都是<code>null</code>）</td><td>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</td></tr><tr><td>SlidingSizeWindowAccessStrategy</td><td>自定义时间序列生成函数，以固定行数的方式处理原始数据，即每个数据处理窗口都会包含固定行数的数据（最后一个窗口除外）。<br>框架会为每一个原始数据输入窗口调用一次<code>transform</code>方法，输入 k 列时间序列 m 行数据，输出 1 列时间序列 n 行数据。<br>一个窗口可能存在多行数据，输入序列按时间对齐后，每个窗口作为的输入序列的一个数据点。 <br>（每个窗口可能存在 i 行，每行数据可能存在某一列为<code>null</code>值，但不会全部都是<code>null</code>）</td><td>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</td></tr><tr><td>SessionTimeWindowAccessStrategy</td><td>自定义时间序列生成函数，以会话窗口的方式处理原始数据。<br>框架会为每一个原始数据输入窗口调用一次<code>transform</code>方法，输入 k 列时间序列 m 行数据，输出 1 列时间序列 n 行数据。<br>一个窗口可能存在多行数据，输入序列按时间对齐后，每个窗口作为的输入序列的一个数据点。<br> （每个窗口可能存在 i 行，每行数据可能存在某一列为<code>null</code>值，但不会全部都是<code>null</code>）</td><td>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</td></tr><tr><td>StateWindowAccessStrategy</td><td>自定义时间序列生成函数，以状态窗口的方式处理原始数据。<br>框架会为每一个原始数据输入窗口调用一次<code>transform</code>方法，输入 1 列时间序列 m 行数据，输出 1 列时间序列 n 行数据。<br>一个窗口可能存在多行数据，目前仅支持对一个物理量也就是一列数据进行开窗。</td><td>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</td></tr></tbody></table><h4 id="接口详情" tabindex="-1"><a class="header-anchor" href="#接口详情"><span>接口详情：</span></a></h4><ul><li><p><code>MappableRowByRowStrategy</code> 和 <code>RowByRowAccessStrategy</code>的构造不需要任何参数。</p></li><li><p><code>SlidingTimeWindowAccessStrategy</code></p></li></ul><p>开窗示意图:</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/UDF-User-Defined-Function/timeWindow.png"><p><code>SlidingTimeWindowAccessStrategy</code>有多种构造方法，您可以向构造方法提供 3 类参数：</p><ol><li>时间轴显示时间窗开始和结束时间</li></ol><p>时间轴显示时间窗开始和结束时间不是必须要提供的。当您不提供这类参数时，时间轴显示时间窗开始时间会被定义为整个查询结果集中最小的时间戳，时间轴显示时间窗结束时间会被定义为整个查询结果集中最大的时间戳。</p><ol start="2"><li>划分时间轴的时间间隔参数（必须为正数）</li><li>滑动步长（不要求大于等于时间间隔，但是必须为正数）</li></ol><p>滑动步长参数也不是必须的。当您不提供滑动步长参数时，滑动步长会被设定为划分时间轴的时间间隔。</p><p>3 类参数的关系可见下图。策略的构造方法详见 Javadoc。</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/github/99787878-47b51480-2b5b-11eb-8ed3-84088c5c30f7.png"><blockquote><p>注意，最后的一些时间窗口的实际时间间隔可能小于规定的时间间隔参数。另外，可能存在某些时间窗口内数据行数量为 0 的情况，这种情况框架也会为该窗口调用一次<code>transform</code>方法。</p></blockquote><ul><li><code>SlidingSizeWindowAccessStrategy</code></li></ul><p>开窗示意图:</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/UDF-User-Defined-Function/countWindow.png"><p><code>SlidingSizeWindowAccessStrategy</code>有多种构造方法，您可以向构造方法提供 2 个参数：</p><ol><li>窗口大小，即一个数据处理窗口包含的数据行数。注意，最后一些窗口的数据行数可能少于规定的数据行数。</li><li>滑动步长，即下一窗口第一个数据行与当前窗口第一个数据行间的数据行数（不要求大于等于窗口大小，但是必须为正数）</li></ol><p>滑动步长参数不是必须的。当您不提供滑动步长参数时，滑动步长会被设定为窗口大小。</p><ul><li><code>SessionTimeWindowAccessStrategy</code></li></ul><p>开窗示意图：<strong>时间间隔小于等于给定的最小时间间隔 sessionGap 则分为一组。</strong></p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/UDF-User-Defined-Function/sessionWindow.png"><p><code>SessionTimeWindowAccessStrategy</code>有多种构造方法，您可以向构造方法提供 2 类参数：</p><ol><li>时间轴显示时间窗开始和结束时间。</li><li>会话窗口之间的最小时间间隔。</li></ol><ul><li><code>StateWindowAccessStrategy</code></li></ul><p>开窗示意图：<strong>对于数值型数据，状态差值小于等于给定的阈值 delta 则分为一组。</strong></p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/UDF-User-Defined-Function/stateWindow.png"><p><code>StateWindowAccessStrategy</code>有四种构造方法：</p><ol><li>针对数值型数据，可以提供时间轴显示时间窗开始和结束时间以及对于单个窗口内部允许变化的阈值delta。</li><li>针对文本数据以及布尔数据，可以提供时间轴显示时间窗开始和结束时间。对于这两种数据类型，单个窗口内的数据是相同的，不需要提供变化阈值。</li><li>针对数值型数据，可以只提供单个窗口内部允许变化的阈值delta，时间轴显示时间窗开始时间会被定义为整个查询结果集中最小的时间戳，时间轴显示时间窗结束时间会被定义为整个查询结果集中最大的时间戳。</li><li>针对文本数据以及布尔数据，可以不提供任何参数，开始与结束时间戳见3中解释。</li></ol><p>StateWindowAccessStrategy 目前只能接收一列输入。策略的构造方法详见 Javadoc。</p><p>2.2.2 <strong>setOutputDataType</strong></p><p>注意，您在此处设定的输出结果序列的类型，决定了<code>transform</code>方法中<code>PointCollector</code>实际能够接收的数据类型。<code>setOutputDataType</code>中设定的输出类型和<code>PointCollector</code>实际能够接收的数据输出类型关系如下：</p><table><thead><tr><th style="text-align:left;"><code>setOutputDataType</code>中设定的输出类型</th><th style="text-align:left;"><code>PointCollector</code>实际能够接收的输出类型</th></tr></thead><tbody><tr><td style="text-align:left;">INT32</td><td style="text-align:left;">int</td></tr><tr><td style="text-align:left;">INT64</td><td style="text-align:left;">long</td></tr><tr><td style="text-align:left;">FLOAT</td><td style="text-align:left;">float</td></tr><tr><td style="text-align:left;">DOUBLE</td><td style="text-align:left;">double</td></tr><tr><td style="text-align:left;">BOOLEAN</td><td style="text-align:left;">boolean</td></tr><tr><td style="text-align:left;">TEXT</td><td style="text-align:left;">java.lang.String 和 org.apache.iotdb.udf.api.type.Binary</td></tr></tbody></table><p>UDTF 输出序列的类型是运行时决定的。您可以根据输入序列类型动态决定输出序列类型。</p><p>示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;"> parameters</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> UDTFConfigurations</span><span style="color:#E06C75;"> configurations) throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // do something</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">  configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RowByRowAccessStrategy</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Object transform(Row row) throws Exception</strong></li></ol><p>当您在<code>beforeStart</code>方法中指定 UDF 读取原始数据的策略为 <code>MappableRowByRowAccessStrategy</code>，您就需要该方法和下面的<code>void transform(Column[] columns, ColumnBuilder builder) throws Exception</code> 二选一来实现，在该方法中增加对原始数据处理的逻辑。</p><p>该方法每次处理原始数据的一行。原始数据由<code>Row</code>读入，由返回值输出。您必须在一次<code>transform</code>方法调用中，根据每个输入的数据点输出一个对应的数据点，即输入和输出依然是一对一的。需要注意的是，输出数据点的类型必须与您在<code>beforeStart</code>方法中设置的一致，而输出数据点的时间戳必须是严格单调递增的。</p><p>下面是一个实现了<code>Object transform(Row row) throws Exception</code>方法的完整 UDF 示例。它是一个加法器，接收两列时间序列输入，输出这两个数据点的代数和。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.UDTF</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.access.Row</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.config.UDTFConfigurations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameterValidator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.strategy.MappableRowByRowAccessStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.type.Type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Adder</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> UDTF</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> Type</span><span style="color:#E06C75;"> dataType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameterValidator</span><span style="color:#E06C75;font-style:italic;"> validator</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    validator</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">validateInputSeriesNumber</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">validateInputSeriesDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT64</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">validateInputSeriesDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT64</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;font-style:italic;"> parameters</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">UDTFConfigurations</span><span style="color:#E06C75;font-style:italic;"> configurations</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    dataType </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> MappableRowByRowAccessStrategy</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(dataType);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Row</span><span style="color:#E06C75;font-style:italic;"> row</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>void transform(Column[] columns, ColumnBuilder builder) throws Exception</strong></li></ol><p>当您在<code>beforeStart</code>方法中指定 UDF 读取原始数据的策略为 <code>MappableRowByRowAccessStrategy</code>，您就需要实现该方法，在该方法中增加对原始数据处理的逻辑。</p><p>该方法每次处理原始数据的多行，经过性能测试，我们发现一次性处理多行的 UDTF 比一次处理一行的 UDTF 性能更好。原始数据由<code>Column[]</code>读入，由<code>ColumnBuilder</code>输出。您必须在一次<code>transform</code>方法调用中，根据每个输入的数据点输出一个对应的数据点，即输入和输出依然是一对一的。需要注意的是，输出数据点的类型必须与您在<code>beforeStart</code>方法中设置的一致，而输出数据点的时间戳必须是严格单调递增的。</p><p>下面是一个实现了<code>void transform(Column[] columns, ColumnBuilder builder) throws Exceptionn</code>方法的完整 UDF 示例。它是一个加法器，接收两列时间序列输入，输出这两个数据点的代数和。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.read.common.block.column.Column</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.read.common.block.column.ColumnBuilder</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.UDTF</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.config.UDTFConfigurations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameterValidator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.strategy.MappableRowByRowAccessStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.type.Type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Adder</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> UDTF</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> Type</span><span style="color:#E06C75;"> type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameterValidator</span><span style="color:#E06C75;font-style:italic;"> validator</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    validator</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">validateInputSeriesNumber</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">validateInputSeriesDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT64</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">validateInputSeriesDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT64</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;font-style:italic;"> parameters</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">UDTFConfigurations</span><span style="color:#E06C75;font-style:italic;"> configurations</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    type </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    configurations</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> MappableRowByRowAccessStrategy</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(type);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Column</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">columns</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ColumnBuilder</span><span style="color:#E06C75;font-style:italic;"> builder</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">inputs1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> columns[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getLongs</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">inputs2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> columns[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getLongs</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> columns[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getPositionCount</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> count; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">      builder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLong</span><span style="color:#ABB2BF;">(inputs1[i] </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> inputs2[i]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>void transform(Row row, PointCollector collector) throws Exception</strong></li></ol><p>当您在<code>beforeStart</code>方法中指定 UDF 读取原始数据的策略为 <code>RowByRowAccessStrategy</code>，您就需要实现该方法，在该方法中增加对原始数据处理的逻辑。</p><p>该方法每次处理原始数据的一行。原始数据由<code>Row</code>读入，由<code>PointCollector</code>输出。您可以选择在一次<code>transform</code>方法调用中输出任意数量的数据点。需要注意的是，输出数据点的类型必须与您在<code>beforeStart</code>方法中设置的一致，而输出数据点的时间戳必须是严格单调递增的。</p><p>下面是一个实现了<code>void transform(Row row, PointCollector collector) throws Exception</code>方法的完整 UDF 示例。它是一个加法器，接收两列时间序列输入，当这两个数据点都不为<code>null</code>时，输出这两个数据点的代数和。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.UDTF</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.access.Row</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.collector.PointCollector</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.config.UDTFConfigurations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.strategy.RowByRowAccessStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.type.Type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Adder</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> UDTF</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;font-style:italic;"> parameters</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">UDTFConfigurations</span><span style="color:#E06C75;font-style:italic;"> configurations</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT64</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RowByRowAccessStrategy</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Row</span><span style="color:#E06C75;font-style:italic;"> row</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PointCollector</span><span style="color:#E06C75;font-style:italic;"> collector</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNull</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNull</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putLong</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><strong>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</strong></li></ol><p>当您在<code>beforeStart</code>方法中指定 UDF 读取原始数据的策略为 <code>SlidingTimeWindowAccessStrategy</code>或者<code>SlidingSizeWindowAccessStrategy</code>时，您就需要实现该方法，在该方法中增加对原始数据处理的逻辑。</p><p>该方法每次处理固定行数或者固定时间间隔内的一批数据，我们称包含这一批数据的容器为窗口。原始数据由<code>RowWindow</code>读入，由<code>PointCollector</code>输出。<code>RowWindow</code>能够帮助您访问某一批次的<code>Row</code>，它提供了对这一批次的<code>Row</code>进行随机访问和迭代访问的接口。您可以选择在一次<code>transform</code>方法调用中输出任意数量的数据点，需要注意的是，输出数据点的类型必须与您在<code>beforeStart</code>方法中设置的一致，而输出数据点的时间戳必须是严格单调递增的。</p><p>下面是一个实现了<code>void transform(RowWindow rowWindow, PointCollector collector) throws Exception</code>方法的完整 UDF 示例。它是一个计数器，接收任意列数的时间序列输入，作用是统计并输出指定时间范围内每一个时间窗口中的数据行数。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.UDTF</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.access.RowWindow</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.collector.PointCollector</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.config.UDTFConfigurations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.strategy.SlidingTimeWindowAccessStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.type.Type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Counter</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> UDTF</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;font-style:italic;"> parameters</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">UDTFConfigurations</span><span style="color:#E06C75;font-style:italic;"> configurations</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT32</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> SlidingTimeWindowAccessStrategy</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">            parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;time_interval&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">            parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sliding_step&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">            parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;display_window_begin&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">            parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;display_window_end&quot;</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">RowWindow</span><span style="color:#E06C75;font-style:italic;"> rowWindow</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PointCollector</span><span style="color:#E06C75;font-style:italic;"> collector</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">rowWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">windowSize</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rowWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">windowStartTime</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">rowWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">windowSize</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li><strong>void terminate(PointCollector collector) throws Exception</strong></li></ol><p>在一些场景下，UDF 需要遍历完所有的原始数据后才能得到最后的输出结果。<code>terminate</code>接口为这类 UDF 提供了支持。</p><p>该方法会在所有的<code>transform</code>调用执行完成后，在<code>beforeDestory</code>方法执行前被调用。您可以选择使用<code>transform</code>方法进行单纯的数据处理，最后使用<code>terminate</code>将处理结果输出。</p><p>结果需要由<code>PointCollector</code>输出。您可以选择在一次<code>terminate</code>方法调用中输出任意数量的数据点。需要注意的是，输出数据点的类型必须与您在<code>beforeStart</code>方法中设置的一致，而输出数据点的时间戳必须是严格单调递增的。</p><p>下面是一个实现了<code>void terminate(PointCollector collector) throws Exception</code>方法的完整 UDF 示例。它接收一个<code>INT32</code>类型的时间序列输入，作用是输出该序列的最大值点。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.UDTF</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.access.Row</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.collector.PointCollector</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.config.UDTFConfigurations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.parameter.UDFParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.customizer.strategy.RowByRowAccessStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.udf.api.type.Type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Max</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> UDTF</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> Long</span><span style="color:#E06C75;"> time</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;font-style:italic;"> parameters</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">UDTFConfigurations</span><span style="color:#E06C75;font-style:italic;"> configurations</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TSDataType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT32</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">setAccessStrategy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RowByRowAccessStrategy</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Row</span><span style="color:#E06C75;font-style:italic;"> row</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PointCollector</span><span style="color:#E06C75;font-style:italic;"> collector</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNull</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> candidateValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (time </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> value </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> candidateValue) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      time </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> row</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">      value </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> candidateValue;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> terminate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">PointCollector</span><span style="color:#E06C75;font-style:italic;"> collector</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (time </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putInt</span><span style="color:#ABB2BF;">(time, value);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li><strong>void beforeDestroy()</strong></li></ol><p>UDTF 的结束方法，您可以在此方法中进行一些资源释放等的操作。</p><p>此方法由框架调用。对于一个 UDF 类实例而言，生命周期中会且只会被调用一次，即在处理完最后一条记录之后被调用。</p><h3 id="_1-3-udaf-user-defined-aggregation-function" tabindex="-1"><a class="header-anchor" href="#_1-3-udaf-user-defined-aggregation-function"><span>1.3 UDAF（User Defined Aggregation Function）</span></a></h3><p>一个完整的 UDAF 定义涉及到 State 和 UDAF 两个类。</p><h4 id="state-类" tabindex="-1"><a class="header-anchor" href="#state-类"><span>State 类</span></a></h4><p>编写一个 State 类需要实现<code>org.apache.iotdb.udf.api.State</code>接口，下表是需要实现的方法说明。</p><h4 id="接口说明-1" tabindex="-1"><a class="header-anchor" href="#接口说明-1"><span>接口说明:</span></a></h4><table><thead><tr><th>接口定义</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>void reset()</td><td>将 <code>State</code> 对象重置为初始的状态，您需要像编写构造函数一样，在该方法内填入 <code>State</code> 类中各个字段的初始值。</td><td>是</td></tr><tr><td>byte[] serialize()</td><td>将 <code>State</code> 序列化为二进制数据。该方法用于 IoTDB 内部的 <code>State</code> 对象传递，注意序列化的顺序必须和下面的反序列化方法一致。</td><td>是</td></tr><tr><td>void deserialize(byte[] bytes)</td><td>将二进制数据反序列化为 <code>State</code>。该方法用于 IoTDB 内部的 <code>State</code> 对象传递，注意反序列化的顺序必须和上面的序列化方法一致。</td><td>是</td></tr></tbody></table><h4 id="接口详细介绍-1" tabindex="-1"><a class="header-anchor" href="#接口详细介绍-1"><span>接口详细介绍:</span></a></h4><ol><li><strong>void reset()</strong></li></ol><p>该方法的作用是将 <code>State</code> 重置为初始的状态，您需要在该方法内填写 <code>State</code> 对象中各个字段的初始值。出于优化上的考量，IoTDB 在内部会尽可能地复用 <code>State</code>，而不是为每一个组创建一个新的 <code>State</code>，这样会引入不必要的开销。当 <code>State</code> 更新完一个组中的数据之后，就会调用这个方法重置为初始状态，以此来处理下一个组。</p><p>以求平均数（也就是 <code>avg</code>）的 <code>State</code> 为例，您需要数据的总和 <code>sum</code> 与数据的条数 <code>count</code>，并在 <code>reset()</code> 方法中将二者初始化为 0。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> AvgState</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> State</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  double</span><span style="color:#E06C75;"> sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  long</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reset</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    sum </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    count </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // other methods</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>byte[] serialize()/void deserialize(byte[] bytes)</strong></li></ol><p>该方法的作用是将 State 序列化为二进制数据，和从二进制数据中反序列化出 State。IoTDB 作为分布式数据库，涉及到在不同节点中传递数据，因此您需要编写这两个方法，来实现 State 在不同节点中的传递。注意序列化和反序列的顺序必须一致。</p><p>还是以求平均数（也就是求 avg）的 State 为例，您可以通过任意途径将 State 的内容转化为 <code>byte[]</code> 数组，以及从 <code>byte[]</code> 数组中读取出 State 的内容，下面展示的是用 Java8 引入的 <code>ByteBuffer</code> 进行序列化/反序列的代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;">[] </span><span style="color:#61AFEF;">serialize</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">  ByteBuffer</span><span style="color:#E06C75;"> buffer </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ByteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Double</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">BYTES</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Long</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">BYTES</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">  buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putDouble</span><span style="color:#ABB2BF;">(sum);</span></span>
<span class="line"><span style="color:#E5C07B;">  buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putLong</span><span style="color:#ABB2BF;">(count);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">array</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> deserialize</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;">[] bytes) {</span></span>
<span class="line"><span style="color:#E5C07B;">  ByteBuffer</span><span style="color:#E06C75;"> buffer </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ByteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wrap</span><span style="color:#ABB2BF;">(bytes);</span></span>
<span class="line"><span style="color:#E06C75;">  sum </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDouble</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">  count </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLong</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="udaf-类" tabindex="-1"><a class="header-anchor" href="#udaf-类"><span>UDAF 类</span></a></h4><p>编写一个 UDAF 类需要实现<code>org.apache.iotdb.udf.api.UDAF</code>接口，下表是需要实现的方法说明。</p><h4 id="接口说明-2" tabindex="-1"><a class="header-anchor" href="#接口说明-2"><span>接口说明:</span></a></h4><table><thead><tr><th>接口定义</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>void validate(UDFParameterValidator validator) throws Exception</td><td>在初始化方法<code>beforeStart</code>调用前执行，用于检测<code>UDFParameters</code>中用户输入的参数是否合法。该方法与 UDTF 的<code>validate</code>相同。</td><td>否</td></tr><tr><td>void beforeStart(UDFParameters parameters, UDAFConfigurations configurations) throws Exception</td><td>初始化方法，在 UDAF 处理输入数据前，调用用户自定义的初始化行为。与 UDTF 不同的是，这里的 configuration 是 <code>UDAFConfiguration</code> 类型。</td><td>是</td></tr><tr><td>State createState()</td><td>创建<code>State</code>对象，一般只需要调用默认构造函数，然后按需修改默认的初始值即可。</td><td>是</td></tr><tr><td>void addInput(State state, Column[] columns, BitMap bitMap)</td><td>根据传入的数据<code>Column[]</code>批量地更新<code>State</code>对象，注意最后一列，也就是 <code>columns[columns.length - 1]</code> 总是代表时间列。另外<code>BitMap</code>表示之前已经被过滤掉的数据，您在编写该方法时需要手动判断对应的数据是否被过滤掉。</td><td>是</td></tr><tr><td>void combineState(State state, State rhs)</td><td>将<code>rhs</code>状态合并至<code>state</code>状态中。在分布式场景下，同一组的数据可能分布在不同节点上，IoTDB 会为每个节点上的部分数据生成一个<code>State</code>对象，然后调用该方法合并成完整的<code>State</code>。</td><td>是</td></tr><tr><td>void outputFinal(State state, ResultValue resultValue)</td><td>根据<code>State</code>中的数据，计算出最终的聚合结果。注意根据聚合的语义，每一组只能输出一个值。</td><td>是</td></tr><tr><td>void beforeDestroy()</td><td>UDAF 的结束方法。此方法由框架调用，并且只会被调用一次，即在处理完最后一条记录之后被调用。</td><td>否</td></tr></tbody></table><p>在一个完整的 UDAF 实例生命周期中，各个方法的调用顺序如下：</p><ol><li>State createState()</li><li>void validate(UDFParameterValidator validator) throws Exception</li><li>void beforeStart(UDFParameters parameters, UDAFConfigurations configurations) throws Exception</li><li>void addInput(State state, Column[] columns, BitMap bitMap)</li><li>void combineState(State state, State rhs)</li><li>void outputFinal(State state, ResultValue resultValue)</li><li>void beforeDestroy()</li></ol><p>和 UDTF 类似，框架每执行一次 UDAF 查询，都会构造一个全新的 UDF 类实例，查询结束时，对应的 UDF 类实例即被销毁，因此不同 UDAF 查询（即使是在同一个 SQL 语句中）UDF 类实例内部的数据都是隔离的。您可以放心地在 UDAF 中维护一些状态数据，无需考虑并发对 UDF 类实例内部状态数据的影响。</p><h4 id="接口详细介绍-2" tabindex="-1"><a class="header-anchor" href="#接口详细介绍-2"><span>接口详细介绍:</span></a></h4><ol><li><strong>void validate(UDFParameterValidator validator) throws Exception</strong></li></ol><p>同 UDTF， <code>validate</code>方法能够对用户输入的参数进行验证。</p><p>您可以在该方法中限制输入序列的数量和类型，检查用户输入的属性或者进行自定义逻辑的验证。</p><ol start="2"><li><strong>void beforeStart(UDFParameters parameters, UDAFConfigurations configurations) throws Exception</strong></li></ol><p><code>beforeStart</code>方法的作用 UDAF 相同：</p><ol><li>帮助用户解析 SQL 语句中的 UDF 参数</li><li>配置 UDF 运行时必要的信息，即指定 UDF 访问原始数据时采取的策略和输出结果序列的类型</li><li>创建资源，比如建立外部链接，打开文件等。</li></ol><p>其中，<code>UDFParameters</code> 类型的作用可以参照上文。</p><p>2.2 <strong>UDTFConfigurations</strong></p><p>和 UDTF 的区别在于，UDAF 使用了 <code>UDAFConfigurations</code> 作为 <code>configuration</code> 对象的类型。</p><p>目前，该类仅支持设置输出数据的类型。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;"> parameters</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> UDAFConfigurations</span><span style="color:#E06C75;"> configurations) throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // parameters</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // configurations</span></span>
<span class="line"><span style="color:#E06C75;">  configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INT32</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>setOutputDataType</code> 中设定的输出类型和 <code>ResultValue</code> 实际能够接收的数据输出类型关系如下：</p><table><thead><tr><th style="text-align:left;"><code>setOutputDataType</code>中设定的输出类型</th><th style="text-align:left;"><code>ResultValue</code>实际能够接收的输出类型</th></tr></thead><tbody><tr><td style="text-align:left;">INT32</td><td style="text-align:left;">int</td></tr><tr><td style="text-align:left;">INT64</td><td style="text-align:left;">long</td></tr><tr><td style="text-align:left;">FLOAT</td><td style="text-align:left;">float</td></tr><tr><td style="text-align:left;">DOUBLE</td><td style="text-align:left;">double</td></tr><tr><td style="text-align:left;">BOOLEAN</td><td style="text-align:left;">boolean</td></tr><tr><td style="text-align:left;">TEXT</td><td style="text-align:left;">org.apache.iotdb.udf.api.type.Binary</td></tr></tbody></table><p>UDAF 输出序列的类型也是运行时决定的。您可以根据输入序列类型动态决定输出序列类型。</p><p>示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> beforeStart</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">UDFParameters</span><span style="color:#E06C75;"> parameters</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> UDAFConfigurations</span><span style="color:#E06C75;"> configurations) throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // do something</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">  configurations</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setOutputDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">parameters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDataType</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>State createState()</strong></li></ol><p>为 UDAF 创建并初始化 <code>State</code>。由于 Java 语言本身的限制，您只能调用 <code>State</code> 类的默认构造函数。默认构造函数会为类中所有的字段赋一个默认的初始值，如果该初始值并不符合您的要求，您需要在这个方法内进行手动的初始化。</p><p>下面是一个包含手动初始化的例子。假设您要实现一个累乘的聚合函数，<code>State</code> 的初始值应该设置为 1，但是默认构造函数会初始化为 0，因此您需要在调用默认构造函数之后，手动对 <code>State</code> 进行初始化：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> State</span><span style="color:#61AFEF;"> createState</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">  MultiplyState</span><span style="color:#E06C75;"> state </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MultiplyState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  state</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">result</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>void addInput(State state, Column[] columns, BitMap bitMap)</strong></li></ol><p>该方法的作用是，通过原始的输入数据来更新 <code>State</code> 对象。出于性能上的考量，也是为了和 IoTDB 向量化的查询引擎相对齐，原始的输入数据不再是一个数据点，而是列的数组 <code>Column[]</code>。注意最后一列（也就是 <code>columns[columns.length - 1]</code> ）总是时间列，因此您也可以在 UDAF 中根据时间进行不同的操作。</p><p>由于输入参数的类型不是一个数据点，而是多个列，您需要手动对列中的部分数据进行过滤处理，这就是第三个参数 <code>BitMap</code> 存在的意义。它用来标识这些列中哪些数据被过滤掉了，您在任何情况下都无需考虑被过滤掉的数据。</p><p>下面是一个用于统计数据条数（也就是 count）的 <code>addInput()</code> 示例。它展示了您应该如何使用 <code>BitMap</code> 来忽视那些已经被过滤掉的数据。注意还是由于 Java 语言本身的限制，您需要在方法的开头将接口中定义的 <code>State</code> 类型强制转化为自定义的 <code>State</code> 类型，不然后续无法正常使用该 <code>State</code> 对象。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> addInput</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">State</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Column</span><span style="color:#E06C75;">[] columns</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> BitMap</span><span style="color:#E06C75;"> bitMap) {</span></span>
<span class="line"><span style="color:#E5C07B;">  CountState</span><span style="color:#E06C75;"> countState </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (CountState) state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#E06C75;"> count </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> columns[</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;">]</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPositionCount</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (bitMap </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">bitMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isMarked</span><span style="color:#ABB2BF;">(i)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">columns[</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;">]</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNull</span><span style="color:#ABB2BF;">(i)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      countState</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>void combineState(State state, State rhs)</strong></li></ol><p>该方法的作用是合并两个 <code>State</code>，更加准确的说，是用第二个 <code>State</code> 对象来更新第一个 <code>State</code> 对象。IoTDB 是分布式数据库，同一组的数据可能分布在多个不同的节点上。出于性能考虑，IoTDB 会为每个节点上的部分数据先进行聚合成 <code>State</code>，然后再将不同节点上的、属于同一个组的 <code>State</code> 进行合并，这就是 <code>combineState</code> 的作用。</p><p>下面是一个用于求平均数（也就是 avg）的 <code>combineState()</code> 示例。和 <code>addInput</code> 类似，您都需要在开头对两个 <code>State</code> 进行强制类型转换。另外需要注意是用第二个 <code>State</code> 的内容来更新第一个 <code>State</code> 的值。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> combineState</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">State</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> State</span><span style="color:#E06C75;"> rhs) {</span></span>
<span class="line"><span style="color:#E5C07B;">  AvgState</span><span style="color:#E06C75;"> avgState </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (AvgState) state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  AvgState</span><span style="color:#E06C75;"> avgRhs </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (AvgState) rhs</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  avgState</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> avgRhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  avgState</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sum</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> avgRhs</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><strong>void outputFinal(State state, ResultValue resultValue)</strong></li></ol><p>该方法的作用是从 <code>State</code> 中计算出最终的结果。您需要访问 <code>State</code> 中的各个字段，求出最终的结果，并将最终的结果设置到 <code>ResultValue</code> 对象中。IoTDB 内部会为每个组在最后调用一次这个方法。注意根据聚合的语义，最终的结果只能是一个值。</p><p>下面还是一个用于求平均数（也就是 avg）的 <code>outputFinal</code> 示例。除了开头的强制类型转换之外，您还将看到 <code>ResultValue</code> 对象的具体用法，即通过 <code>setXXX</code>（其中 <code>XXX</code> 是类型名）来设置最后的结果。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> outputFinal</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">State</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> ResultValue</span><span style="color:#E06C75;"> resultValue) {</span></span>
<span class="line"><span style="color:#E5C07B;">  AvgState</span><span style="color:#E06C75;"> avgState </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (AvgState) state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">avgState</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    resultValue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setDouble</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">avgState</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sum</span><span style="color:#56B6C2;"> /</span><span style="color:#E5C07B;"> avgState</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">  } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    resultValue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setNull</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li><strong>void beforeDestroy()</strong></li></ol><p>UDAF 的结束方法，您可以在此方法中进行一些资源释放等的操作。</p><p>此方法由框架调用。对于一个 UDF 类实例而言，生命周期中会且只会被调用一次，即在处理完最后一条记录之后被调用。</p><h3 id="_1-4-完整-maven-项目示例" tabindex="-1"><a class="header-anchor" href="#_1-4-完整-maven-项目示例"><span>1.4 完整 Maven 项目示例</span></a></h3><p>如果您使用 <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven</a>，可以参考我们编写的示例项目<strong>udf-example</strong>。您可以在 <a href="https://github.com/apache/iotdb/tree/master/example/udf" target="_blank" rel="noopener noreferrer">这里</a> 找到它。</p><h2 id="_2-为iotdb贡献通用的内置udf函数" tabindex="-1"><a class="header-anchor" href="#_2-为iotdb贡献通用的内置udf函数"><span>2. 为iotdb贡献通用的内置UDF函数</span></a></h2><p>该部分主要讲述了外部用户如何将自己编写的 UDF 贡献给 IoTDB 社区。</p><h2 id="_2-1-前提条件" tabindex="-1"><a class="header-anchor" href="#_2-1-前提条件"><span>2.1 前提条件</span></a></h2><ol><li><p>UDF 具有通用性。</p><p>通用性主要指的是：UDF 在某些业务场景下，可以被广泛使用。换言之，就是 UDF 具有复用价值，可被社区内其他用户直接使用。</p><p>如果不确定自己写的 UDF 是否具有通用性，可以发邮件到 <code>dev@iotdb.apache.org</code> 或直接创建 ISSUE 发起讨论。</p></li><li><p>UDF 已经完成测试，且能够正常运行在用户的生产环境中。</p></li></ol><h3 id="_2-2-贡献清单" tabindex="-1"><a class="header-anchor" href="#_2-2-贡献清单"><span>2.2 贡献清单</span></a></h3><ol><li>UDF 的源代码</li><li>UDF 的测试用例</li><li>UDF 的使用说明</li></ol><h3 id="_2-3-贡献内容" tabindex="-1"><a class="header-anchor" href="#_2-3-贡献内容"><span>2.3 贡献内容</span></a></h3><h4 id="_2-3-1-源代码" tabindex="-1"><a class="header-anchor" href="#_2-3-1-源代码"><span>2.3.1 源代码</span></a></h4><ol><li>在<code>iotdb-core/node-commons/src/main/java/org/apache/iotdb/commons/udf/builtin</code>中创建 UDF 主类和相关的辅助类。</li><li>在<code>iotdb-core/node-commons/src/main/java/org/apache/iotdb/commons/udf/builtin/BuiltinTimeSeriesGeneratingFunction.java</code>中注册编写的 UDF。</li></ol><h4 id="_2-3-2-测试用例" tabindex="-1"><a class="header-anchor" href="#_2-3-2-测试用例"><span>2.3.2 测试用例</span></a></h4><p>至少需要为贡献的 UDF 编写集成测试。</p><p>可以在<code>integration-test/src/test/java/org/apache/iotdb/db/it/udf</code>中为贡献的 UDF 新增一个测试类进行测试。</p><h4 id="_2-3-3-使用说明" tabindex="-1"><a class="header-anchor" href="#_2-3-3-使用说明"><span>2.3.3 使用说明</span></a></h4><p>使用说明需要包含：UDF 的名称、UDF 的作用、执行函数必须的属性参数、函数的适用的场景以及使用示例等。</p><p>使用说明需包含中英文两个版本。应分别在 <code>docs/zh/UserGuide/Operation Manual/DML Data Manipulation Language.md</code> 和 <code>docs/UserGuide/Operation Manual/DML Data Manipulation Language.md</code> 中新增使用说明。</p><h4 id="_2-3-4-提交-pr" tabindex="-1"><a class="header-anchor" href="#_2-3-4-提交-pr"><span>2.3.4 提交 PR</span></a></h4><p>当准备好源代码、测试用例和使用说明后，就可以将 UDF 贡献到 IoTDB 社区了。在 <a href="https://github.com/apache/iotdb" target="_blank" rel="noopener noreferrer">Github</a> 上面提交 Pull Request (PR) 即可。具体提交方式见：<a href="https://iotdb.apache.org/zh/Community/Development-Guide.html" target="_blank" rel="noopener noreferrer">贡献指南</a>。</p><p>当 PR 评审通过并被合并后， UDF 就已经贡献给 IoTDB 社区了！</p>`,178)]))}const c=a(o,[["render",t],["__file","UDF-development.html.vue"]]),i=JSON.parse('{"path":"/zh/UserGuide/latest/User-Manual/UDF-development.html","title":"UDF 开发","lang":"zh-CN","frontmatter":{"description":"UDF 开发 1. UDF 开发 1.1 UDF 依赖 如果您使用 Maven ，可以从 Maven 库 中搜索下面示例中的依赖。请注意选择和目标 IoTDB 服务器版本相同的依赖版本。 1.2 UDTF（User Defined Timeseries Generating Function） 编写一个 UDTF 需要继承org.apache.iotd...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://iotdb.apache.org/UserGuide/latest/User-Manual/UDF-development.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/zh/UserGuide/latest/User-Manual/UDF-development.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"UDF 开发"}],["meta",{"property":"og:description","content":"UDF 开发 1. UDF 开发 1.1 UDF 依赖 如果您使用 Maven ，可以从 Maven 库 中搜索下面示例中的依赖。请注意选择和目标 IoTDB 服务器版本相同的依赖版本。 1.2 UDTF（User Defined Timeseries Generating Function） 编写一个 UDTF 需要继承org.apache.iotd..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-25T01:41:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-25T01:41:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UDF 开发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-25T01:41:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. UDF 开发","slug":"_1-udf-开发","link":"#_1-udf-开发","children":[{"level":3,"title":"1.1 UDF 依赖","slug":"_1-1-udf-依赖","link":"#_1-1-udf-依赖","children":[]},{"level":3,"title":"1.2 UDTF（User Defined Timeseries Generating Function）","slug":"_1-2-udtf-user-defined-timeseries-generating-function","link":"#_1-2-udtf-user-defined-timeseries-generating-function","children":[]},{"level":3,"title":"1.3 UDAF（User Defined Aggregation Function）","slug":"_1-3-udaf-user-defined-aggregation-function","link":"#_1-3-udaf-user-defined-aggregation-function","children":[]},{"level":3,"title":"1.4 完整 Maven 项目示例","slug":"_1-4-完整-maven-项目示例","link":"#_1-4-完整-maven-项目示例","children":[]}]},{"level":2,"title":"2. 为iotdb贡献通用的内置UDF函数","slug":"_2-为iotdb贡献通用的内置udf函数","link":"#_2-为iotdb贡献通用的内置udf函数","children":[]},{"level":2,"title":"2.1 前提条件","slug":"_2-1-前提条件","link":"#_2-1-前提条件","children":[{"level":3,"title":"2.2 贡献清单","slug":"_2-2-贡献清单","link":"#_2-2-贡献清单","children":[]},{"level":3,"title":"2.3 贡献内容","slug":"_2-3-贡献内容","link":"#_2-3-贡献内容","children":[]}]}],"git":{"createdTime":1731049685000,"updatedTime":1732498909000,"contributors":[{"name":"W1y1r","username":"W1y1r","email":"150988475+W1y1r@users.noreply.github.com","commits":3,"url":"https://github.com/W1y1r"}]},"readingTime":{"minutes":27.47,"words":8240},"filePathRelative":"zh/UserGuide/latest/User-Manual/UDF-development.md","localizedDate":"2024年11月8日","autoDesc":true}');export{c as comp,i as data};
