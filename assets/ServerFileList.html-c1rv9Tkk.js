import{_ as l,c as a,b as i,o as t}from"./app-BrzuM4xY.js";const o={};function r(s,e){return t(),a("div",null,e[0]||(e[0]=[i('<blockquote><p>下面是 IoTDB 生成或使用的文件</p><p>持续更新中。..</p></blockquote><h2 id="文件列表" tabindex="-1"><a class="header-anchor" href="#文件列表"><span>文件列表</span></a></h2><h3 id="单机模式" tabindex="-1"><a class="header-anchor" href="#单机模式"><span>单机模式</span></a></h3><h4 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h4><blockquote><p>conf 目录下</p></blockquote><ol><li>iotdb-engine.properties</li><li>logback.xml</li><li><a href="http://iotdb-env.sh" target="_blank" rel="noopener noreferrer">iotdb-env.sh</a></li><li>jmx.access</li><li>jmx.password</li><li>iotdb-sync-client.properties <ul><li>只有 Sync 工具会使用</li></ul></li></ol><blockquote><p>在 basedir/system/schema 目录下</p></blockquote><ol><li>system.properties <ul><li>记录的是所有不能变动的配置，启动时会检查，防止系统错误</li></ul></li></ol><h4 id="状态相关的文件" tabindex="-1"><a class="header-anchor" href="#状态相关的文件"><span>状态相关的文件</span></a></h4><h5 id="元数据相关文件" tabindex="-1"><a class="header-anchor" href="#元数据相关文件"><span>元数据相关文件</span></a></h5><blockquote><p>在 basedir/system/schema 目录下</p></blockquote><h6 id="元数据" tabindex="-1"><a class="header-anchor" href="#元数据"><span>元数据</span></a></h6><ol><li>mlog.bin <ul><li>记录的是元数据操作</li></ul></li><li>mtree-1.snapshot <ul><li>元数据快照</li></ul></li><li>mtree-1.snapshot.tmp <ul><li>临时文件，防止快照更新时，损坏旧快照文件</li></ul></li></ol><h6 id="标签和属性" tabindex="-1"><a class="header-anchor" href="#标签和属性"><span>标签和属性</span></a></h6><ol><li>tlog.txt <ul><li>存储每个时序的标签和属性</li><li>默认情况下每个时序 700 字节</li></ul></li></ol><h5 id="数据相关文件" tabindex="-1"><a class="header-anchor" href="#数据相关文件"><span>数据相关文件</span></a></h5><blockquote><p>在 basedir/data/目录下</p></blockquote><h6 id="wal" tabindex="-1"><a class="header-anchor" href="#wal"><span>WAL</span></a></h6><blockquote><p>在 basedir/wal 目录下</p></blockquote><ol><li>{StroageName}-{TsFileName}/wal1 <ul><li>每个 memtable 会对应一个 wal 文件</li></ul></li></ol><h6 id="tsfile" tabindex="-1"><a class="header-anchor" href="#tsfile"><span>TsFile</span></a></h6><blockquote><p>在 basedir/data/sequence or unsequence/{StorageGroupName}/{TimePartitionId}/目录下</p></blockquote><ol><li>{time}-{version}-{mergeCnt}.tsfile <ul><li>数据文件</li></ul></li><li>{TsFileName}.tsfile.mod <ul><li>更新文件，主要记录删除操作</li></ul></li></ol><h6 id="tsfileresource" tabindex="-1"><a class="header-anchor" href="#tsfileresource"><span>TsFileResource</span></a></h6><ol><li>{TsFileName}.tsfile.resource <ul><li>TsFile 的概要与索引文件</li></ul></li><li>{TsFileName}.tsfile.resource.temp <ul><li>临时文件，用于避免更新 tsfile.resource 时损坏 tsfile.resource</li></ul></li><li>{TsFileName}.tsfile.resource.closing <ul><li>关闭标记文件，用于标记 TsFile 处于关闭状态，重启后可以据此选择是关闭或继续写入该文件</li></ul></li></ol><h6 id="version" tabindex="-1"><a class="header-anchor" href="#version"><span>Version</span></a></h6><blockquote><p>在 basedir/system/storage_groups/{StorageGroupName}/{TimePartitionId} or upgrade 目录下</p></blockquote><ol><li>Version-{version} <ul><li>版本号文件，使用文件名来记录当前最大的版本号</li></ul></li></ol><h6 id="upgrade" tabindex="-1"><a class="header-anchor" href="#upgrade"><span>Upgrade</span></a></h6><blockquote><p>在 basedir/system/upgrade 目录下</p></blockquote><ol><li>upgrade.txt <ul><li>记录升级进度</li></ul></li></ol><h6 id="merge" tabindex="-1"><a class="header-anchor" href="#merge"><span>Merge</span></a></h6><blockquote><p>在 basedir/system/storage_groups/{StorageGroup}/目录下</p></blockquote><ol><li>merge.mods <ul><li>记录合并过程中发生的删除等操作</li></ul></li><li>merge.log <ul><li>记录合并进展</li></ul></li><li>tsfile.merge <ul><li>临时文件，每个顺序文件在合并时会产生一个对应的 merge 文件，用于存放临时数据</li></ul></li></ol><h6 id="authority" tabindex="-1"><a class="header-anchor" href="#authority"><span>Authority</span></a></h6><blockquote><p>在 basedir/system/users/目录下是用户信息<br> 在 basedir/system/roles/目录下是角色信息</p></blockquote><h6 id="compressratio" tabindex="-1"><a class="header-anchor" href="#compressratio"><span>CompressRatio</span></a></h6><blockquote><p>在 basedir/system/compression_ration 目录下</p></blockquote><ol><li>Ration-{compressionRatioSum}-{calTimes} <ul><li>记录每个文件的压缩率</li></ul></li></ol><hr><h3 id="集群模式" tabindex="-1"><a class="header-anchor" href="#集群模式"><span>集群模式</span></a></h3><blockquote><p>注意：下面文件是相对单机新增的文件列表</p></blockquote><h4 id="配置文件-1" tabindex="-1"><a class="header-anchor" href="#配置文件-1"><span>配置文件</span></a></h4><ol><li>iotdb-cluster.properties</li></ol><h4 id="状态相关文件" tabindex="-1"><a class="header-anchor" href="#状态相关文件"><span>状态相关文件</span></a></h4><blockquote><p>在 basedir 目录下</p></blockquote><ol><li>node_identifier <ul><li>本地节点在集群中的唯一标识</li></ul></li><li>partitions <ul><li>分区表文件，记录数据分布信息</li></ul></li><li>{time}_{random}.task <ul><li>pullSnapshotTask 文件，记录的是 slot 和 owner，当一个节点加入集群时，会创建这个文件来跟踪数据拉取情况</li><li>在 basedir/raft/{nodeIdentifier}/snapshot_task/目录下</li></ul></li></ol><h4 id="raft-相关文件" tabindex="-1"><a class="header-anchor" href="#raft-相关文件"><span>Raft 相关文件</span></a></h4><blockquote><p>在 basedir/system/raftLog/{nodeIdentifier}/目录下</p></blockquote><h5 id="raft-log" tabindex="-1"><a class="header-anchor" href="#raft-log"><span>Raft Log</span></a></h5><ol><li>.data-{version} <ul><li>raft committed log, 默认只保留最新的 1000 条日志</li></ul></li></ol><h5 id="raft-meta" tabindex="-1"><a class="header-anchor" href="#raft-meta"><span>Raft Meta</span></a></h5><ol><li>logMeta <ul><li>raft 一些相关元数据，例如选举相关信息和日志提交信息 <ul><li>hardState: voteFor, term</li><li>Meta: commitLogTerm, commitLogIndex, lastLogTerm, lastLogIndex</li><li>...</li></ul></li></ul></li><li>logMeta.tmp <ul><li>临时文件，用于更新 logMeta 时防止损坏旧的 logMeta 文件</li></ul></li></ol><h5 id="raft-catch-up" tabindex="-1"><a class="header-anchor" href="#raft-catch-up"><span>Raft Catch Up</span></a></h5><blockquote><p>在 basedir/remote/{nodeIdentifier}/{storageGroupName}/{partitionNum}/目录下</p></blockquote><ol><li>{fileName}.tsfile <ul><li>远程 TsFile，拉取完毕会 load 进对应的存储组数据目录下</li></ul></li><li>{fileName}.tsfile.mod <ul><li>远程更新文件 TsFile.mod，拉取完毕会 load 进对应的存储组数据目录下</li></ul></li></ol>',56)]))}const c=l(o,[["render",r],["__file","ServerFileList.html.vue"]]),p=JSON.parse('{"path":"/zh/UserGuide/V0.13.x/QuickStart/ServerFileList.html","title":"","lang":"zh-CN","frontmatter":{"description":"下面是 IoTDB 生成或使用的文件 持续更新中。.. 文件列表 单机模式 配置文件 conf 目录下 iotdb-engine.properties logback.xml iotdb-env.sh jmx.access jmx.password iotdb-sync-client.properties 只有 Sync 工具会使用 在 basedir...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://iotdb.apache.org/UserGuide/V0.13.x/QuickStart/ServerFileList.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/zh/UserGuide/V0.13.x/QuickStart/ServerFileList.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:description","content":"下面是 IoTDB 生成或使用的文件 持续更新中。.. 文件列表 单机模式 配置文件 conf 目录下 iotdb-engine.properties logback.xml iotdb-env.sh jmx.access jmx.password iotdb-sync-client.properties 只有 Sync 工具会使用 在 basedir..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-07-10T03:11:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-10T03:11:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-10T03:11:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"文件列表","slug":"文件列表","link":"#文件列表","children":[{"level":3,"title":"单机模式","slug":"单机模式","link":"#单机模式","children":[]},{"level":3,"title":"集群模式","slug":"集群模式","link":"#集群模式","children":[]}]}],"git":{"createdTime":1688958677000,"updatedTime":1688958677000,"contributors":[{"name":"CritasWang","username":"CritasWang","email":"critas@outlook.com","commits":1,"url":"https://github.com/CritasWang"}]},"readingTime":{"minutes":2.89,"words":867},"filePathRelative":"zh/UserGuide/V0.13.x/QuickStart/ServerFileList.md","localizedDate":"2023年7月10日","autoDesc":true}');export{c as comp,p as data};
