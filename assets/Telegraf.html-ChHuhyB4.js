import{_ as i,c as l,b as n,d as e,e as s,a as o,f as r,r as p,o as c}from"./app-CLygX6ac.js";const d={};function u(f,t){const a=p("RouteLink");return c(),l("div",null,[t[12]||(t[12]=n('<h1 id="telegraf" tabindex="-1"><a class="header-anchor" href="#telegraf"><span>Telegraf</span></a></h1><h2 id="_1、product-overview" tabindex="-1"><a class="header-anchor" href="#_1、product-overview"><span>1、Product Overview</span></a></h2><h3 id="_1-1-telegraf" tabindex="-1"><a class="header-anchor" href="#_1-1-telegraf"><span>1.1 Telegraf</span></a></h3><p><a href="https://www.influxdata.com/time-series-platform/telegraf/" target="_blank" rel="noopener noreferrer">Telegraf</a> is an open-source proxy tool developed by InfluxData for collecting, processing, and transmitting metric data.</p><p>Telegraf has the following characteristics:</p><ul><li>Plugin architecture: The strength of Telegraf lies in its extensive plugin ecosystem. It supports multiple input, output, and processor plugins, and can seamlessly integrate with various data sources and targets. <ul><li>Data collection: Telegraf excels at collecting metric data from various sources, such as system metrics, logs, databases, etc. Its versatility makes it suitable for monitoring applications, infrastructure, and IoT devices.</li><li>Output target: Once data is collected, it can be sent to various output targets, including popular databases such as InfluxDB. This flexibility allows Telegraf to adapt to different monitoring and analysis settings.</li></ul></li><li>Easy configuration: Telegraf is configured using TOML files. This simplicity enables users to easily define inputs, outputs, and processors, making customization simple and clear.</li><li>Community and Support: As an open-source project, Telegraf benefits from an active community. Users can contribute plugins, report issues, and seek help through forums and documents.</li></ul><h3 id="_1-2-telegraf-iotdb-plugin" tabindex="-1"><a class="header-anchor" href="#_1-2-telegraf-iotdb-plugin"><span>1.2 Telegraf-IoTDB Plugin</span></a></h3><p>The Telegraf IoTDB plugin can output and store monitoring information saved in Telegraf to IoTDB. The output plugin uses IoTDB sessions for connection and data writing.</p><figure><img src="https://alioss.timecho.com/docs/img/telegraf-en.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2、installation-requirements" tabindex="-1"><a class="header-anchor" href="#_2、installation-requirements"><span>2、Installation Requirements</span></a></h2><p>Telegraf supports multiple operating systems, including Linux, Windows, and macOS. It is recommended to use &#39;root&#39; administrator privileges to successfully install Telegraf. Please refer to the installation requirements for specific <a href="https://docs.influxdata.com/telegraf/v1/install/" target="_blank" rel="noopener noreferrer">Installation Requirements</a></p><h2 id="_3、installation-steps" tabindex="-1"><a class="header-anchor" href="#_3、installation-steps"><span>3、Installation Steps</span></a></h2><p>Please refer to <a href="https://docs.influxdata.com/telegraf/v1/install/" target="_blank" rel="noopener noreferrer">Installation Steps</a> for specific installation steps</p><ul><li>Note: This plugin is a built-in plugin for Telegraf and does not require secondary installation</li></ul><h2 id="_4、instructions" tabindex="-1"><a class="header-anchor" href="#_4、instructions"><span>4、Instructions</span></a></h2><h3 id="_4-1-set-input-source" tabindex="-1"><a class="header-anchor" href="#_4-1-set-input-source"><span>4.1 Set Input Source</span></a></h3><p>Find &#39;INPUT PLUGINS&#39; in the&#39; telegraf. conf &#39;configuration file to configure the input source. The specific configuration content is shown in the table below</p>',17)),e("table",null,[t[11]||(t[11]=e("thead",null,[e("tr",null,[e("th",null,"Configuration"),e("th",null,"Description"),e("th",null,"Notes")])],-1)),e("tbody",null,[t[5]||(t[5]=e("tr",null,[e("td",null,"alias"),e("td",null,"Example of named plugin"),e("td")],-1)),t[6]||(t[6]=e("tr",null,[e("td",null,"interval"),e("td",null,"Collect the frequency of this indicator. Ordinary plugins use a single global interval, but if the running frequency of a specific input should be lower or higher, you can configure it here` Interval can be increased to reduce data input rate limitations."),e("td")],-1)),t[7]||(t[7]=e("tr",null,[e("td",null,"precision"),e("td",null,[s("Overlay the settings of the 'precision' proxy. The collected indicators are rounded to the specified precision interval. When this value is set on the service input (e.g. "),e("code",null,"'statsd':"),s("), the output database may merge multiple events that occur at the same timestamp.")]),e("td")],-1)),t[8]||(t[8]=e("tr",null,[e("td",null,"collection_jitter"),e("td",null,"Overlay the settings of the 'collectic_jitter' proxy. Collection jitter is used to perform random intervals`"),e("td")],-1)),e("tr",null,[t[3]||(t[3]=e("td",null,"name_override",-1)),t[4]||(t[4]=e("td",null,"Custom time series path name used when outputting to IoTDB",-1)),e("td",null,[t[1]||(t[1]=s('The output path name must meet the "')),o(a,{to:"/UserGuide/latest/Reference/Syntax-Rule.html"},{default:r(()=>t[0]||(t[0]=[s("Syntax Requirement")])),_:1}),t[2]||(t[2]=s('" requirement'))])]),t[9]||(t[9]=e("tr",null,[e("td",null,"name_prefix"),e("td",null,"Specify the prefix attached to the measurement name"),e("td")],-1)),t[10]||(t[10]=e("tr",null,[e("td",null,"name_suffix"),e("td",null,"Specify the suffix attached to the measurement name"),e("td")],-1))])]),t[13]||(t[13]=n(`<figure><img src="https://alioss.timecho.com/docs/img/Telegraf_1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-2-set-output-source" tabindex="-1"><a class="header-anchor" href="#_4-2-set-output-source"><span>4.2 Set Output Source</span></a></h3><p>Find &quot;outputs. iotdb&quot; in the &quot;telegraf. conf&quot; configuration file to configure the output source. The specific configuration content is shown in the table below. For specific input source examples, please refer to <a href="https://docs.influxdata.com/telegraf/v1/configuration/#output-configuration-examples" target="_blank" rel="noopener noreferrer">Output Source Example</a></p><table><thead><tr><th>Configuration</th><th>Description</th><th>Before Modification</th><th>After Modification</th><th>Notes</th></tr></thead><tbody><tr><td>host</td><td>Host of IoTDB</td><td># host = &quot;127.0.0.1&quot;</td><td>host = &quot;Deploy IoTDB host&quot;</td><td>Default is 127.0.0.1</td></tr><tr><td>port</td><td>The port number of IoTDB</td><td># port = &quot;6667&quot;</td><td>port = &quot;Port number for deploying IoTDB&quot;</td><td>Default is 6667</td></tr><tr><td>user</td><td>Username for IoTDB</td><td># user = &quot;root&quot;</td><td>user = &quot;Username for IoTDB&quot;</td><td>Default as root</td></tr><tr><td>password</td><td>Password for IoTDB</td><td># password = &quot;root&quot;</td><td>password= &quot;Password for IoTDB&quot;</td><td>Default as root</td></tr><tr><td>timestamp_precision</td><td>Timestamp accuracy</td><td>timestamp_precision = &quot;millisecond&quot;</td><td>timestamp_precision = &quot;Same timestamp accuracy as IoTDB&quot;</td><td>You can check the &#39;timestamp-precision&#39; field in &#39;iotdb system. properties&#39;</td></tr><tr><td>sanitize_tag</td><td>Database version</td><td>none</td><td>sanitize_tag = &quot;0.13/1.0/1.1/1.2/1.3&quot;</td><td></td></tr></tbody></table><figure><img src="https://alioss.timecho.com/docs/img/Telegraf_2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-3-start-telegraf-service" tabindex="-1"><a class="header-anchor" href="#_4-3-start-telegraf-service"><span>4.3 Start Telegraf Service</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">telegraf</span><span style="color:#D19A66;"> -config</span><span style="color:#98C379;"> /path/to/telegraf.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_5、example-usage" tabindex="-1"><a class="header-anchor" href="#_5、example-usage"><span>5、Example Usage</span></a></h2><p>The following is an example of collecting CPU data using Telegraf and outputting it to IoTDB using Telegraf IoTDB. Generate configuration files using the telegraf command</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">telegraf</span><span style="color:#D19A66;"> --sample-config</span><span style="color:#D19A66;"> --input-filter</span><span style="color:#98C379;"> cpu</span><span style="color:#D19A66;"> --output-filter</span><span style="color:#98C379;"> iotdb</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">cpu_iotdb.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li>Modify the configuration of the input CPU plugin in cpu_iotdb. conf. Among them, the &quot;name_ooverride&quot; field is the custom time-series path name used when outputting to IoTDB</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># Read metrics about cpu usage</span></span>
<span class="line"><span style="color:#ABB2BF;">[[inputs.cpu]]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Whether to report per-cpu stats or not</span></span>
<span class="line"><span style="color:#61AFEF;">  percpu</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Whether to report total system cpu stats or not</span></span>
<span class="line"><span style="color:#61AFEF;">  totalcpu</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## If true, collect raw CPU time metrics</span></span>
<span class="line"><span style="color:#61AFEF;">  collect_cpu_time</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## If true, compute and report the sum of all non-idle CPU states</span></span>
<span class="line"><span style="color:#61AFEF;">  report_active</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## If true and the info is available then add core_id and physical_id tags</span></span>
<span class="line"><span style="color:#61AFEF;">  core_tags</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#61AFEF;">  name_override</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;root.demo.telgraf.cpu&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Modify the configuration of the output iotdb plugin in cpu_iotdb. conf</li></ol><table><thead><tr><th>Configuration</th><th>Description</th><th>Before Modification</th><th>After Modification</th><th>Notes</th></tr></thead><tbody><tr><td>host</td><td>Host of IoTDB</td><td># host = &quot;127.0.0.1&quot;</td><td>host = &quot;Deploy IoTDB host&quot;</td><td>Default is 127.0.0.1</td></tr><tr><td>port</td><td>The port number of IoTDB</td><td># port = &quot;6667&quot;</td><td>port = &quot;Port number for deploying IoTDB&quot;</td><td>Default is 6667</td></tr><tr><td>user</td><td>Username for IoTDB</td><td># user = &quot;root&quot;</td><td>user = &quot;Username for IoTDB&quot;</td><td>Default as root</td></tr><tr><td>password</td><td>Password for IoTDB</td><td># password = &quot;root&quot;</td><td>password= &quot;Password for IoTDB&quot;</td><td>Default as root</td></tr><tr><td>timestamp_precision</td><td>Timestamp accuracy</td><td>timestamp_precision = &quot;millisecond&quot;</td><td>timestamp_precision = &quot;Same timestamp accuracy as IoTDB&quot;</td><td>You can check the &#39;timestamp-precision&#39; field in &#39;iotdb system. properties&#39;</td></tr><tr><td>sanitize_tag</td><td>Database version</td><td>none</td><td>sanitize_tag = &quot;0.13/1.0/1.1/1.2/1.3&quot;</td><td></td></tr></tbody></table><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># Save metrics to an IoTDB Database</span></span>
<span class="line"><span style="color:#ABB2BF;">[[outputs.iotdb]]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Configuration of IoTDB server connection</span></span>
<span class="line"><span style="color:#61AFEF;">  host</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;127.0.0.1&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # port = &quot;6667&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Configuration of authentication</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # user = &quot;root&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # password = &quot;root&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Timeout to open a new session.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## A value of zero means no timeout.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # timeout = &quot;5s&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Configuration of type conversion for 64-bit unsigned int</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## IoTDB currently DOES NOT support unsigned integers (version 13.x).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## 32-bit unsigned integers are safely converted into 64-bit signed integers by the plugin,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## however, this is not true for 64-bit values in general as overflows may occur.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## The following setting allows to specify the handling of 64-bit unsigned integers.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Available values are:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##   - &quot;int64&quot;       --  convert to 64-bit signed integers and accept overflows</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##   - &quot;int64_clip&quot;  --  convert to 64-bit signed integers and clip the values on overflow to 9,223,372,036,854,775,807</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##   - &quot;text&quot;        --  convert to the string representation of the value</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # uint64_conversion = &quot;int64_clip&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Configuration of TimeStamp</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## TimeStamp is always saved in 64bits int. timestamp_precision specifies the unit of timestamp.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Available value:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## &quot;second&quot;, &quot;millisecond&quot;, &quot;microsecond&quot;, &quot;nanosecond&quot;(default)</span></span>
<span class="line"><span style="color:#61AFEF;">  timestamp_precision</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;millisecond&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Handling of tags</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Tags are not fully supported by IoTDB.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## A guide with suggestions on how to handle tags can be found here:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##     https://iotdb.apache.org/UserGuide/Master/API/InfluxDB-Protocol.html</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Available values are:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##   - &quot;fields&quot;     --  convert tags to fields in the measurement</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##   - &quot;device_id&quot;  --  attach tags to the device ID</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## For Example, a metric named &quot;root.sg.device&quot; with the tags \`tag1: &quot;private&quot;\`  and  \`tag2: &quot;working&quot;\` and</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##  fields \`s1: 100\`  and \`s2: &quot;hello&quot;\` will result in the following representations in IoTDB</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##   - &quot;fields&quot;     --  root.sg.device, s1=100, s2=&quot;hello&quot;, tag1=&quot;private&quot;, tag2=&quot;working&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##   - &quot;device_id&quot;  --  root.sg.device.private.working, s1=100, s2=&quot;hello&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # convert_tags_to = &quot;device_id&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   ## Handling of unsupported characters</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Some characters in different versions of IoTDB are not supported in path name</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## A guide with suggetions on valid paths can be found here:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## for iotdb 0.13.x           -&gt; https://iotdb.apache.org/UserGuide/V0.13.x/Reference/Syntax-Conventions.html#identifiers</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## for iotdb 1.x.x and above  -&gt; https://iotdb.apache.org/UserGuide/V1.3.x/User-Manual/Syntax-Rule.html#identifier</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Available values are:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##   - &quot;1.0&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;  -- enclose in \`\` the world having forbidden character</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##                                    such as @ $ # : [ ] { } ( ) space</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##   - &quot;0.13&quot;                      -- enclose in \`\` the world having forbidden character</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##                                    such as space</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ##</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  ## Keep this section commented if you don&#39;t want to sanitize the path</span></span>
<span class="line"><span style="color:#61AFEF;">  sanitize_tag</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;1.3&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Run Telegraf using the cpu_iotdb.exe configuration file: After running for a period of time, the data collected and reported by Telegraf can be queried in IoTDB</li></ol>`,16))])}const g=i(d,[["render",u],["__file","Telegraf.html.vue"]]),h=JSON.parse('{"path":"/UserGuide/latest/Ecosystem-Integration/Telegraf.html","title":"Telegraf","lang":"en-US","frontmatter":{"description":"Telegraf 1、Product Overview 1.1 Telegraf Telegraf is an open-source proxy tool developed by InfluxData for collecting, processing, and transmitting metric data. Telegraf has the...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://iotdb.apache.org/zh/UserGuide/latest/Ecosystem-Integration/Telegraf.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/UserGuide/latest/Ecosystem-Integration/Telegraf.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"Telegraf"}],["meta",{"property":"og:description","content":"Telegraf 1、Product Overview 1.1 Telegraf Telegraf is an open-source proxy tool developed by InfluxData for collecting, processing, and transmitting metric data. Telegraf has the..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://alioss.timecho.com/docs/img/telegraf-en.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-20T12:27:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-20T12:27:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Telegraf\\",\\"image\\":[\\"https://alioss.timecho.com/docs/img/telegraf-en.png\\",\\"https://alioss.timecho.com/docs/img/Telegraf_1.png\\",\\"https://alioss.timecho.com/docs/img/Telegraf_2.png\\"],\\"dateModified\\":\\"2025-01-20T12:27:06.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1、Product Overview","slug":"_1、product-overview","link":"#_1、product-overview","children":[{"level":3,"title":"1.1 Telegraf","slug":"_1-1-telegraf","link":"#_1-1-telegraf","children":[]},{"level":3,"title":"1.2 Telegraf-IoTDB Plugin","slug":"_1-2-telegraf-iotdb-plugin","link":"#_1-2-telegraf-iotdb-plugin","children":[]}]},{"level":2,"title":"2、Installation Requirements","slug":"_2、installation-requirements","link":"#_2、installation-requirements","children":[]},{"level":2,"title":"3、Installation Steps","slug":"_3、installation-steps","link":"#_3、installation-steps","children":[]},{"level":2,"title":"4、Instructions","slug":"_4、instructions","link":"#_4、instructions","children":[{"level":3,"title":"4.1 Set Input Source","slug":"_4-1-set-input-source","link":"#_4-1-set-input-source","children":[]},{"level":3,"title":"4.2 Set Output Source","slug":"_4-2-set-output-source","link":"#_4-2-set-output-source","children":[]},{"level":3,"title":"4.3 Start Telegraf Service","slug":"_4-3-start-telegraf-service","link":"#_4-3-start-telegraf-service","children":[]}]},{"level":2,"title":"5、Example Usage","slug":"_5、example-usage","link":"#_5、example-usage","children":[]}],"git":{"createdTime":1737376026000,"updatedTime":1737376026000,"contributors":[{"name":"majialin","username":"majialin","email":"107627937+mal117@users.noreply.github.com","commits":1,"url":"https://github.com/majialin"}]},"readingTime":{"minutes":4.45,"words":1335},"filePathRelative":"UserGuide/latest/Ecosystem-Integration/Telegraf.md","localizedDate":"January 20, 2025","autoDesc":true}');export{g as comp,h as data};
