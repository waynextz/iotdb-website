import{_ as r,c as o,b as i,d as s,e as l,a,f as n,r as u,o as d}from"./app-DBchSYps.js";const p={};function m(v,e){const t=u("RouteLink");return d(),o("div",null,[e[18]||(e[18]=i(`<h1 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h1><h2 id="_1-syntax-overview" tabindex="-1"><a class="header-anchor" href="#_1-syntax-overview"><span>1 Syntax Overview</span></a></h2><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> ⟨select_list⟩</span></span>
<span class="line"><span style="color:#C678DD;">    FROM</span><span style="color:#ABB2BF;"> ⟨tables⟩</span></span>
<span class="line"><span style="color:#E06C75;">    [WHERE ⟨condition⟩]</span></span>
<span class="line"><span style="color:#E06C75;">    [GROUP BY ⟨groups⟩]</span></span>
<span class="line"><span style="color:#E06C75;">    [HAVING ⟨group_filter⟩]</span></span>
<span class="line"><span style="color:#E06C75;">    [FILL ⟨fill_methods⟩]</span></span>
<span class="line"><span style="color:#E06C75;">    [ORDER BY ⟨order_expression⟩]</span></span>
<span class="line"><span style="color:#E06C75;">    [OFFSET ⟨n⟩]</span></span>
<span class="line"><span style="color:#E06C75;">    [LIMIT ⟨n⟩]</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IoTDB query syntax provides the following clauses:</p>`,4)),s("ul",null,[s("li",null,[e[1]||(e[1]=l("SELECT Clause: The columns to include in the query results. For detailed syntax, see: ")),a(t,{to:"/UserGuide/V2.0.1/Table/SQL-Manual/Select-Clause.html"},{default:n(()=>e[0]||(e[0]=[l("SELECTClauses")])),_:1})]),s("li",null,[e[3]||(e[3]=l("FROM Clause: Specifies the data source of the query, which can be a single table, multiple tables joined using the JOIN clause, or a subquery. For detailed syntax, see: ")),a(t,{to:"/UserGuide/V2.0.1/Table/SQL-Manual/From-Join-Clause.html"},{default:n(()=>e[2]||(e[2]=[l("FROM & JOIN Clauses")])),_:1})]),s("li",null,[e[5]||(e[5]=l("WHERE Clause: Used to filter data, selecting only rows that meet specific conditions. This clause is logically executed immediately after the FROM clause. For detailed syntax, see:")),a(t,{to:"/UserGuide/V2.0.1/Table/SQL-Manual/Where-Clause.html"},{default:n(()=>e[4]||(e[4]=[l("WHERE Clauses")])),_:1})]),s("li",null,[e[7]||(e[7]=l("GROUP BY Clause: Used when data aggregation is needed, specifying the columns used for grouping. For detailed syntax, see: ")),a(t,{to:"/UserGuide/V2.0.1/Table/SQL-Manual/GroupBy-Clause.html"},{default:n(()=>e[6]||(e[6]=[l("GROUP BY Clauses")])),_:1})]),s("li",null,[e[9]||(e[9]=l("HAVING Clause: Used after the GROUP BY clause to filter data that has already been grouped. Similar to the WHERE clause, but the HAVING clause is executed after grouping. For detailed syntax, see: ")),a(t,{to:"/UserGuide/V2.0.1/Table/SQL-Manual/Having-Clause.html"},{default:n(()=>e[8]||(e[8]=[l("HAVING Clauses")])),_:1})]),s("li",null,[e[11]||(e[11]=l("FILL Clause: Used to handle null values in the query results. Users can specify filling modes (such as the previous non-null value or linear interpolation) to fill null values with the FILL clause, facilitating data visualization and analysis. For detailed syntax, see: ")),a(t,{to:"/UserGuide/V2.0.1/Table/SQL-Manual/Fill-Clause.html"},{default:n(()=>e[10]||(e[10]=[l("FILL Clauses")])),_:1})]),s("li",null,[e[13]||(e[13]=l("ORDER BY Clause: Sorts the query results, specifying ascending (ASC) or descending (DESC) order, as well as handling of NULL values (NULLS FIRST or NULLS LAST). For detailed syntax, see: ")),a(t,{to:"/UserGuide/V2.0.1/Table/SQL-Manual/OrderBy-Clause.html"},{default:n(()=>e[12]||(e[12]=[l("ORDER BY Clauses")])),_:1})]),s("li",null,[e[15]||(e[15]=l("OFFSET Clause: Used to specify the starting position of the query results, that is, skipping the first OFFSET rows. Used in conjunction with the LIMIT clause. For detailed syntax, see: ")),a(t,{to:"/UserGuide/V2.0.1/Table/SQL-Manual/Limit-Offset-Clause.html"},{default:n(()=>e[14]||(e[14]=[l("LIMIT and OFFSET Clauses")])),_:1})]),s("li",null,[e[17]||(e[17]=l("LIMIT Clause: Limits the number of rows in the query results, often used with the OFFSET clause to implement pagination. For detailed syntax, see: ")),a(t,{to:"/UserGuide/V2.0.1/Table/SQL-Manual/Limit-Offset-Clause.html"},{default:n(()=>e[16]||(e[16]=[l("LIMIT and OFFSET Clauses")])),_:1})])]),e[19]||(e[19]=i('<h2 id="_2-clause-execution-order" tabindex="-1"><a class="header-anchor" href="#_2-clause-execution-order"><span>2 Clause Execution Order</span></a></h2><ol><li>FROM (table name)</li><li>WHERE (condition filtering)</li><li>SELECT (column names/expressions)</li><li>GROUP BY (grouping)</li><li>HAVING (condition filtering after grouping)</li><li>FILL(null value filling)</li><li>ORDER BY (sorting)</li><li>OFFSET (offset amount)</li><li>LIMIT (limit amount)</li></ol>',2))])}const y=r(p,[["render",m],["__file","overview.html.vue"]]),h=JSON.parse('{"path":"/UserGuide/V2.0.1/Table/SQL-Manual/overview.html","title":"Overview","lang":"en-US","frontmatter":{"description":"Overview 1 Syntax Overview IoTDB query syntax provides the following clauses: SELECT Clause: The columns to include in the query results. For detailed syntax, see: FROM Clause: ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://iotdb.apache.org/zh/UserGuide/V2.0.1/Table/SQL-Manual/overview.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/UserGuide/V2.0.1/Table/SQL-Manual/overview.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"Overview"}],["meta",{"property":"og:description","content":"Overview 1 Syntax Overview IoTDB query syntax provides the following clauses: SELECT Clause: The columns to include in the query results. For detailed syntax, see: FROM Clause: ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-03T10:29:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-03T10:29:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Overview\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-03T10:29:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1 Syntax Overview","slug":"_1-syntax-overview","link":"#_1-syntax-overview","children":[]},{"level":2,"title":"2 Clause Execution Order","slug":"_2-clause-execution-order","link":"#_2-clause-execution-order","children":[]}],"git":{"createdTime":1735900165000,"updatedTime":1735900165000,"contributors":[{"name":"W1y1r","username":"W1y1r","email":"150988475+W1y1r@users.noreply.github.com","commits":1,"url":"https://github.com/W1y1r"}]},"readingTime":{"minutes":1.64,"words":493},"filePathRelative":"UserGuide/V2.0.1/Table/SQL-Manual/overview.md","localizedDate":"January 3, 2025","autoDesc":true}');export{y as comp,h as data};
