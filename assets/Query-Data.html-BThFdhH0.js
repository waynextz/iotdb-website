import{_ as r,c as i,b as o,d as a,e as n,a as e,f as p,r as c,o as t}from"./app-CLygX6ac.js";const d={};function B(y,s){const l=c("RouteLink");return t(),i("div",null,[s[39]||(s[39]=o(`<h1 id="数据查询" tabindex="-1"><a class="header-anchor" href="#数据查询"><span>数据查询</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>在 IoTDB 中，使用 <code>SELECT</code> 语句从一条或多条时间序列中查询数据，IoTDB 不区分历史数据和实时数据，用户可以用统一的sql语法进行查询，通过 <code>WHERE</code> 子句中的时间过滤谓词决定查询的时间范围。</p><h3 id="语法定义" tabindex="-1"><a class="header-anchor" href="#语法定义"><span>语法定义</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#E06C75;"> [LAST]</span><span style="color:#ABB2BF;"> selectExpr </span><span style="color:#E06C75;">[, selectExpr]</span><span style="color:#ABB2BF;"> ...</span></span>
<span class="line"><span style="color:#E06C75;">    [INTO intoItem [, intoItem]</span><span style="color:#ABB2BF;"> ...]</span></span>
<span class="line"><span style="color:#C678DD;">    FROM</span><span style="color:#ABB2BF;"> prefixPath </span><span style="color:#E06C75;">[, prefixPath]</span><span style="color:#ABB2BF;"> ...</span></span>
<span class="line"><span style="color:#E06C75;">    [WHERE whereCondition]</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#C678DD;">GROUP BY</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        (</span><span style="color:#E06C75;">[startTime, endTime), interval [, slidingStep]</span><span style="color:#ABB2BF;">) |</span></span>
<span class="line"><span style="color:#C678DD;">        LEVEL</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> levelNum </span><span style="color:#E06C75;">[, levelNum]</span><span style="color:#ABB2BF;"> ... |</span></span>
<span class="line"><span style="color:#ABB2BF;">        TAGS(tagKey </span><span style="color:#E06C75;">[, tagKey]</span><span style="color:#ABB2BF;"> ... |</span></span>
<span class="line"><span style="color:#ABB2BF;">        VARIATION(expression</span><span style="color:#E06C75;">[,delta][,ignoreNull=true/false]</span><span style="color:#ABB2BF;">) |</span></span>
<span class="line"><span style="color:#ABB2BF;">        CONDITION(expression,</span><span style="color:#E06C75;">[keep&gt;/&gt;=/=/&lt;/&lt;=]</span><span style="color:#ABB2BF;">threshold</span><span style="color:#E06C75;">[,ignoreNull=true/false]</span><span style="color:#ABB2BF;">) |</span></span>
<span class="line"><span style="color:#C678DD;">        SESSION</span><span style="color:#ABB2BF;">(timeInterval) |</span></span>
<span class="line"><span style="color:#56B6C2;">        COUNT</span><span style="color:#ABB2BF;">(expression, </span><span style="color:#C678DD;">size</span><span style="color:#E06C75;">[,ignoreNull=true/false]</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }]</span></span>
<span class="line"><span style="color:#E06C75;">    [HAVING havingCondition]</span></span>
<span class="line"><span style="color:#E06C75;">    [ORDER BY sortKey {ASC | DESC}]</span></span>
<span class="line"><span style="color:#E06C75;">    [FILL ({PREVIOUS | LINEAR | constant}) (, interval=DURATION_LITERAL)?)]</span></span>
<span class="line"><span style="color:#E06C75;">    [SLIMIT seriesLimit]</span><span style="color:#E06C75;"> [SOFFSET seriesOffset]</span></span>
<span class="line"><span style="color:#E06C75;">    [LIMIT rowLimit]</span><span style="color:#E06C75;"> [OFFSET rowOffset]</span></span>
<span class="line"><span style="color:#E06C75;">    [ALIGN BY {TIME | DEVICE}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="语法说明" tabindex="-1"><a class="header-anchor" href="#语法说明"><span>语法说明</span></a></h3><h4 id="select-子句" tabindex="-1"><a class="header-anchor" href="#select-子句"><span><code>SELECT</code> 子句</span></a></h4><ul><li><code>SELECT</code> 子句指定查询的输出，由若干个 <code>selectExpr</code> 组成。</li><li>每个 <code>selectExpr</code> 定义查询结果中的一列或多列，它是一个由时间序列路径后缀、常量、函数和运算符组成的表达式。</li><li>支持使用<code>AS</code>为查询结果集中的列指定别名。</li><li>在 <code>SELECT</code> 子句中使用 <code>LAST</code> 关键词可以指定查询为最新点查询</li></ul><h4 id="into-子句" tabindex="-1"><a class="header-anchor" href="#into-子句"><span><code>INTO</code> 子句</span></a></h4><ul><li><code>SELECT INTO</code> 用于将查询结果写入一系列指定的时间序列中。<code>INTO</code> 子句指定了查询结果写入的目标时间序列。</li></ul><h4 id="from-子句" tabindex="-1"><a class="header-anchor" href="#from-子句"><span><code>FROM</code> 子句</span></a></h4><ul><li><code>FROM</code> 子句包含要查询的一个或多个时间序列的路径前缀，支持使用通配符。</li><li>在执行查询时，会将 <code>FROM</code> 子句中的路径前缀和 <code>SELECT</code> 子句中的后缀进行拼接得到完整的查询目标序列。</li></ul><h4 id="where-子句" tabindex="-1"><a class="header-anchor" href="#where-子句"><span><code>WHERE</code> 子句</span></a></h4><ul><li><code>WHERE</code> 子句指定了对数据行的筛选条件，由一个 <code>whereCondition</code> 组成。</li><li><code>whereCondition</code> 是一个逻辑表达式，对于要选择的每一行，其计算结果为真。如果没有 <code>WHERE</code> 子句，将选择所有行。</li><li>在 <code>whereCondition</code> 中，可以使用除聚合函数之外的任何 IOTDB 支持的函数和运算符。</li></ul><h4 id="group-by-子句" tabindex="-1"><a class="header-anchor" href="#group-by-子句"><span><code>GROUP BY</code> 子句</span></a></h4><ul><li><code>GROUP BY</code> 子句指定对序列进行分段或分组聚合的方式。</li><li>分段聚合是指按照时间维度，针对同时间序列中不同数据点之间的时间关系，对数据在行的方向进行分段，每个段得到一个聚合值。目前支持<strong>时间区间分段</strong>、<strong>差值分段</strong>、<strong>条件分段</strong>、<strong>会话分段</strong>和<strong>点数分段</strong>，未来将支持更多分段方式。</li><li>分组聚合是指针对不同时间序列，在时间序列的潜在业务属性上分组，每个组包含若干条时间序列，每个组得到一个聚合值。支持<strong>按路径层级分组</strong>和<strong>按序列标签分组</strong>两种分组方式。</li><li>分段聚合和分组聚合可以混合使用。</li></ul><h4 id="having-子句" tabindex="-1"><a class="header-anchor" href="#having-子句"><span><code>HAVING</code> 子句</span></a></h4><ul><li><code>HAVING</code> 子句指定了对聚合结果的筛选条件，由一个 <code>havingCondition</code> 组成。</li><li><code>havingCondition</code> 是一个逻辑表达式，对于要选择的聚合结果，其计算结果为真。如果没有 <code>HAVING</code> 子句，将选择所有聚合结果。</li><li><code>HAVING</code> 要和聚合函数以及 <code>GROUP BY</code> 子句一起使用。</li></ul><h4 id="order-by-子句" tabindex="-1"><a class="header-anchor" href="#order-by-子句"><span><code>ORDER BY</code> 子句</span></a></h4><ul><li><code>ORDER BY</code> 子句用于指定结果集的排序方式。</li><li>按时间对齐模式下：默认按照时间戳大小升序排列，可以通过 <code>ORDER BY TIME DESC</code> 指定结果集按照时间戳大小降序排列。</li><li>按设备对齐模式下：默认按照设备名的字典序升序排列，每个设备内部按照时间戳大小升序排列，可以通过 <code>ORDER BY</code> 子句调整设备列和时间列的排序优先级。</li></ul><h4 id="fill-子句" tabindex="-1"><a class="header-anchor" href="#fill-子句"><span><code>FILL</code> 子句</span></a></h4><ul><li><code>FILL</code> 子句用于指定数据缺失情况下的填充模式，允许用户按照特定的方法对任何查询的结果集填充空值。</li></ul><h4 id="slimit-和-soffset-子句" tabindex="-1"><a class="header-anchor" href="#slimit-和-soffset-子句"><span><code>SLIMIT</code> 和 <code>SOFFSET</code> 子句</span></a></h4><ul><li><code>SLIMIT</code> 指定查询结果的列数，<code>SOFFSET</code> 指定查询结果显示的起始列位置。<code>SLIMIT</code> 和 <code>SOFFSET</code> 仅用于控制值列，对时间列和设备列无效。</li></ul><h4 id="limit-和-offset-子句" tabindex="-1"><a class="header-anchor" href="#limit-和-offset-子句"><span><code>LIMIT</code> 和 <code>OFFSET</code> 子句</span></a></h4><ul><li><code>LIMIT</code> 指定查询结果的行数，<code>OFFSET</code> 指定查询结果显示的起始行位置。</li></ul><h4 id="align-by-子句" tabindex="-1"><a class="header-anchor" href="#align-by-子句"><span><code>ALIGN BY</code> 子句</span></a></h4><ul><li>查询结果集默认<strong>按时间对齐</strong>，包含一列时间列和若干个值列，每一行数据各列的时间戳相同。</li><li>除按时间对齐之外，还支持<strong>按设备对齐</strong>，查询结果集包含一列时间列、一列设备列和若干个值列。</li></ul><h3 id="sql-示例" tabindex="-1"><a class="header-anchor" href="#sql-示例"><span>SQL 示例</span></a></h3><p>IoTDB 支持即席(Ad_hoc)查询，即支持用户在使用系统时，自定义查询条件，根据自己当时的需求写出查询sql并执行。用户可以通过上述介绍的子句，进行组合，指定任意合法的过滤条件来满足当时的查询需求，下面介绍了一些查询的示例：</p><h4 id="示例1-根据一个时间区间选择一列数据" tabindex="-1"><a class="header-anchor" href="#示例1-根据一个时间区间选择一列数据"><span>示例1：根据一个时间区间选择一列数据</span></a></h4><p>SQL 语句为：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其含义为：</p><p>被选择的设备为 ln 集团 wf01 子站 wt01 设备；被选择的时间序列为温度传感器（temperature）；该语句要求选择出该设备在 “2017-11-01T00:08:00.000” 时间点以前的所有温度传感器的值。</p><p>该 SQL 语句的执行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.temperature|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|                        25.96|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|                        24.36|</span></span>
<span class="line"><span>|2017-11-01T00:02:00.000+08:00|                        20.09|</span></span>
<span class="line"><span>|2017-11-01T00:03:00.000+08:00|                        20.18|</span></span>
<span class="line"><span>|2017-11-01T00:04:00.000+08:00|                        21.13|</span></span>
<span class="line"><span>|2017-11-01T00:05:00.000+08:00|                        22.72|</span></span>
<span class="line"><span>|2017-11-01T00:06:00.000+08:00|                        20.71|</span></span>
<span class="line"><span>|2017-11-01T00:07:00.000+08:00|                        21.45|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>Total line number = 8</span></span>
<span class="line"><span>It costs 0.026s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例2-根据一个时间区间选择多列数据" tabindex="-1"><a class="header-anchor" href="#示例2-根据一个时间区间选择多列数据"><span>示例2：根据一个时间区间选择多列数据</span></a></h4><p>SQL 语句为：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#C678DD;"> status</span><span style="color:#ABB2BF;">, temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">05</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其含义为：</p><p>被选择的设备为 ln 集团 wf01 子站 wt01 设备；被选择的时间序列为供电状态（status）和温度传感器（temperature）；该语句要求选择出 “2017-11-01T00:05:00.000” 至 “2017-11-01T00:12:00.000” 之间的所选时间序列的值。</p><p>该 SQL 语句的执行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.status|root.ln.wf01.wt01.temperature|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:06:00.000+08:00|                   false|                        20.71|</span></span>
<span class="line"><span>|2017-11-01T00:07:00.000+08:00|                   false|                        21.45|</span></span>
<span class="line"><span>|2017-11-01T00:08:00.000+08:00|                   false|                        22.58|</span></span>
<span class="line"><span>|2017-11-01T00:09:00.000+08:00|                   false|                        20.98|</span></span>
<span class="line"><span>|2017-11-01T00:10:00.000+08:00|                    true|                        25.52|</span></span>
<span class="line"><span>|2017-11-01T00:11:00.000+08:00|                   false|                        22.91|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>Total line number = 6</span></span>
<span class="line"><span>It costs 0.018s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例3-按照多个时间区间选择同一设备的多列数据" tabindex="-1"><a class="header-anchor" href="#示例3-按照多个时间区间选择同一设备的多列数据"><span>示例3：按照多个时间区间选择同一设备的多列数据</span></a></h4><p>IoTDB 支持在一次查询中指定多个时间区间条件，用户可以根据需求随意组合时间区间条件。例如，</p><p>SQL 语句为：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#C678DD;"> status</span><span style="color:#ABB2BF;">, temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">time</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">05</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">or</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">time</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">35</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其含义为：</p><p>被选择的设备为 ln 集团 wf01 子站 wt01 设备；被选择的时间序列为“供电状态（status）”和“温度传感器（temperature）”；该语句指定了两个不同的时间区间，分别为“2017-11-01T00:05:00.000 至 2017-11-01T00:12:00.000”和“2017-11-01T16:35:00.000 至 2017-11-01T16:37:00.000”；该语句要求选择出满足任一时间区间的被选时间序列的值。</p><p>该 SQL 语句的执行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.status|root.ln.wf01.wt01.temperature|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:06:00.000+08:00|                   false|                        20.71|</span></span>
<span class="line"><span>|2017-11-01T00:07:00.000+08:00|                   false|                        21.45|</span></span>
<span class="line"><span>|2017-11-01T00:08:00.000+08:00|                   false|                        22.58|</span></span>
<span class="line"><span>|2017-11-01T00:09:00.000+08:00|                   false|                        20.98|</span></span>
<span class="line"><span>|2017-11-01T00:10:00.000+08:00|                    true|                        25.52|</span></span>
<span class="line"><span>|2017-11-01T00:11:00.000+08:00|                   false|                        22.91|</span></span>
<span class="line"><span>|2017-11-01T16:35:00.000+08:00|                    true|                        23.44|</span></span>
<span class="line"><span>|2017-11-01T16:36:00.000+08:00|                   false|                        21.98|</span></span>
<span class="line"><span>|2017-11-01T16:37:00.000+08:00|                   false|                        21.93|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>Total line number = 9</span></span>
<span class="line"><span>It costs 0.018s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例4-按照多个时间区间选择不同设备的多列数据" tabindex="-1"><a class="header-anchor" href="#示例4-按照多个时间区间选择不同设备的多列数据"><span>示例4：按照多个时间区间选择不同设备的多列数据</span></a></h4><p>该系统支持在一次查询中选择任意列的数据，也就是说，被选择的列可以来源于不同的设备。例如，SQL 语句为：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#D19A66;"> wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt02</span><span style="color:#ABB2BF;">.hardware </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#C678DD;"> where</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">time</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">05</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">or</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">time</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">35</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其含义为：</p><p>被选择的时间序列为 “ln 集团 wf01 子站 wt01 设备的供电状态” 以及 “ln 集团 wf02 子站 wt02 设备的硬件版本”；该语句指定了两个时间区间，分别为 “2017-11-01T00:05:00.000 至 2017-11-01T00:12:00.000” 和 “2017-11-01T16:35:00.000 至 2017-11-01T16:37:00.000”；该语句要求选择出满足任意时间区间的被选时间序列的值。</p><p>该 SQL 语句的执行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------------+--------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.status|root.ln.wf02.wt02.hardware|</span></span>
<span class="line"><span>+-----------------------------+------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:06:00.000+08:00|                   false|                        v1|</span></span>
<span class="line"><span>|2017-11-01T00:07:00.000+08:00|                   false|                        v1|</span></span>
<span class="line"><span>|2017-11-01T00:08:00.000+08:00|                   false|                        v1|</span></span>
<span class="line"><span>|2017-11-01T00:09:00.000+08:00|                   false|                        v1|</span></span>
<span class="line"><span>|2017-11-01T00:10:00.000+08:00|                    true|                        v2|</span></span>
<span class="line"><span>|2017-11-01T00:11:00.000+08:00|                   false|                        v1|</span></span>
<span class="line"><span>|2017-11-01T16:35:00.000+08:00|                    true|                        v2|</span></span>
<span class="line"><span>|2017-11-01T16:36:00.000+08:00|                   false|                        v1|</span></span>
<span class="line"><span>|2017-11-01T16:37:00.000+08:00|                   false|                        v1|</span></span>
<span class="line"><span>+-----------------------------+------------------------+--------------------------+</span></span>
<span class="line"><span>Total line number = 9</span></span>
<span class="line"><span>It costs 0.014s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例5-根据时间降序返回结果集" tabindex="-1"><a class="header-anchor" href="#示例5-根据时间降序返回结果集"><span>示例5：根据时间降序返回结果集</span></a></h4><p>IoTDB 支持 <code>order by time</code> 语句，用于对结果按照时间进行降序展示。例如，SQL 语句为：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> order by</span><span style="color:#C678DD;"> time</span><span style="color:#C678DD;"> desc</span><span style="color:#C678DD;"> limit</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>语句执行的结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+--------------------------+------------------------+-----------------------------+------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.hardware|root.ln.wf02.wt02.status|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|</span></span>
<span class="line"><span>+-----------------------------+--------------------------+------------------------+-----------------------------+------------------------+</span></span>
<span class="line"><span>|2017-11-07T23:59:00.000+08:00|                        v1|                   false|                        21.07|                   false|</span></span>
<span class="line"><span>|2017-11-07T23:58:00.000+08:00|                        v1|                   false|                        22.93|                   false|</span></span>
<span class="line"><span>|2017-11-07T23:57:00.000+08:00|                        v2|                    true|                        24.39|                    true|</span></span>
<span class="line"><span>|2017-11-07T23:56:00.000+08:00|                        v2|                    true|                        24.44|                    true|</span></span>
<span class="line"><span>|2017-11-07T23:55:00.000+08:00|                        v2|                    true|                         25.9|                    true|</span></span>
<span class="line"><span>|2017-11-07T23:54:00.000+08:00|                        v1|                   false|                        22.52|                   false|</span></span>
<span class="line"><span>|2017-11-07T23:53:00.000+08:00|                        v2|                    true|                        24.58|                    true|</span></span>
<span class="line"><span>|2017-11-07T23:52:00.000+08:00|                        v1|                   false|                        20.18|                   false|</span></span>
<span class="line"><span>|2017-11-07T23:51:00.000+08:00|                        v1|                   false|                        22.24|                   false|</span></span>
<span class="line"><span>|2017-11-07T23:50:00.000+08:00|                        v2|                    true|                         23.7|                    true|</span></span>
<span class="line"><span>+-----------------------------+--------------------------+------------------------+-----------------------------+------------------------+</span></span>
<span class="line"><span>Total line number = 10</span></span>
<span class="line"><span>It costs 0.016s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询执行接口" tabindex="-1"><a class="header-anchor" href="#查询执行接口"><span>查询执行接口</span></a></h3><p>在 IoTDB 中，提供两种方式执行数据查询操作：</p><ul><li>使用 IoTDB-SQL 执行查询。</li><li>常用查询的高效执行接口，包括时间序列原始数据范围查询、最新点查询、简单聚合查询。</li></ul><h4 id="使用-iotdb-sql-执行查询" tabindex="-1"><a class="header-anchor" href="#使用-iotdb-sql-执行查询"><span>使用 IoTDB-SQL 执行查询</span></a></h4><p>数据查询语句支持在 SQL 命令行终端、JDBC、JAVA / C++ / Python / Go 等编程语言 API、RESTful API 中使用。</p>`,69)),a("ul",null,[a("li",null,[a("p",null,[s[1]||(s[1]=n("在 SQL 命令行终端中执行查询语句：启动 SQL 命令行终端，直接输入查询语句执行即可，详见 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/Tools-System/CLI.html"},{default:p(()=>s[0]||(s[0]=[n("SQL 命令行终端")])),_:1}),s[2]||(s[2]=n("。"))])]),a("li",null,[a("p",null,[s[4]||(s[4]=n("在 JDBC 中执行查询语句，详见 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/API/Programming-JDBC.html"},{default:p(()=>s[3]||(s[3]=[n("JDBC")])),_:1}),s[5]||(s[5]=n(" 。"))])]),s[11]||(s[11]=o('<li><p>在 JAVA / C++ / Python / Go 等编程语言 API 中执行查询语句，详见应用编程接口一章相应文档。接口原型如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">SessionDataSet</span><span style="color:#61AFEF;"> executeQueryStatement</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> sql)</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li>',1)),a("li",null,[a("p",null,[s[8]||(s[8]=n("在 RESTful API 中使用，详见 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/API/RestServiceV1.html"},{default:p(()=>s[6]||(s[6]=[n("HTTP API V1")])),_:1}),s[9]||(s[9]=n(" 或者 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/API/RestServiceV2.html"},{default:p(()=>s[7]||(s[7]=[n("HTTP API V2")])),_:1}),s[10]||(s[10]=n("。"))])])]),s[40]||(s[40]=o(`<h4 id="常用查询的高效执行接口" tabindex="-1"><a class="header-anchor" href="#常用查询的高效执行接口"><span>常用查询的高效执行接口</span></a></h4><p>各编程语言的 API 为常用的查询提供了高效执行接口，可以省去 SQL 解析等操作的耗时。包括：</p><ul><li>时间序列原始数据范围查询： <ul><li>指定的查询时间范围为左闭右开区间，包含开始时间但不包含结束时间。</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">SessionDataSet</span><span style="color:#61AFEF;"> executeRawDataQuery</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">String</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> startTime</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> endTime)</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>最新点查询： <ul><li>查询最后一条时间戳大于等于某个时间点的数据。</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">SessionDataSet</span><span style="color:#61AFEF;"> executeLastDataQuery</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">String</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> lastTime)</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>聚合查询： <ul><li>支持指定查询时间范围。指定的查询时间范围为左闭右开区间，包含开始时间但不包含结束时间。</li><li>支持按照时间区间分段查询。</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">SessionDataSet</span><span style="color:#61AFEF;"> executeAggregationQuery</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">String</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Aggregation</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> aggregations)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">SessionDataSet</span><span style="color:#61AFEF;"> executeAggregationQuery</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">String</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Aggregation</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> aggregations</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> startTime</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> endTime)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">SessionDataSet</span><span style="color:#61AFEF;"> executeAggregationQuery</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">String</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Aggregation</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> aggregations</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> startTime</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> endTime</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> interval)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">SessionDataSet</span><span style="color:#61AFEF;"> executeAggregationQuery</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">String</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Aggregation</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> aggregations</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> startTime</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> endTime</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> interval</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> slidingStep)</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择表达式-select-from-子句" tabindex="-1"><a class="header-anchor" href="#选择表达式-select-from-子句"><span>选择表达式（SELECT FROM 子句）</span></a></h2><p><code>SELECT</code> 子句指定查询的输出，由若干个 <code>selectExpr</code> 组成。 每个 <code>selectExpr</code> 定义了查询结果中的一列或多列。</p><p><strong><code>selectExpr</code> 是一个由时间序列路径后缀、常量、函数和运算符组成的表达式。即 <code>selectExpr</code> 中可以包含：</strong></p><ul><li>时间序列路径后缀（支持使用通配符）</li><li>运算符 <ul><li>算数运算符</li><li>比较运算符</li><li>逻辑运算符</li></ul></li><li>函数 <ul><li>聚合函数</li><li>时间序列生成函数（包括内置函数和用户自定义函数）</li></ul></li><li>常量</li></ul><h3 id="使用别名" tabindex="-1"><a class="header-anchor" href="#使用别名"><span>使用别名</span></a></h3><p>由于 IoTDB 独特的数据模型，在每个传感器前都附带有设备等诸多额外信息。有时，我们只针对某个具体设备查询，而这些前缀信息频繁显示造成了冗余，影响了结果集的显示与分析。</p><p>IoTDB 支持使用<code>AS</code>为查询结果集中的列指定别名。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1 </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> temperature, s2 </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> speed </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果集将显示为：</p><table><thead><tr><th>Time</th><th>temperature</th><th>speed</th></tr></thead><tbody><tr><td>...</td><td>...</td><td>...</td></tr></tbody></table><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3>`,20)),a("p",null,[s[13]||(s[13]=n("IoTDB 中支持的运算符列表见文档 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/SQL-Manual/Operator-and-Expression.html"},{default:p(()=>s[12]||(s[12]=[n("运算符和函数")])),_:1}),s[14]||(s[14]=n("。"))]),s[41]||(s[41]=o(`<h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><h4 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数"><span>聚合函数</span></a></h4><p>聚合函数是多对一函数。它们对一组值进行聚合计算，得到单个聚合结果。</p><p><strong>包含聚合函数的查询称为聚合查询</strong>，否则称为时间序列查询。</p><p><strong>注意：聚合查询和时间序列查询不能混合使用。</strong> 下列语句是不支持的：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1;</span></span>
<span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> sin</span><span style="color:#ABB2BF;">(s1), </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1;</span></span>
<span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">),10ms);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),a("p",null,[s[16]||(s[16]=n("IoTDB 支持的聚合函数见文档 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/SQL-Manual/Operator-and-Expression.html#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0"},{default:p(()=>s[15]||(s[15]=[n("聚合函数")])),_:1}),s[17]||(s[17]=n("。"))]),s[42]||(s[42]=a("h4",{id:"时间序列生成函数",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#时间序列生成函数"},[a("span",null,"时间序列生成函数")])],-1)),s[43]||(s[43]=a("p",null,"时间序列生成函数接受若干原始时间序列作为输入，产生一列时间序列输出。与聚合函数不同的是，时间序列生成函数的结果集带有时间戳列。",-1)),s[44]||(s[44]=a("p",null,"所有的时间序列生成函数都可以接受 * 作为输入，都可以与原始时间序列查询混合进行。",-1)),s[45]||(s[45]=a("h5",{id:"内置时间序列生成函数",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#内置时间序列生成函数"},[a("span",null,"内置时间序列生成函数")])],-1)),a("p",null,[s[19]||(s[19]=n("IoTDB 中支持的内置函数列表见文档 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/SQL-Manual/Operator-and-Expression.html"},{default:p(()=>s[18]||(s[18]=[n("运算符和函数")])),_:1}),s[20]||(s[20]=n("。"))]),s[46]||(s[46]=a("h5",{id:"自定义时间序列生成函数",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#自定义时间序列生成函数"},[a("span",null,"自定义时间序列生成函数")])],-1)),a("p",null,[s[22]||(s[22]=n("IoTDB 支持通过用户自定义函数（点击查看： ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/User-Manual/Database-Programming.html#%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0"},{default:p(()=>s[21]||(s[21]=[n("用户自定义函数")])),_:1}),s[23]||(s[23]=n(" ）能力进行函数功能扩展。"))]),s[47]||(s[47]=o(`<h3 id="嵌套表达式举例" tabindex="-1"><a class="header-anchor" href="#嵌套表达式举例"><span>嵌套表达式举例</span></a></h3><p>IoTDB 支持嵌套表达式，由于聚合查询和时间序列查询不能在一条查询语句中同时出现，我们将支持的嵌套表达式分为时间序列查询嵌套表达式和聚合查询嵌套表达式两类。</p><h4 id="时间序列查询嵌套表达式" tabindex="-1"><a class="header-anchor" href="#时间序列查询嵌套表达式"><span>时间序列查询嵌套表达式</span></a></h4><p>IoTDB 支持在 <code>SELECT</code> 子句中计算由<strong>时间序列、常量、时间序列生成函数（包括用户自定义函数）和运算符</strong>组成的任意嵌套表达式。</p><p><strong>说明：</strong></p><ul><li>当某个时间戳下左操作数和右操作数都不为空（<code>null</code>）时，表达式才会有结果，否则表达式值为<code>null</code>，且默认不出现在结果集中。</li><li>如果表达式中某个操作数对应多条时间序列（如通配符 <code>*</code>），那么每条时间序列对应的结果都会出现在结果集中（按照笛卡尔积形式）。</li></ul><p><strong>示例 1：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> a,</span></span>
<span class="line"><span style="color:#ABB2BF;">       b,</span></span>
<span class="line"><span style="color:#ABB2BF;">       ((a + </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) * </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> - </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) % </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#56B6C2;">       sin</span><span style="color:#ABB2BF;">(a + </span><span style="color:#56B6C2;">sin</span><span style="color:#ABB2BF;">(a + </span><span style="color:#56B6C2;">sin</span><span style="color:#ABB2BF;">(b))),</span></span>
<span class="line"><span style="color:#ABB2BF;">       -(a + b) * (</span><span style="color:#56B6C2;">sin</span><span style="color:#ABB2BF;">(a + b) * </span><span style="color:#56B6C2;">sin</span><span style="color:#ABB2BF;">(a + b) + </span><span style="color:#56B6C2;">cos</span><span style="color:#ABB2BF;">(a + b) * </span><span style="color:#56B6C2;">cos</span><span style="color:#ABB2BF;">(a + b)) + </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+----------+----------+----------------------------------------+---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span>
<span class="line"><span>|                         Time|root.sg1.a|root.sg1.b|((((root.sg1.a + 1) * 2) - 1) % 2) + 1.5|sin(root.sg1.a + sin(root.sg1.a + sin(root.sg1.b)))|(-root.sg1.a + root.sg1.b * ((sin(root.sg1.a + root.sg1.b) * sin(root.sg1.a + root.sg1.b)) + (cos(root.sg1.a + root.sg1.b) * cos(root.sg1.a + root.sg1.b)))) + 1|</span></span>
<span class="line"><span>+-----------------------------+----------+----------+----------------------------------------+---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|         1|         1|                                     2.5|                                 0.9238430524420609|                                                                                                                      -1.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|         2|         2|                                     2.5|                                 0.7903505371876317|                                                                                                                      -3.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|         3|         3|                                     2.5|                                0.14065207680386618|                                                                                                                      -5.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|         4|      null|                                     2.5|                                               null|                                                                                                                      null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.050+08:00|      null|         5|                                    null|                                               null|                                                                                                                      null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.060+08:00|         6|         6|                                     2.5|                                -0.7288037411970916|                                                                                                                     -11.0|</span></span>
<span class="line"><span>+-----------------------------+----------+----------+----------------------------------------+---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span>
<span class="line"><span>Total line number = 6</span></span>
<span class="line"><span>It costs 0.048s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> (a + b) * </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> + </span><span style="color:#56B6C2;">sin</span><span style="color:#ABB2BF;">(a) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+----------------------------------------------+</span></span>
<span class="line"><span>|                         Time|((root.sg.a + root.sg.b) * 2) + sin(root.sg.a)|</span></span>
<span class="line"><span>+-----------------------------+----------------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|                             59.45597888911063|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|                            100.91294525072763|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|                            139.01196837590714|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|                            180.74511316047935|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.050+08:00|                            219.73762514629607|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.060+08:00|                             259.6951893788978|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.070+08:00|                             300.7738906815579|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.090+08:00|                             39.45597888911063|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.100+08:00|                             39.45597888911063|</span></span>
<span class="line"><span>+-----------------------------+----------------------------------------------+</span></span>
<span class="line"><span>Total line number = 9</span></span>
<span class="line"><span>It costs 0.011s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> (a + *) / </span><span style="color:#D19A66;">2</span><span style="color:#C678DD;">  from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>|                         Time|(root.sg1.a + root.sg1.a) / 2|(root.sg1.a + root.sg1.b) / 2|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|                          1.0|                          1.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|                          2.0|                          2.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|                          3.0|                          3.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|                          4.0|                         null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.060+08:00|                          6.0|                          6.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>Total line number = 5</span></span>
<span class="line"><span>It costs 0.011s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 4：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> (a + b) * </span><span style="color:#D19A66;">3</span><span style="color:#C678DD;"> from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+---------------------------+---------------------------+---------------------------+---------------------------+</span></span>
<span class="line"><span>|                         Time|(root.sg.a + root.sg.b) * 3|(root.sg.a + root.ln.b) * 3|(root.ln.a + root.sg.b) * 3|(root.ln.a + root.ln.b) * 3|</span></span>
<span class="line"><span>+-----------------------------+---------------------------+---------------------------+---------------------------+---------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|                       90.0|                      270.0|                      360.0|                      540.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|                      150.0|                      330.0|                      690.0|                      870.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|                      210.0|                      450.0|                      570.0|                      810.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|                      270.0|                      240.0|                      690.0|                      660.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.050+08:00|                      330.0|                       null|                       null|                       null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.060+08:00|                      390.0|                       null|                       null|                       null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.070+08:00|                      450.0|                       null|                       null|                       null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.090+08:00|                       60.0|                       null|                       null|                       null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.100+08:00|                       60.0|                       null|                       null|                       null|</span></span>
<span class="line"><span>+-----------------------------+---------------------------+---------------------------+---------------------------+---------------------------+</span></span>
<span class="line"><span>Total line number = 9</span></span>
<span class="line"><span>It costs 0.014s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="聚合查询嵌套表达式" tabindex="-1"><a class="header-anchor" href="#聚合查询嵌套表达式"><span>聚合查询嵌套表达式</span></a></h4><p>IoTDB 支持在 <code>SELECT</code> 子句中计算由<strong>聚合函数、常量、时间序列生成函数和表达式</strong>组成的任意嵌套表达式。</p><p><strong>说明：</strong></p><ul><li>当某个时间戳下左操作数和右操作数都不为空（<code>null</code>）时，表达式才会有结果，否则表达式值为<code>null</code>，且默认不出现在结果集中。但在使用<code>GROUP BY</code>子句的聚合查询嵌套表达式中，我们希望保留每个时间窗口的值，所以表达式值为<code>null</code>的窗口也包含在结果集中。</li><li>如果表达式中某个操作数对应多条时间序列（如通配符<code>*</code>），那么每条时间序列对应的结果都会出现在结果集中（按照笛卡尔积形式）。</li></ul><p><strong>示例 1：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(temperature),</span></span>
<span class="line"><span style="color:#56B6C2;">       sin</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">avg</span><span style="color:#ABB2BF;">(temperature)),</span></span>
<span class="line"><span style="color:#56B6C2;">       avg</span><span style="color:#ABB2BF;">(temperature) + </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">       -</span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(hardware),</span></span>
<span class="line"><span style="color:#56B6C2;">       avg</span><span style="color:#ABB2BF;">(temperature) + </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(hardware)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+----------------------------------+---------------------------------------+--------------------------------------+--------------------------------+--------------------------------------------------------------------+</span></span>
<span class="line"><span>|avg(root.ln.wf01.wt01.temperature)|sin(avg(root.ln.wf01.wt01.temperature))|avg(root.ln.wf01.wt01.temperature) + 1|-sum(root.ln.wf01.wt01.hardware)|avg(root.ln.wf01.wt01.temperature) + sum(root.ln.wf01.wt01.hardware)|</span></span>
<span class="line"><span>+----------------------------------+---------------------------------------+--------------------------------------+--------------------------------+--------------------------------------------------------------------+</span></span>
<span class="line"><span>|                15.927999999999999|                   -0.21826546964855045|                    16.927999999999997|                         -7426.0|                                                            7441.928|</span></span>
<span class="line"><span>+----------------------------------+---------------------------------------+--------------------------------------+--------------------------------+--------------------------------------------------------------------+</span></span>
<span class="line"><span>Total line number = 1</span></span>
<span class="line"><span>It costs 0.009s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(*), </span></span>
<span class="line"><span style="color:#ABB2BF;">	   (</span><span style="color:#56B6C2;">avg</span><span style="color:#ABB2BF;">(*) + </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) * </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> / </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+---------------+---------------+-------------------------------------+-------------------------------------+</span></span>
<span class="line"><span>|avg(root.sg1.a)|avg(root.sg1.b)|(avg(root.sg1.a) + 1) * 3 / 2 - 1    |(avg(root.sg1.b) + 1) * 3 / 2 - 1    |</span></span>
<span class="line"><span>+---------------+---------------+-------------------------------------+-------------------------------------+</span></span>
<span class="line"><span>|            3.2|            3.4|                    5.300000000000001|                   5.6000000000000005|</span></span>
<span class="line"><span>+---------------+---------------+-------------------------------------+-------------------------------------+</span></span>
<span class="line"><span>Total line number = 1</span></span>
<span class="line"><span>It costs 0.007s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(temperature),</span></span>
<span class="line"><span style="color:#56B6C2;">       sin</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">avg</span><span style="color:#ABB2BF;">(temperature)),</span></span>
<span class="line"><span style="color:#56B6C2;">       avg</span><span style="color:#ABB2BF;">(temperature) + </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">       -</span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(hardware),</span></span>
<span class="line"><span style="color:#56B6C2;">       avg</span><span style="color:#ABB2BF;">(temperature) + </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(hardware) </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> custom_sum</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span></span>
<span class="line"><span style="color:#C678DD;">GROUP BY</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">90</span><span style="color:#ABB2BF;">), 10ms);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+----------------------------------+---------------------------------------+--------------------------------------+--------------------------------+----------+</span></span>
<span class="line"><span>|                         Time|avg(root.ln.wf01.wt01.temperature)|sin(avg(root.ln.wf01.wt01.temperature))|avg(root.ln.wf01.wt01.temperature) + 1|-sum(root.ln.wf01.wt01.hardware)|custom_sum|</span></span>
<span class="line"><span>+-----------------------------+----------------------------------+---------------------------------------+--------------------------------------+--------------------------------+----------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|                13.987499999999999|                     0.9888207947857667|                    14.987499999999999|                         -3211.0| 3224.9875|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|                              29.6|                    -0.9701057337071853|                                  30.6|                         -3720.0|    3749.6|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|                              null|                                   null|                                  null|                            null|      null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|                              null|                                   null|                                  null|                            null|      null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.050+08:00|                              null|                                   null|                                  null|                            null|      null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.060+08:00|                              null|                                   null|                                  null|                            null|      null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.070+08:00|                              null|                                   null|                                  null|                            null|      null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.080+08:00|                              null|                                   null|                                  null|                            null|      null|</span></span>
<span class="line"><span>+-----------------------------+----------------------------------+---------------------------------------+--------------------------------------+--------------------------------+----------+</span></span>
<span class="line"><span>Total line number = 8</span></span>
<span class="line"><span>It costs 0.012s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最新点查询" tabindex="-1"><a class="header-anchor" href="#最新点查询"><span>最新点查询</span></a></h3><p>最新点查询是时序数据库 Apache IoTDB 中提供的一种特殊查询。它返回指定时间序列中时间戳最大的数据点，即一条序列的最新状态。</p><p>在物联网数据分析场景中，此功能尤为重要。为了满足了用户对设备实时监控的需求，Apache IoTDB 对最新点查询进行了<strong>缓存优化</strong>，能够提供毫秒级的返回速度。</p><p>SQL 语法：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#C678DD;"> last</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#C678DD;">Path</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> [COMMA &lt;Path&gt;]</span><span style="color:#ABB2BF;">* </span><span style="color:#C678DD;">from</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#ABB2BF;"> PrefixPath </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> [COMMA &lt; PrefixPath &gt;]</span><span style="color:#ABB2BF;">* </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">whereClause</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> [ORDER BY TIMESERIES (DESC | ASC)?]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其含义是： 查询时间序列 prefixPath.path 中最近时间戳的数据。</p><ul><li><p><code>whereClause</code> 中当前只支持时间过滤条件，任何其他过滤条件都将会返回异常。当缓存的最新点不满足过滤条件时，IoTDB 需要从存储中获取结果，此时性能将会有所下降。</p></li><li><p>结果集为四列的结构：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+----+----------+-----+--------+</span></span>
<span class="line"><span>|Time|timeseries|value|dataType|</span></span>
<span class="line"><span>+----+----------+-----+--------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以使用 <code>ORDER BY TIME/TIMESERIES/VALUE/DATATYPE (DESC | ASC)</code> 指定结果集按照某一列进行降序/升序排列。当值列包含多种类型的数据时，按照字符串类型来排序。</p></li></ul><p><strong>示例 1：</strong> 查询 root.ln.wf01.wt01.status 的最新数据点</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select last status from root.ln.wf01.wt01</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----+--------+</span></span>
<span class="line"><span>|                         Time|              timeseries|value|dataType|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----+--------+</span></span>
<span class="line"><span>|2017-11-07T23:59:00.000+08:00|root.ln.wf01.wt01.status|false| BOOLEAN|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----+--------+</span></span>
<span class="line"><span>Total line number = 1</span></span>
<span class="line"><span>It costs 0.000s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong> 查询 root.ln.wf01.wt01 下 status，temperature 时间戳大于等于 2017-11-07T23:50:00 的最新数据点。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select last status, temperature from root.ln.wf01.wt01 where time &gt;= 2017-11-07T23:50:00</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+---------+--------+</span></span>
<span class="line"><span>|                         Time|                   timeseries|    value|dataType|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+---------+--------+</span></span>
<span class="line"><span>|2017-11-07T23:59:00.000+08:00|     root.ln.wf01.wt01.status|    false| BOOLEAN|</span></span>
<span class="line"><span>|2017-11-07T23:59:00.000+08:00|root.ln.wf01.wt01.temperature|21.067368|  DOUBLE|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+---------+--------+</span></span>
<span class="line"><span>Total line number = 2</span></span>
<span class="line"><span>It costs 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong> 查询 root.ln.wf01.wt01 下所有序列的最新数据点，并按照序列名降序排列。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select last * from root.ln.wf01.wt01 order by timeseries desc;</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+---------+--------+</span></span>
<span class="line"><span>|                         Time|                   timeseries|    value|dataType|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+---------+--------+</span></span>
<span class="line"><span>|2017-11-07T23:59:00.000+08:00|root.ln.wf01.wt01.temperature|21.067368|  DOUBLE|</span></span>
<span class="line"><span>|2017-11-07T23:59:00.000+08:00|     root.ln.wf01.wt01.status|    false| BOOLEAN|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+---------+--------+</span></span>
<span class="line"><span>Total line number = 2</span></span>
<span class="line"><span>It costs 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 4：</strong> 查询 root.ln.wf01.wt01 下所有序列的最新数据点，并按照dataType降序排列。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select last * from root.ln.wf01.wt01 order by dataType desc;</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+---------+--------+</span></span>
<span class="line"><span>|                         Time|                   timeseries|    value|dataType|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+---------+--------+</span></span>
<span class="line"><span>|2017-11-07T23:59:00.000+08:00|root.ln.wf01.wt01.temperature|21.067368|  DOUBLE|</span></span>
<span class="line"><span>|2017-11-07T23:59:00.000+08:00|     root.ln.wf01.wt01.status|    false| BOOLEAN|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+---------+--------+</span></span>
<span class="line"><span>Total line number = 2</span></span>
<span class="line"><span>It costs 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询过滤条件-where-子句" tabindex="-1"><a class="header-anchor" href="#查询过滤条件-where-子句"><span>查询过滤条件（WHERE 子句）</span></a></h2><p><code>WHERE</code> 子句指定了对数据行的筛选条件，由一个 <code>whereCondition</code> 组成。</p><p><code>whereCondition</code> 是一个逻辑表达式，对于要选择的每一行，其计算结果为真。如果没有 <code>WHERE</code> 子句，将选择所有行。<br> 在 <code>whereCondition</code> 中，可以使用除聚合函数之外的任何 IOTDB 支持的函数和运算符。</p><p>根据过滤条件的不同，可以分为时间过滤条件和值过滤条件。时间过滤条件和值过滤条件可以混合使用。</p><h3 id="时间过滤条件" tabindex="-1"><a class="header-anchor" href="#时间过滤条件"><span>时间过滤条件</span></a></h3>`,58)),a("p",null,[s[25]||(s[25]=n("使用时间过滤条件可以筛选特定时间范围的数据。对于时间戳支持的格式，请参考 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/Background-knowledge/Data-Type.html"},{default:p(()=>s[24]||(s[24]=[n("时间戳类型")])),_:1}),s[26]||(s[26]=n(" 。"))]),s[48]||(s[48]=o(`<p>示例如下：</p><ol><li><p>选择时间戳大于 2022-01-01T00:05:00.000 的数据：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1 </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 2022</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">01</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">05</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>选择时间戳等于 2022-01-01T00:05:00.000 的数据：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1 </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2022</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">01</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">05</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>选择时间区间 [2017-11-01T00:05:00.000, 2017-11-01T00:12:00.000) 内的数据：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1 </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 2022</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">01</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">05</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>注：在上述示例中，<code>time</code> 也可写做 <code>timestamp</code>。</p><h3 id="值过滤条件" tabindex="-1"><a class="header-anchor" href="#值过滤条件"><span>值过滤条件</span></a></h3><p>使用值过滤条件可以筛选数据值满足特定条件的数据。<br><strong>允许</strong>使用 select 子句中未选择的时间序列作为值过滤条件。</p><p>示例如下：</p><ol><li><p>选择值大于 36.5 的数据：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 36</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>选择值等于 true 的数据：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#C678DD;"> status</span><span style="color:#C678DD;"> from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> status</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> true;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>选择区间 [36.5,40] 内或之外的数据：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">between</span><span style="color:#D19A66;"> 36</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5</span><span style="color:#C678DD;"> and</span><span style="color:#D19A66;"> 40</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">not</span><span style="color:#C678DD;"> between</span><span style="color:#D19A66;"> 36</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5</span><span style="color:#C678DD;"> and</span><span style="color:#D19A66;"> 40</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>选择值在特定范围内的数据：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&#39;200&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;300&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;400&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;500&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>选择值在特定范围外的数据：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">not</span><span style="color:#C678DD;"> in</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&#39;200&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;300&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;400&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;500&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>选择值为空的数据:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">is</span><span style="color:#C678DD;"> null</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>选择值为非空的数据:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">is not null</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询"><span>模糊查询</span></a></h3><p>对于 TEXT 类型的数据，支持使用 <code>Like</code> 和 <code>Regexp</code> 运算符对数据进行模糊匹配</p><h4 id="使用-like-进行模糊匹配" tabindex="-1"><a class="header-anchor" href="#使用-like-进行模糊匹配"><span>使用 <code>Like</code> 进行模糊匹配</span></a></h4><p><strong>匹配规则：</strong></p><ul><li><code>%</code> 表示任意0个或多个字符。</li><li><code>_</code> 表示任意单个字符。</li></ul><p><strong>示例 1：</strong> 查询 <code>root.sg.d1</code> 下 <code>value</code> 含有<code>&#39;cc&#39;</code>的数据。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select * from root.sg.d1 where value like &#39;%cc%&#39;</span></span>
<span class="line"><span>+-----------------------------+----------------+</span></span>
<span class="line"><span>|                         Time|root.sg.d1.value|</span></span>
<span class="line"><span>+-----------------------------+----------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|        aabbccdd| </span></span>
<span class="line"><span>|2017-11-01T00:00:01.000+08:00|              cc|</span></span>
<span class="line"><span>+-----------------------------+----------------+</span></span>
<span class="line"><span>Total line number = 2</span></span>
<span class="line"><span>It costs 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong> 查询 <code>root.sg.d1</code> 下 <code>value</code> 中间为 <code>&#39;b&#39;</code>、前后为任意单个字符的数据。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select * from root.sg.device where value like &#39;_b_&#39;</span></span>
<span class="line"><span>+-----------------------------+----------------+</span></span>
<span class="line"><span>|                         Time|root.sg.d1.value|</span></span>
<span class="line"><span>+-----------------------------+----------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:02.000+08:00|             abc| </span></span>
<span class="line"><span>+-----------------------------+----------------+</span></span>
<span class="line"><span>Total line number = 1</span></span>
<span class="line"><span>It costs 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-regexp-进行模糊匹配" tabindex="-1"><a class="header-anchor" href="#使用-regexp-进行模糊匹配"><span>使用 <code>Regexp</code> 进行模糊匹配</span></a></h4><p>需要传入的过滤条件为 <strong>Java 标准库风格的正则表达式</strong>。</p><p><strong>常见的正则匹配举例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>长度为3-20的所有字符：^.{3,20}$</span></span>
<span class="line"><span>大写英文字符：^[A-Z]+$</span></span>
<span class="line"><span>数字和英文字符：^[A-Za-z0-9]+$</span></span>
<span class="line"><span>以a开头的：^a.*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 1：</strong> 查询 root.sg.d1 下 value 值为26个英文字符组成的字符串。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#E5C07B;"> *</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> root.sg.d1</span><span style="color:#98C379;"> where</span><span style="color:#98C379;"> value</span><span style="color:#98C379;"> regexp</span><span style="color:#98C379;"> &#39;^[A-Za-z]+$&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">+-----------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|                         </span><span style="color:#61AFEF;">Time</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">root.sg.d1.value</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+-----------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:00.000+08:00</span><span style="color:#ABB2BF;">|        </span><span style="color:#61AFEF;">aabbccdd</span><span style="color:#ABB2BF;">| </span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:01.000+08:00</span><span style="color:#ABB2BF;">|              </span><span style="color:#61AFEF;">cc</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+-----------------------------+----------------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong> 查询 root.sg.d1 下 value 值为26个小写英文字符组成的字符串且时间大于100的。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#E5C07B;"> *</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> root.sg.d1</span><span style="color:#98C379;"> where</span><span style="color:#98C379;"> value</span><span style="color:#98C379;"> regexp</span><span style="color:#98C379;"> &#39;^[a-z]+$&#39;</span><span style="color:#98C379;"> and</span><span style="color:#98C379;"> time</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#D19A66;">100</span></span>
<span class="line"><span style="color:#61AFEF;">+-----------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|                         </span><span style="color:#61AFEF;">Time</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">root.sg.d1.value</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+-----------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:00.000+08:00</span><span style="color:#ABB2BF;">|        </span><span style="color:#61AFEF;">aabbccdd</span><span style="color:#ABB2BF;">| </span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:01.000+08:00</span><span style="color:#ABB2BF;">|              </span><span style="color:#61AFEF;">cc</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+-----------------------------+----------------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分段分组聚合-group-by-子句" tabindex="-1"><a class="header-anchor" href="#分段分组聚合-group-by-子句"><span>分段分组聚合（GROUP BY 子句）</span></a></h2><p>IoTDB支持通过<code>GROUP BY</code>子句对序列进行分段或者分组聚合。</p><p>分段聚合是指按照时间维度，针对同时间序列中不同数据点之间的时间关系，对数据在行的方向进行分段，每个段得到一个聚合值。目前支持<strong>时间区间分段</strong>、<strong>差值分段</strong>、<strong>条件分段</strong>、<strong>会话分段</strong>和<strong>点数分段</strong>，未来将支持更多分段方式。</p><p>分组聚合是指针对不同时间序列，在时间序列的潜在业务属性上分组，每个组包含若干条时间序列，每个组得到一个聚合值。支持<strong>按路径层级分组</strong>和<strong>按序列标签分组</strong>两种分组方式。</p><h3 id="分段聚合" tabindex="-1"><a class="header-anchor" href="#分段聚合"><span>分段聚合</span></a></h3><h4 id="时间区间分段聚合" tabindex="-1"><a class="header-anchor" href="#时间区间分段聚合"><span>时间区间分段聚合</span></a></h4><p>时间区间分段聚合是一种时序数据典型的查询方式，数据以高频进行采集，需要按照一定的时间间隔进行聚合计算，如计算每天的平均气温，需要将气温的序列按天进行分段，然后计算平均值。</p><p>在 IoTDB 中，聚合查询可以通过 <code>GROUP BY</code> 子句指定按照时间区间分段聚合。用户可以指定聚合的时间间隔和滑动步长，相关参数如下：</p><ul><li>参数 1：时间轴显示时间窗口大小</li><li>参数 2：聚合窗口的大小（必须为正数）</li><li>参数 3：聚合窗口的滑动步长（可选，默认与聚合窗口大小相同）</li></ul><p>下图中指出了这三个参数的含义：</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/github/69109512-f808bc80-0ab2-11ea-9e4d-b2b2f58fb474.png"><p>接下来，我们给出几个典型例子：</p><h5 id="未指定滑动步长的时间区间分段聚合查询" tabindex="-1"><a class="header-anchor" href="#未指定滑动步长的时间区间分段聚合查询"><span>未指定滑动步长的时间区间分段聚合查询</span></a></h5><p>对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">), max_value(temperature) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-07T23:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">),1d);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询的含义是：</p><p>由于用户没有指定滑动步长，滑动步长将会被默认设置为跟时间间隔参数相同，也就是<code>1d</code>。</p><p>上面这个例子的第一个参数是显示窗口参数，决定了最终的显示范围是 [2017-11-01T00:00:00, 2017-11-07T23:00:00)。</p><p>上面这个例子的第二个参数是划分时间轴的时间间隔参数，将<code>1d</code>当作划分间隔，显示窗口参数的起始时间当作分割原点，时间轴即被划分为连续的时间间隔：[0,1d), [1d, 2d), [2d, 3d) 等等。</p><p>然后系统将会用 WHERE 子句中的时间和值过滤条件以及 GROUP BY 语句中的第一个参数作为数据的联合过滤条件，获得满足所有过滤条件的数据（在这个例子里是在 [2017-11-01T00:00:00, 2017-11-07 T23:00:00) 这个时间范围的数据），并把这些数据映射到之前分割好的时间轴中（这个例子里是从 2017-11-01T00:00:00 到 2017-11-07T23:00:00:00 的每一天）</p><p>每个时间间隔窗口内都有数据，SQL 执行后的结果集如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|                           1440|                                    26.0|</span></span>
<span class="line"><span>|2017-11-02T00:00:00.000+08:00|                           1440|                                    26.0|</span></span>
<span class="line"><span>|2017-11-03T00:00:00.000+08:00|                           1440|                                   25.99|</span></span>
<span class="line"><span>|2017-11-04T00:00:00.000+08:00|                           1440|                                    26.0|</span></span>
<span class="line"><span>|2017-11-05T00:00:00.000+08:00|                           1440|                                    26.0|</span></span>
<span class="line"><span>|2017-11-06T00:00:00.000+08:00|                           1440|                                   25.99|</span></span>
<span class="line"><span>|2017-11-07T00:00:00.000+08:00|                           1380|                                    26.0|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>Total line number = 7</span></span>
<span class="line"><span>It costs 0.024s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="指定滑动步长的时间区间分段聚合查询" tabindex="-1"><a class="header-anchor" href="#指定滑动步长的时间区间分段聚合查询"><span>指定滑动步长的时间区间分段聚合查询</span></a></h5><p>对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">), max_value(temperature) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">01</span><span style="color:#D19A66;"> 00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">07</span><span style="color:#D19A66;"> 23</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">), 3h, 1d);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询的含义是：</p><p>由于用户指定了滑动步长为<code>1d</code>，GROUP BY 语句执行时将会每次把时间间隔往后移动一天的步长，而不是默认的 3 小时。</p><p>也就意味着，我们想要取从 2017-11-01 到 2017-11-07 每一天的凌晨 0 点到凌晨 3 点的数据。</p><p>上面这个例子的第一个参数是显示窗口参数，决定了最终的显示范围是 [2017-11-01T00:00:00, 2017-11-07T23:00:00)。</p><p>上面这个例子的第二个参数是划分时间轴的时间间隔参数，将<code>3h</code>当作划分间隔，显示窗口参数的起始时间当作分割原点，时间轴即被划分为连续的时间间隔：[2017-11-01T00:00:00, 2017-11-01T03:00:00), [2017-11-02T00:00:00, 2017-11-02T03:00:00), [2017-11-03T00:00:00, 2017-11-03T03:00:00) 等等。</p><p>上面这个例子的第三个参数是每次时间间隔的滑动步长。</p><p>然后系统将会用 WHERE 子句中的时间和值过滤条件以及 GROUP BY 语句中的第一个参数作为数据的联合过滤条件，获得满足所有过滤条件的数据（在这个例子里是在 [2017-11-01T00:00:00, 2017-11-07 T23:00:00) 这个时间范围的数据），并把这些数据映射到之前分割好的时间轴中（这个例子里是从 2017-11-01T00:00:00 到 2017-11-07T23:00:00:00 的每一天的凌晨 0 点到凌晨 3 点）</p><p>每个时间间隔窗口内都有数据，SQL 执行后的结果集如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|                            180|                                   25.98|</span></span>
<span class="line"><span>|2017-11-02T00:00:00.000+08:00|                            180|                                   25.98|</span></span>
<span class="line"><span>|2017-11-03T00:00:00.000+08:00|                            180|                                   25.96|</span></span>
<span class="line"><span>|2017-11-04T00:00:00.000+08:00|                            180|                                   25.96|</span></span>
<span class="line"><span>|2017-11-05T00:00:00.000+08:00|                            180|                                    26.0|</span></span>
<span class="line"><span>|2017-11-06T00:00:00.000+08:00|                            180|                                   25.85|</span></span>
<span class="line"><span>|2017-11-07T00:00:00.000+08:00|                            180|                                   25.99|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>Total line number = 7</span></span>
<span class="line"><span>It costs 0.006s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>滑动步长可以小于聚合窗口，此时聚合窗口之间有重叠时间（类似于一个滑动窗口）。</p><p>例如 SQL：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">), max_value(temperature) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">01</span><span style="color:#D19A66;"> 00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">01</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">), 4h, 2h);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>SQL 执行后的结果集如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|                            180|                                   25.98|</span></span>
<span class="line"><span>|2017-11-01T02:00:00.000+08:00|                            180|                                   25.98|</span></span>
<span class="line"><span>|2017-11-01T04:00:00.000+08:00|                            180|                                   25.96|</span></span>
<span class="line"><span>|2017-11-01T06:00:00.000+08:00|                            180|                                   25.96|</span></span>
<span class="line"><span>|2017-11-01T08:00:00.000+08:00|                            180|                                    26.0|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>Total line number = 5</span></span>
<span class="line"><span>It costs 0.006s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="按照自然月份的时间区间分段聚合查询" tabindex="-1"><a class="header-anchor" href="#按照自然月份的时间区间分段聚合查询"><span>按照自然月份的时间区间分段聚合查询</span></a></h5><p>对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T01:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#C678DD;"> group by</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2019</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-07T23:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">), 1mo, 2mo);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询的含义是：</p><p>由于用户指定了滑动步长为<code>2mo</code>，GROUP BY 语句执行时将会每次把时间间隔往后移动 2 个自然月的步长，而不是默认的 1 个自然月。</p><p>也就意味着，我们想要取从 2017-11-01 到 2019-11-07 每 2 个自然月的第一个月的数据。</p><p>上面这个例子的第一个参数是显示窗口参数，决定了最终的显示范围是 [2017-11-01T00:00:00, 2019-11-07T23:00:00)。</p><p>起始时间为 2017-11-01T00:00:00，滑动步长将会以起始时间作为标准按月递增，取当月的 1 号作为时间间隔的起始时间。</p><p>上面这个例子的第二个参数是划分时间轴的时间间隔参数，将<code>1mo</code>当作划分间隔，显示窗口参数的起始时间当作分割原点，时间轴即被划分为连续的时间间隔：[2017-11-01T00:00:00, 2017-12-01T00:00:00), [2018-02-01T00:00:00, 2018-03-01T00:00:00), [2018-05-03T00:00:00, 2018-06-01T00:00:00) 等等。</p><p>上面这个例子的第三个参数是每次时间间隔的滑动步长。</p><p>然后系统将会用 WHERE 子句中的时间和值过滤条件以及 GROUP BY 语句中的第一个参数作为数据的联合过滤条件，获得满足所有过滤条件的数据（在这个例子里是在 [2017-11-01T00:00:00, 2019-11-07T23:00:00) 这个时间范围的数据），并把这些数据映射到之前分割好的时间轴中（这个例子里是从 2017-11-01T00:00:00 到 2019-11-07T23:00:00:00 的每两个自然月的第一个月）</p><p>每个时间间隔窗口内都有数据，SQL 执行后的结果集如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+</span></span>
<span class="line"><span>|                         Time|count(root.ln.wf01.wt01.status)|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|                            259|</span></span>
<span class="line"><span>|2018-01-01T00:00:00.000+08:00|                            250|</span></span>
<span class="line"><span>|2018-03-01T00:00:00.000+08:00|                            259|</span></span>
<span class="line"><span>|2018-05-01T00:00:00.000+08:00|                            251|</span></span>
<span class="line"><span>|2018-07-01T00:00:00.000+08:00|                            242|</span></span>
<span class="line"><span>|2018-09-01T00:00:00.000+08:00|                            225|</span></span>
<span class="line"><span>|2018-11-01T00:00:00.000+08:00|                            216|</span></span>
<span class="line"><span>|2019-01-01T00:00:00.000+08:00|                            207|</span></span>
<span class="line"><span>|2019-03-01T00:00:00.000+08:00|                            216|</span></span>
<span class="line"><span>|2019-05-01T00:00:00.000+08:00|                            207|</span></span>
<span class="line"><span>|2019-07-01T00:00:00.000+08:00|                            199|</span></span>
<span class="line"><span>|2019-09-01T00:00:00.000+08:00|                            181|</span></span>
<span class="line"><span>|2019-11-01T00:00:00.000+08:00|                             60|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> group by</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">-31T00:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2019</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-07T23:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">), 1mo, 2mo);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询的含义是：</p><p>由于用户指定了滑动步长为<code>2mo</code>，GROUP BY 语句执行时将会每次把时间间隔往后移动 2 个自然月的步长，而不是默认的 1 个自然月。</p><p>也就意味着，我们想要取从 2017-10-31 到 2019-11-07 每 2 个自然月的第一个月的数据。</p><p>与上述示例不同的是起始时间为 2017-10-31T00:00:00，滑动步长将会以起始时间作为标准按月递增，取当月的 31 号（即最后一天）作为时间间隔的起始时间。若起始时间设置为 30 号，滑动步长会将时间间隔的起始时间设置为当月 30 号，若不存在则为最后一天。</p><p>上面这个例子的第一个参数是显示窗口参数，决定了最终的显示范围是 [2017-10-31T00:00:00, 2019-11-07T23:00:00)。</p><p>上面这个例子的第二个参数是划分时间轴的时间间隔参数，将<code>1mo</code>当作划分间隔，显示窗口参数的起始时间当作分割原点，时间轴即被划分为连续的时间间隔：[2017-10-31T00:00:00, 2017-11-31T00:00:00), [2018-02-31T00:00:00, 2018-03-31T00:00:00), [2018-05-31T00:00:00, 2018-06-31T00:00:00) 等等。</p><p>上面这个例子的第三个参数是每次时间间隔的滑动步长。</p><p>然后系统将会用 WHERE 子句中的时间和值过滤条件以及 GROUP BY 语句中的第一个参数作为数据的联合过滤条件，获得满足所有过滤条件的数据（在这个例子里是在 [2017-10-31T00:00:00, 2019-11-07T23:00:00) 这个时间范围的数据），并把这些数据映射到之前分割好的时间轴中（这个例子里是从 2017-10-31T00:00:00 到 2019-11-07T23:00:00:00 的每两个自然月的第一个月）</p><p>每个时间间隔窗口内都有数据，SQL 执行后的结果集如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+</span></span>
<span class="line"><span>|                         Time|count(root.ln.wf01.wt01.status)|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+</span></span>
<span class="line"><span>|2017-10-31T00:00:00.000+08:00|                            251|</span></span>
<span class="line"><span>|2017-12-31T00:00:00.000+08:00|                            250|</span></span>
<span class="line"><span>|2018-02-28T00:00:00.000+08:00|                            259|</span></span>
<span class="line"><span>|2018-04-30T00:00:00.000+08:00|                            250|</span></span>
<span class="line"><span>|2018-06-30T00:00:00.000+08:00|                            242|</span></span>
<span class="line"><span>|2018-08-31T00:00:00.000+08:00|                            225|</span></span>
<span class="line"><span>|2018-10-31T00:00:00.000+08:00|                            216|</span></span>
<span class="line"><span>|2018-12-31T00:00:00.000+08:00|                            208|</span></span>
<span class="line"><span>|2019-02-28T00:00:00.000+08:00|                            216|</span></span>
<span class="line"><span>|2019-04-30T00:00:00.000+08:00|                            208|</span></span>
<span class="line"><span>|2019-06-30T00:00:00.000+08:00|                            199|</span></span>
<span class="line"><span>|2019-08-31T00:00:00.000+08:00|                            181|</span></span>
<span class="line"><span>|2019-10-31T00:00:00.000+08:00|                             69|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="左开右闭区间" tabindex="-1"><a class="header-anchor" href="#左开右闭区间"><span>左开右闭区间</span></a></h5><p>每个区间的结果时间戳为区间右端点，对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> group by</span><span style="color:#ABB2BF;"> ((</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-07T23:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">],1d);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询语句的时间区间是左开右闭的，结果中不会包含时间点 2017-11-01 的数据，但是会包含时间点 2017-11-07 的数据。</p><p>SQL 执行后的结果集如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+</span></span>
<span class="line"><span>|                         Time|count(root.ln.wf01.wt01.status)|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+</span></span>
<span class="line"><span>|2017-11-02T00:00:00.000+08:00|                           1440|</span></span>
<span class="line"><span>|2017-11-03T00:00:00.000+08:00|                           1440|</span></span>
<span class="line"><span>|2017-11-04T00:00:00.000+08:00|                           1440|</span></span>
<span class="line"><span>|2017-11-05T00:00:00.000+08:00|                           1440|</span></span>
<span class="line"><span>|2017-11-06T00:00:00.000+08:00|                           1440|</span></span>
<span class="line"><span>|2017-11-07T00:00:00.000+08:00|                           1440|</span></span>
<span class="line"><span>|2017-11-07T23:00:00.000+08:00|                           1380|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+</span></span>
<span class="line"><span>Total line number = 7</span></span>
<span class="line"><span>It costs 0.004s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="差值分段聚合" tabindex="-1"><a class="header-anchor" href="#差值分段聚合"><span>差值分段聚合</span></a></h4><p>IoTDB支持通过<code>GROUP BY VARIATION</code>语句来根据差值进行分组。<code>GROUP BY VARIATION</code>会将第一个点作为一个组的<strong>基准点</strong>，每个新的数据在按照给定规则与基准点进行差值运算后，<br> 如果差值小于给定的阈值则将该新点归于同一组，否则结束当前分组，以这个新的数据为新的基准点开启新的分组。<br> 该分组方式不会重叠，且没有固定的开始结束时间。其子句语法如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> variation(controlExpression</span><span style="color:#E06C75;">[,delta][,ignoreNull=true/false]</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不同的参数含义如下</p><ul><li>controlExpression</li></ul><p>分组所参照的值，<strong>可以是查询数据中的某一列或是多列的表达式<br> （多列表达式计算后仍为一个值，使用多列表达式时指定的列必须都为数值列）</strong>， 差值便是根据数据的controlExpression的差值运算。</p><ul><li>delta</li></ul><p>分组所使用的阈值，同一分组中<strong>每个点的controlExpression对应的值与该组中基准点对应值的差值都小于<code>delta</code></strong>。当<code>delta=0</code>时，相当于一个等值分组，所有连续且expression值相同的数据将被分到一组。</p><ul><li>ignoreNull</li></ul><p>用于指定<code>controlExpression</code>的值为null时对数据的处理方式，当<code>ignoreNull</code>为false时，该null值会被视为新的值，<code>ignoreNull</code>为true时，则直接跳过对应的点。</p><p>在<code>delta</code>取不同值时，<code>controlExpression</code>支持的返回数据类型以及当<code>ignoreNull</code>为false时对于null值的处理方式可以见下表：</p><table><thead><tr><th>delta</th><th>controlExpression支持的返回类型</th><th>ignoreNull=false时对于Null值的处理</th></tr></thead><tbody><tr><td>delta!=0</td><td>INT32、INT64、FLOAT、DOUBLE</td><td>若正在维护分组的值不为null,null视为无穷大/无穷小，结束当前分组。连续的null视为差值相等的值，会被分配在同一个分组</td></tr><tr><td>delta=0</td><td>TEXT、BINARY、INT32、INT64、FLOAT、DOUBLE</td><td>null被视为新分组中的新值，连续的null属于相同的分组</td></tr></tbody></table><p>下图为差值分段的一个分段方式示意图，与组中第一个数据的控制列值的差值在delta内的控制列对应的点属于相同的分组。</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/GroupBy/groupByVariation.jpeg" alt="groupByVariation"><h5 id="使用注意事项" tabindex="-1"><a class="header-anchor" href="#使用注意事项"><span>使用注意事项</span></a></h5><ol><li><code>controlExpression</code>的结果应该为唯一值，如果使用通配符拼接后出现多列，则报错。</li><li>对于一个分组，默认Time列输出分组的开始时间，查询时可以使用select <code>__endTime</code>的方式来使得结果输出分组的结束时间。</li><li>与<code>ALIGN BY DEVICE</code>搭配使用时会对每个device进行单独的分组操作。</li><li>当没有指定<code>delta</code>和<code>ignoreNull</code>时，<code>delta</code>默认为0，<code>ignoreNull</code>默认为true。</li><li>当前暂不支持与<code>GROUP BY LEVEL</code>搭配使用。</li></ol><p>使用如下的原始数据，接下来会给出几个事件分段查询的使用样例</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------+-------+-------+--------+-------+-------+</span></span>
<span class="line"><span>|                         Time|     s1|     s2|     s3|      s4|     s5|     s6|</span></span>
<span class="line"><span>+-----------------------------+-------+-------+-------+--------+-------+-------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00|    4.5|    9.0|    0.0|    45.0|    9.0|   8.25|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|   null|   19.0|   10.0|   145.0|   19.0|   8.25|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|   24.5|   29.0|   null|   245.0|   29.0|   null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|   34.5|   null|   30.0|   345.0|   null|   null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|   44.5|   49.0|   40.0|   445.0|   49.0|   8.25|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.050+08:00|   null|   59.0|   50.0|   545.0|   59.0|   6.25|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.060+08:00|   64.5|   69.0|   60.0|   645.0|   69.0|   null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.070+08:00|   74.5|   79.0|   null|    null|   79.0|   3.25|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.080+08:00|   84.5|   89.0|   80.0|   845.0|   89.0|   3.25|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.090+08:00|   94.5|   99.0|   90.0|   945.0|   99.0|   3.25|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.150+08:00|   66.5|   77.0|   90.0|   945.0|   99.0|   9.25|</span></span>
<span class="line"><span>+-----------------------------+-------+-------+-------+--------+-------+-------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="delta-0时的等值事件分段" tabindex="-1"><a class="header-anchor" href="#delta-0时的等值事件分段"><span>delta=0时的等值事件分段</span></a></h5><p>使用如下sql语句</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> __endTime, </span><span style="color:#56B6C2;">avg</span><span style="color:#ABB2BF;">(s1), </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s2), </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(s3) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> variation(s6)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下的查询结果，这里忽略了s6为null的行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span>
<span class="line"><span>|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.040+08:00|             24.5|                  3|             50.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.050+08:00|1970-01-01T08:00:00.050+08:00|             null|                  1|             50.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.090+08:00|             84.5|                  3|            170.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.150+08:00|1970-01-01T08:00:00.150+08:00|             66.5|                  1|             90.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当指定ignoreNull为false时，会将s6为null的数据也考虑进来</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> __endTime, </span><span style="color:#56B6C2;">avg</span><span style="color:#ABB2BF;">(s1), </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s2), </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(s3) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> variation(s6, ignoreNull</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">false)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下的结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span>
<span class="line"><span>|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.010+08:00|              4.5|                  2|             10.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|1970-01-01T08:00:00.030+08:00|             29.5|                  1|             30.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|1970-01-01T08:00:00.040+08:00|             44.5|                  1|             40.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.050+08:00|1970-01-01T08:00:00.050+08:00|             null|                  1|             50.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.060+08:00|1970-01-01T08:00:00.060+08:00|             64.5|                  1|             60.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.090+08:00|             84.5|                  3|            170.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.150+08:00|1970-01-01T08:00:00.150+08:00|             66.5|                  1|             90.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="delta-0时的差值事件分段" tabindex="-1"><a class="header-anchor" href="#delta-0时的差值事件分段"><span>delta!=0时的差值事件分段</span></a></h5><p>使用如下sql语句</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> __endTime, </span><span style="color:#56B6C2;">avg</span><span style="color:#ABB2BF;">(s1), </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s2), </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(s3) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> variation(s6, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下的查询结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span>
<span class="line"><span>|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.050+08:00|             24.5|                  4|            100.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.090+08:00|             84.5|                  3|            170.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.150+08:00|1970-01-01T08:00:00.150+08:00|             66.5|                  1|             90.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>group by子句中的controlExpression同样支持列的表达式</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> __endTime, </span><span style="color:#56B6C2;">avg</span><span style="color:#ABB2BF;">(s1), </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s2), </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(s3) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> variation(s6+s5, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下的查询结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span>
<span class="line"><span>|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.010+08:00|              4.5|                  2|             10.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|1970-01-01T08:00:00.050+08:00|             44.5|                  2|             90.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.080+08:00|             79.5|                  2|             80.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.090+08:00|1970-01-01T08:00:00.150+08:00|             80.5|                  2|            180.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件分段聚合" tabindex="-1"><a class="header-anchor" href="#条件分段聚合"><span>条件分段聚合</span></a></h4><p>当需要根据指定条件对数据进行筛选，并将连续的符合条件的行分为一组进行聚合运算时，可以使用<code>GROUP BY CONDITION</code>的分段方式；不满足给定条件的行因为不属于任何分组会被直接简单忽略。<br> 其语法定义如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> condition(predict,</span><span style="color:#E06C75;">[keep&gt;/&gt;=/=/&lt;=/&lt;]</span><span style="color:#ABB2BF;">threshold,</span><span style="color:#E06C75;">[,ignoreNull=true/false]</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>predict</li></ul><p>返回boolean数据类型的合法表达式，用于分组的筛选。</p><ul><li>keep[&gt;/&gt;=/=/&lt;=/&lt;]threshold</li></ul><p>keep表达式用来指定形成分组所需要连续满足<code>predict</code>条件的数据行数，只有行数满足keep表达式的分组才会被输出。keep表达式由一个&#39;keep&#39;字符串和<code>long</code>类型的threshold组合或者是单独的<code>long</code>类型数据构成。</p><ul><li>ignoreNull=true/false</li></ul><p>用于指定遇到predict为null的数据行时的处理方式，为true则跳过该行，为false则结束当前分组。</p><h5 id="使用注意事项-1" tabindex="-1"><a class="header-anchor" href="#使用注意事项-1"><span>使用注意事项</span></a></h5><ol><li>keep条件在查询中是必需的，但可以省略掉keep字符串给出一个<code>long</code>类型常数，默认为<code>keep=该long型常数</code>的等于条件。</li><li><code>ignoreNull</code>默认为true。</li><li>对于一个分组，默认Time列输出分组的开始时间，查询时可以使用select <code>__endTime</code>的方式来使得结果输出分组的结束时间。</li><li>与<code>ALIGN BY DEVICE</code>搭配使用时会对每个device进行单独的分组操作。</li><li>当前暂不支持与<code>GROUP BY LEVEL</code>搭配使用。</li></ol><p>对于如下原始数据,下面会给出几个查询样例:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------+-------------------------------------+------------------------------------+</span></span>
<span class="line"><span>|                         Time|root.sg.beijing.car01.soc|root.sg.beijing.car01.charging_status|root.sg.beijing.car01.vehicle_status|</span></span>
<span class="line"><span>+-----------------------------+-------------------------+-------------------------------------+------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|                     14.0|                                    1|                                   1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|                     16.0|                                    1|                                   1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00|                     16.0|                                    0|                                   1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.004+08:00|                     16.0|                                    0|                                   1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|                     18.0|                                    1|                                   1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.006+08:00|                     24.0|                                    1|                                   1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.007+08:00|                     36.0|                                    1|                                   1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.008+08:00|                     36.0|                                 null|                                   1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.009+08:00|                     45.0|                                    1|                                   1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|                     60.0|                                    1|                                   1|</span></span>
<span class="line"><span>+-----------------------------+-------------------------+-------------------------------------+------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询至少连续两行以上的charging_status=1的数据，sql语句如下:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> max_time(charging_status),</span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(vehicle_status),</span><span style="color:#56B6C2;">last_value</span><span style="color:#ABB2BF;">(soc) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> condition(charging_status</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">KEEP</span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,ignoreNull</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">true)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span></span>
<span class="line"><span>|                         Time|max_time(root.sg.beijing.car01.charging_status)|count(root.sg.beijing.car01.vehicle_status)|last_value(root.sg.beijing.car01.soc)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|                                              2|                                          2|                                 16.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|                                             10|                                          5|                                 60.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当设置<code>ignoreNull</code>为false时，遇到null值为将其视为一个不满足条件的行，会结束正在计算的分组。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> max_time(charging_status),</span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(vehicle_status),</span><span style="color:#56B6C2;">last_value</span><span style="color:#ABB2BF;">(soc) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> condition(charging_status</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">KEEP</span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,ignoreNull</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">false)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果，原先的分组被含null的行拆分:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span></span>
<span class="line"><span>|                         Time|max_time(root.sg.beijing.car01.charging_status)|count(root.sg.beijing.car01.vehicle_status)|last_value(root.sg.beijing.car01.soc)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|                                              2|                                          2|                                 16.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|                                              7|                                          3|                                 36.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.009+08:00|                                             10|                                          2|                                 60.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="会话分段聚合" tabindex="-1"><a class="header-anchor" href="#会话分段聚合"><span>会话分段聚合</span></a></h4><p><code>GROUP BY SESSION</code>可以根据时间列的间隔进行分组，在结果集的时间列中，时间间隔小于等于设定阈值的数据会被分为一组。例如在工业场景中，设备并不总是连续运行，<code>GROUP BY SESSION</code>会将设备每次接入会话所产生的数据分为一组。<br> 其语法定义如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">group by</span><span style="color:#C678DD;"> session</span><span style="color:#ABB2BF;">(timeInterval)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>timeInterval</li></ul><p>设定的时间差阈值，当两条数据时间列的差值大于该阈值，则会给数据创建一个新的分组。</p><p>下图为<code>group by session</code>下的一个分组示意图</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/GroupBy/groupBySession.jpeg"><h5 id="使用注意事项-2" tabindex="-1"><a class="header-anchor" href="#使用注意事项-2"><span>使用注意事项</span></a></h5><ol><li>对于一个分组，默认Time列输出分组的开始时间，查询时可以使用select <code>__endTime</code>的方式来使得结果输出分组的结束时间。</li><li>与<code>ALIGN BY DEVICE</code>搭配使用时会对每个device进行单独的分组操作。</li><li>当前暂不支持与<code>GROUP BY LEVEL</code>搭配使用。</li></ol><p>对于下面的原始数据，给出几个查询样例。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------+-----------+--------+------+</span></span>
<span class="line"><span>|                         Time|           Device|temperature|hardware|status|</span></span>
<span class="line"><span>+-----------------------------+-----------------+-----------+--------+------+</span></span>
<span class="line"><span>|1970-01-01T08:00:01.000+08:00|root.ln.wf02.wt01|       35.7|      11| false|</span></span>
<span class="line"><span>|1970-01-01T08:00:02.000+08:00|root.ln.wf02.wt01|       35.8|      22|  true|</span></span>
<span class="line"><span>|1970-01-01T08:00:03.000+08:00|root.ln.wf02.wt01|       35.4|      33| false|</span></span>
<span class="line"><span>|1970-01-01T08:00:04.000+08:00|root.ln.wf02.wt01|       36.4|      44| false|</span></span>
<span class="line"><span>|1970-01-01T08:00:05.000+08:00|root.ln.wf02.wt01|       36.8|      55| false|</span></span>
<span class="line"><span>|1970-01-01T08:00:10.000+08:00|root.ln.wf02.wt01|       36.8|     110| false|</span></span>
<span class="line"><span>|1970-01-01T08:00:20.000+08:00|root.ln.wf02.wt01|       37.8|     220|  true|</span></span>
<span class="line"><span>|1970-01-01T08:00:30.000+08:00|root.ln.wf02.wt01|       37.5|     330| false|</span></span>
<span class="line"><span>|1970-01-01T08:00:40.000+08:00|root.ln.wf02.wt01|       37.4|     440| false|</span></span>
<span class="line"><span>|1970-01-01T08:00:50.000+08:00|root.ln.wf02.wt01|       37.9|     550| false|</span></span>
<span class="line"><span>|1970-01-01T08:01:40.000+08:00|root.ln.wf02.wt01|       38.0|     110| false|</span></span>
<span class="line"><span>|1970-01-01T08:02:30.000+08:00|root.ln.wf02.wt01|       38.8|     220|  true|</span></span>
<span class="line"><span>|1970-01-01T08:03:20.000+08:00|root.ln.wf02.wt01|       38.6|     330| false|</span></span>
<span class="line"><span>|1970-01-01T08:04:20.000+08:00|root.ln.wf02.wt01|       38.4|     440| false|</span></span>
<span class="line"><span>|1970-01-01T08:05:20.000+08:00|root.ln.wf02.wt01|       38.3|     550| false|</span></span>
<span class="line"><span>|1970-01-01T08:06:40.000+08:00|root.ln.wf02.wt01|       null|       0|  null|</span></span>
<span class="line"><span>|1970-01-01T08:07:50.000+08:00|root.ln.wf02.wt01|       null|       0|  null|</span></span>
<span class="line"><span>|1970-01-01T08:08:00.000+08:00|root.ln.wf02.wt01|       null|       0|  null|</span></span>
<span class="line"><span>|1970-01-02T08:08:01.000+08:00|root.ln.wf02.wt01|       38.2|     110| false|</span></span>
<span class="line"><span>|1970-01-02T08:08:02.000+08:00|root.ln.wf02.wt01|       37.5|     220|  true|</span></span>
<span class="line"><span>|1970-01-02T08:08:03.000+08:00|root.ln.wf02.wt01|       37.4|     330| false|</span></span>
<span class="line"><span>|1970-01-02T08:08:04.000+08:00|root.ln.wf02.wt01|       36.8|     440| false|</span></span>
<span class="line"><span>|1970-01-02T08:08:05.000+08:00|root.ln.wf02.wt01|       37.4|     550| false|</span></span>
<span class="line"><span>+-----------------------------+-----------------+-----------+--------+------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以按照不同的时间单位设定时间间隔，sql语句如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> __endTime,</span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(*) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#C678DD;"> session</span><span style="color:#ABB2BF;">(1d)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+------------------------------------+---------------------------------+-------------------------------+</span></span>
<span class="line"><span>|                         Time|                    __endTime|count(root.ln.wf02.wt01.temperature)|count(root.ln.wf02.wt01.hardware)|count(root.ln.wf02.wt01.status)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+------------------------------------+---------------------------------+-------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:01.000+08:00|1970-01-01T08:08:00.000+08:00|                                  15|                               18|                             15|</span></span>
<span class="line"><span>|1970-01-02T08:08:01.000+08:00|1970-01-02T08:08:05.000+08:00|                                   5|                                5|                              5|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+------------------------------------+---------------------------------+-------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以和<code>HAVING</code>、<code>ALIGN BY DEVICE</code>共同使用</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> __endTime,</span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(hardware) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf02</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> group by</span><span style="color:#C678DD;"> session</span><span style="color:#ABB2BF;">(50s) </span><span style="color:#C678DD;">having</span><span style="color:#56B6C2;"> sum</span><span style="color:#ABB2BF;">(hardware)</span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果，其中排除了<code>sum(hardware)</code>为0的部分</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------+-----------------------------+-------------+</span></span>
<span class="line"><span>|                         Time|           Device|                    __endTime|sum(hardware)|</span></span>
<span class="line"><span>+-----------------------------+-----------------+-----------------------------+-------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:01.000+08:00|root.ln.wf02.wt01|1970-01-01T08:03:20.000+08:00|       2475.0|</span></span>
<span class="line"><span>|1970-01-01T08:04:20.000+08:00|root.ln.wf02.wt01|1970-01-01T08:04:20.000+08:00|        440.0|</span></span>
<span class="line"><span>|1970-01-01T08:05:20.000+08:00|root.ln.wf02.wt01|1970-01-01T08:05:20.000+08:00|        550.0|</span></span>
<span class="line"><span>|1970-01-02T08:08:01.000+08:00|root.ln.wf02.wt01|1970-01-02T08:08:05.000+08:00|       1650.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------+-----------------------------+-------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="点数分段聚合" tabindex="-1"><a class="header-anchor" href="#点数分段聚合"><span>点数分段聚合</span></a></h4><p><code>GROUP BY COUNT</code>可以根据点数分组进行聚合运算，将连续的指定数量数据点分为一组，即按照固定的点数进行分组。<br> 其语法定义如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">group by</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(controlExpression, </span><span style="color:#C678DD;">size</span><span style="color:#E06C75;">[,ignoreNull=true/false]</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>controlExpression</li></ul><p>计数参照的对象，可以是结果集的任意列或是列的表达式</p><ul><li>size</li></ul><p>一个组中数据点的数量，每<code>size</code>个数据点会被分到同一个组</p><ul><li>ignoreNull=true/false</li></ul><p>是否忽略<code>controlExpression</code>为null的数据点，当ignoreNull为true时，在计数时会跳过<code>controlExpression</code>结果为null的数据点</p><h5 id="使用注意事项-3" tabindex="-1"><a class="header-anchor" href="#使用注意事项-3"><span>使用注意事项</span></a></h5><ol><li>对于一个分组，默认Time列输出分组的开始时间，查询时可以使用select <code>__endTime</code>的方式来使得结果输出分组的结束时间。</li><li>与<code>ALIGN BY DEVICE</code>搭配使用时会对每个device进行单独的分组操作。</li><li>当前暂不支持与<code>GROUP BY LEVEL</code>搭配使用。</li><li>当一个分组内最终的点数不满足<code>size</code>的数量时，不会输出该分组的结果</li></ol><p>对于下面的原始数据，给出几个查询样例。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------+-----------------------+</span></span>
<span class="line"><span>|                         Time|root.sg.soc|root.sg.charging_status|</span></span>
<span class="line"><span>+-----------------------------+-----------+-----------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|       14.0|                      1|                                   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|       16.0|                      1|                                 </span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00|       16.0|                      0|                                   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.004+08:00|       16.0|                      0|                                   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|       18.0|                      1|                                   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.006+08:00|       24.0|                      1|                                   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.007+08:00|       36.0|                      1|                                   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.008+08:00|       36.0|                   null|                                   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.009+08:00|       45.0|                      1|                                   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|       60.0|                      1|</span></span>
<span class="line"><span>+-----------------------------+-----------+-----------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sql语句如下</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(charging_stauts), </span><span style="color:#56B6C2;">first_value</span><span style="color:#ABB2BF;">(soc) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#C678DD;"> group by</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(charging_status,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果，其中由于第二个1970-01-01T08:00:00.006+08:00到1970-01-01T08:00:00.010+08:00的窗口中包含四个点，不符合<code>size = 5</code>的条件，因此不被输出</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+--------------------------------------+</span></span>
<span class="line"><span>|                         Time|                    __endTime|first_value(root.sg.beijing.car01.soc)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+--------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|1970-01-01T08:00:00.005+08:00|                                  14.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+--------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而当使用ignoreNull将null值也考虑进来时，可以得到两个点计数为5的窗口，sql如下</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(charging_stauts), </span><span style="color:#56B6C2;">first_value</span><span style="color:#ABB2BF;">(soc) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#C678DD;"> group by</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(charging_status,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,ignoreNull</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">false)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+--------------------------------------+</span></span>
<span class="line"><span>|                         Time|                    __endTime|first_value(root.sg.beijing.car01.soc)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+--------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|1970-01-01T08:00:00.005+08:00|                                  14.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.006+08:00|1970-01-01T08:00:00.010+08:00|                                  24.0|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+--------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分组聚合" tabindex="-1"><a class="header-anchor" href="#分组聚合"><span>分组聚合</span></a></h3><h4 id="路径层级分组聚合" tabindex="-1"><a class="header-anchor" href="#路径层级分组聚合"><span>路径层级分组聚合</span></a></h4><p>在时间序列层级结构中，路径层级分组聚合查询用于<strong>对某一层级下同名的序列进行聚合查询</strong>。</p><ul><li>使用 <code>GROUP BY LEVEL = INT</code> 来指定需要聚合的层级，并约定 <code>ROOT</code> 为第 0 层。若统计 &quot;root.ln&quot; 下所有序列则需指定 level 为 1。</li><li>路径层次分组聚合查询支持使用所有内置聚合函数。对于 <code>sum</code>，<code>avg</code>，<code>min_value</code>， <code>max_value</code>， <code>extreme</code> 五种聚合函数，需保证所有聚合的时间序列数据类型相同。其他聚合函数没有此限制。</li></ul><p><strong>示例1：</strong> 不同 database 下均存在名为 status 的序列， 如 &quot;root.ln.wf01.wt01.status&quot;, &quot;root.ln.wf02.wt02.status&quot;, 以及 &quot;root.sgcc.wf03.wt01.status&quot;, 如果需要统计不同 database 下 status 序列的数据点个数，使用以下查询：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#C678DD;"> level</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-------------------------+---------------------------+</span></span>
<span class="line"><span>|count(root.ln.*.*.status)|count(root.sgcc.*.*.status)|</span></span>
<span class="line"><span>+-------------------------+---------------------------+</span></span>
<span class="line"><span>|                    20160|                      10080|</span></span>
<span class="line"><span>+-------------------------+---------------------------+</span></span>
<span class="line"><span>Total line number = 1</span></span>
<span class="line"><span>It costs 0.003s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例2：</strong> 统计不同设备下 status 序列的数据点个数，可以规定 level = 3，</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#C678DD;"> level</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+---------------------------+---------------------------+</span></span>
<span class="line"><span>|count(root.*.*.wt01.status)|count(root.*.*.wt02.status)|</span></span>
<span class="line"><span>+---------------------------+---------------------------+</span></span>
<span class="line"><span>|                      20160|                      10080|</span></span>
<span class="line"><span>+---------------------------+---------------------------+</span></span>
<span class="line"><span>Total line number = 1</span></span>
<span class="line"><span>It costs 0.003s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这时会将 database <code>ln</code> 和 <code>sgcc</code> 下名为 <code>wt01</code> 的设备视为同名设备聚合在一起。</p><p><strong>示例3：</strong> 统计不同 database 下的不同设备中 status 序列的数据点个数，可以使用以下查询：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#C678DD;"> level</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+----------------------------+----------------------------+------------------------------+</span></span>
<span class="line"><span>|count(root.ln.*.wt01.status)|count(root.ln.*.wt02.status)|count(root.sgcc.*.wt01.status)|</span></span>
<span class="line"><span>+----------------------------+----------------------------+------------------------------+</span></span>
<span class="line"><span>|                       10080|                       10080|                         10080|</span></span>
<span class="line"><span>+----------------------------+----------------------------+------------------------------+</span></span>
<span class="line"><span>Total line number = 1</span></span>
<span class="line"><span>It costs 0.003s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例4：</strong> 查询所有序列下温度传感器 temperature 的最大值，可以使用下列查询语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> max_value(temperature) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#C678DD;"> level</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+---------------------------------+</span></span>
<span class="line"><span>|max_value(root.*.*.*.temperature)|</span></span>
<span class="line"><span>+---------------------------------+</span></span>
<span class="line"><span>|                             26.0|</span></span>
<span class="line"><span>+---------------------------------+</span></span>
<span class="line"><span>Total line number = 1</span></span>
<span class="line"><span>It costs 0.013s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例5：</strong> 上面的查询都是针对某一个传感器，特别地，<strong>如果想要查询某一层级下所有传感器拥有的总数据点数，则需要显式规定测点为 <code>*</code></strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(*) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#C678DD;"> level</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+----------------------+----------------------+</span></span>
<span class="line"><span>|count(root.*.wf01.*.*)|count(root.*.wf02.*.*)|</span></span>
<span class="line"><span>+----------------------+----------------------+</span></span>
<span class="line"><span>|                 20160|                 20160|</span></span>
<span class="line"><span>+----------------------+----------------------+</span></span>
<span class="line"><span>Total line number = 1</span></span>
<span class="line"><span>It costs 0.013s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="与时间区间分段聚合混合使用" tabindex="-1"><a class="header-anchor" href="#与时间区间分段聚合混合使用"><span>与时间区间分段聚合混合使用</span></a></h5><p>通过定义 LEVEL 来统计指定层级下的数据点个数。</p><p>例如：</p><p>统计降采样后的数据点个数</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> group by</span><span style="color:#ABB2BF;"> ((</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-07T23:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">],1d), </span><span style="color:#C678DD;">level</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------+</span></span>
<span class="line"><span>|                         Time|COUNT(root.ln.*.*.status)|</span></span>
<span class="line"><span>+-----------------------------+-------------------------+</span></span>
<span class="line"><span>|2017-11-02T00:00:00.000+08:00|                     1440|</span></span>
<span class="line"><span>|2017-11-03T00:00:00.000+08:00|                     1440|</span></span>
<span class="line"><span>|2017-11-04T00:00:00.000+08:00|                     1440|</span></span>
<span class="line"><span>|2017-11-05T00:00:00.000+08:00|                     1440|</span></span>
<span class="line"><span>|2017-11-06T00:00:00.000+08:00|                     1440|</span></span>
<span class="line"><span>|2017-11-07T00:00:00.000+08:00|                     1440|</span></span>
<span class="line"><span>|2017-11-07T23:00:00.000+08:00|                     1380|</span></span>
<span class="line"><span>+-----------------------------+-------------------------+</span></span>
<span class="line"><span>Total line number = 7</span></span>
<span class="line"><span>It costs 0.006s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上滑动 Step 的降采样后的结果也可以汇总</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">status</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">01</span><span style="color:#D19A66;"> 00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">07</span><span style="color:#D19A66;"> 23</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">), 3h, 1d), </span><span style="color:#C678DD;">level</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------+</span></span>
<span class="line"><span>|                         Time|COUNT(root.ln.*.*.status)|</span></span>
<span class="line"><span>+-----------------------------+-------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|                      180|</span></span>
<span class="line"><span>|2017-11-02T00:00:00.000+08:00|                      180|</span></span>
<span class="line"><span>|2017-11-03T00:00:00.000+08:00|                      180|</span></span>
<span class="line"><span>|2017-11-04T00:00:00.000+08:00|                      180|</span></span>
<span class="line"><span>|2017-11-05T00:00:00.000+08:00|                      180|</span></span>
<span class="line"><span>|2017-11-06T00:00:00.000+08:00|                      180|</span></span>
<span class="line"><span>|2017-11-07T00:00:00.000+08:00|                      180|</span></span>
<span class="line"><span>+-----------------------------+-------------------------+</span></span>
<span class="line"><span>Total line number = 7</span></span>
<span class="line"><span>It costs 0.004s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="标签分组聚合" tabindex="-1"><a class="header-anchor" href="#标签分组聚合"><span>标签分组聚合</span></a></h4><p>IoTDB 支持通过 <code>GROUP BY TAGS</code> 语句根据时间序列中定义的标签的键值做分组聚合查询。</p><p>我们先在 IoTDB 中写入如下示例数据，稍后会以这些数据为例介绍标签聚合查询。</p><p>这些是某工厂 <code>factory1</code> 在多个城市的多个车间的设备温度数据， 时间范围为 [1000, 10000)。</p><p>时间序列路径中的设备一级是设备唯一标识。城市信息 <code>city</code> 和车间信息 <code>workshop</code> 则被建模在该设备时间序列的标签中。<br> 其中，设备 <code>d1</code>、<code>d2</code> 在 <code>Beijing</code> 的 <code>w1</code> 车间， <code>d3</code>、<code>d4</code> 在 <code>Beijing</code> 的 <code>w2</code> 车间，<code>d5</code>、<code>d6</code> 在 <code>Shanghai</code> 的 <code>w1</code> 车间，<code>d7</code> 在 <code>Shanghai</code> 的 <code>w2</code> 车间。<br><code>d8</code> 和 <code>d9</code> 设备目前处于调试阶段，还未被分配到具体的城市和车间，所以其相应的标签值为空值。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">create</span><span style="color:#C678DD;"> database</span><span style="color:#61AFEF;"> root</span><span style="color:#ABB2BF;">.factory1;</span></span>
<span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> timeseries </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">d1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">temperature</span><span style="color:#C678DD;"> with</span><span style="color:#ABB2BF;"> datatype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">FLOAT</span><span style="color:#ABB2BF;"> tags(city</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">Beijing, workshop</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">w1);</span></span>
<span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> timeseries </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">d2</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">temperature</span><span style="color:#C678DD;"> with</span><span style="color:#ABB2BF;"> datatype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">FLOAT</span><span style="color:#ABB2BF;"> tags(city</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">Beijing, workshop</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">w1);</span></span>
<span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> timeseries </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">d3</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">temperature</span><span style="color:#C678DD;"> with</span><span style="color:#ABB2BF;"> datatype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">FLOAT</span><span style="color:#ABB2BF;"> tags(city</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">Beijing, workshop</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">w2);</span></span>
<span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> timeseries </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">d4</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">temperature</span><span style="color:#C678DD;"> with</span><span style="color:#ABB2BF;"> datatype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">FLOAT</span><span style="color:#ABB2BF;"> tags(city</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">Beijing, workshop</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">w2);</span></span>
<span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> timeseries </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">d5</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">temperature</span><span style="color:#C678DD;"> with</span><span style="color:#ABB2BF;"> datatype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">FLOAT</span><span style="color:#ABB2BF;"> tags(city</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">Shanghai, workshop</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">w1);</span></span>
<span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> timeseries </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">d6</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">temperature</span><span style="color:#C678DD;"> with</span><span style="color:#ABB2BF;"> datatype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">FLOAT</span><span style="color:#ABB2BF;"> tags(city</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">Shanghai, workshop</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">w1);</span></span>
<span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> timeseries </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">d7</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">temperature</span><span style="color:#C678DD;"> with</span><span style="color:#ABB2BF;"> datatype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">FLOAT</span><span style="color:#ABB2BF;"> tags(city</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">Shanghai, workshop</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">w2);</span></span>
<span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> timeseries </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">d8</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">temperature</span><span style="color:#C678DD;"> with</span><span style="color:#ABB2BF;"> datatype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">FLOAT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> timeseries </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">d9</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">temperature</span><span style="color:#C678DD;"> with</span><span style="color:#ABB2BF;"> datatype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">FLOAT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d1(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">104</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d1(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">104</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d1(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">103</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d1(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">104</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d2(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">104</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d2(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">103</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d2(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">103</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d2(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">102</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d3(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">103</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d3(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">103</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d3(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">102</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d3(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">106</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d4(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">103</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d4(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">102</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d4(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">106</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d5(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">112</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d5(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">113</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d6(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">113</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d6(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">113</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d6(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">112</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d6(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">112</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d7(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">101</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d7(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">99</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d7(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d7(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">99</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d8(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d8(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">52</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d8(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d8(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d9(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.d9(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, temperature) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">52</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="单标签聚合查询" tabindex="-1"><a class="header-anchor" href="#单标签聚合查询"><span>单标签聚合查询</span></a></h5><p>用户想统计该工厂每个地区的设备的温度的平均值，可以使用如下查询语句</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#56B6C2;"> AVG</span><span style="color:#ABB2BF;">(temperature) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">GROUP BY</span><span style="color:#ABB2BF;"> TAGS(city);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该查询会将具有同一个 <code>city</code> 标签值的时间序列的所有满足查询条件的点做平均值计算，计算结果如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+--------+------------------+</span></span>
<span class="line"><span>|    city|  avg(temperature)|</span></span>
<span class="line"><span>+--------+------------------+</span></span>
<span class="line"><span>| Beijing|104.04666697184244|</span></span>
<span class="line"><span>|Shanghai|107.85000076293946|</span></span>
<span class="line"><span>|    NULL| 50.84999910990397|</span></span>
<span class="line"><span>+--------+------------------+</span></span>
<span class="line"><span>Total line number = 3</span></span>
<span class="line"><span>It costs 0.231s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果集中可以看到，和分段聚合、按层次分组聚合相比，标签聚合的查询结果的不同点是：</p><ol><li>标签聚合查询的聚合结果不会再做去星号展开，而是将多个时间序列的数据作为一个整体进行聚合计算。</li><li>标签聚合查询除了输出聚合结果列，还会输出聚合标签的键值列。该列的列名为聚合指定的标签键，列的值则为所有查询的时间序列中出现的该标签的值。<br> 如果某些时间序列未设置该标签，则在键值列中有一行单独的 <code>NULL</code> ，代表未设置标签的所有时间序列数据的聚合结果。</li></ol><h5 id="多标签分组聚合查询" tabindex="-1"><a class="header-anchor" href="#多标签分组聚合查询"><span>多标签分组聚合查询</span></a></h5><p>除了基本的单标签聚合查询外，还可以按顺序指定多个标签进行聚合计算。</p><p>例如，用户想统计每个城市的每个车间内设备的平均温度。但因为各个城市的车间名称有可能相同，所以不能直接按照 <code>workshop</code> 做标签聚合。必须要先按照城市，再按照车间处理。</p><p>SQL 语句如下</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(temperature) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">GROUP BY</span><span style="color:#ABB2BF;"> TAGS(city, workshop);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询结果如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+--------+--------+------------------+</span></span>
<span class="line"><span>|    city|workshop|  avg(temperature)|</span></span>
<span class="line"><span>+--------+--------+------------------+</span></span>
<span class="line"><span>|    NULL|    NULL| 50.84999910990397|</span></span>
<span class="line"><span>|Shanghai|      w1|113.01666768391927|</span></span>
<span class="line"><span>| Beijing|      w2| 104.4000004359654|</span></span>
<span class="line"><span>|Shanghai|      w2|100.10000038146973|</span></span>
<span class="line"><span>| Beijing|      w1|103.73750019073486|</span></span>
<span class="line"><span>+--------+--------+------------------+</span></span>
<span class="line"><span>Total line number = 5</span></span>
<span class="line"><span>It costs 0.027s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果集中可以看到，和单标签聚合相比，多标签聚合的查询结果会根据指定的标签顺序，输出相应标签的键值列。</p><h5 id="基于时间区间的标签聚合查询" tabindex="-1"><a class="header-anchor" href="#基于时间区间的标签聚合查询"><span>基于时间区间的标签聚合查询</span></a></h5><p>按照时间区间聚合是时序数据库中最常用的查询需求之一。IoTDB 在基于时间区间的聚合基础上，支持进一步按照标签进行聚合查询。</p><p>例如，用户想统计时间 <code>[1000, 10000)</code> 范围内，每个城市每个车间中的设备每 5 秒内的平均温度。</p><p>SQL 语句如下</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#56B6C2;"> AVG</span><span style="color:#ABB2BF;">(temperature) </span><span style="color:#C678DD;">FROM</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">factory1</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">GROUP BY</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">), 5s), TAGS(city, workshop);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询结果如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+--------+--------+------------------+</span></span>
<span class="line"><span>|                         Time|    city|workshop|  avg(temperature)|</span></span>
<span class="line"><span>+-----------------------------+--------+--------+------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:01.000+08:00|    NULL|    NULL| 50.91999893188476|</span></span>
<span class="line"><span>|1970-01-01T08:00:01.000+08:00|Shanghai|      w1|113.20000076293945|</span></span>
<span class="line"><span>|1970-01-01T08:00:01.000+08:00| Beijing|      w2|             103.4|</span></span>
<span class="line"><span>|1970-01-01T08:00:01.000+08:00|Shanghai|      w2| 100.1999994913737|</span></span>
<span class="line"><span>|1970-01-01T08:00:01.000+08:00| Beijing|      w1|103.81666692097981|</span></span>
<span class="line"><span>|1970-01-01T08:00:06.000+08:00|    NULL|    NULL|              50.5|</span></span>
<span class="line"><span>|1970-01-01T08:00:06.000+08:00|Shanghai|      w1| 112.6500015258789|</span></span>
<span class="line"><span>|1970-01-01T08:00:06.000+08:00| Beijing|      w2| 106.9000015258789|</span></span>
<span class="line"><span>|1970-01-01T08:00:06.000+08:00|Shanghai|      w2| 99.80000305175781|</span></span>
<span class="line"><span>|1970-01-01T08:00:06.000+08:00| Beijing|      w1|             103.5|</span></span>
<span class="line"><span>+-----------------------------+--------+--------+------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和标签聚合相比，基于时间区间的标签聚合的查询会首先按照时间区间划定聚合范围，在时间区间内部再根据指定的标签顺序，进行相应数据的聚合计算。在输出的结果集中，会包含一列时间列，该时间列值的含义和时间区间聚合查询的相同。</p><h5 id="标签分组聚合的限制" tabindex="-1"><a class="header-anchor" href="#标签分组聚合的限制"><span>标签分组聚合的限制</span></a></h5><p>由于标签聚合功能仍然处于开发阶段，目前有如下未实现功能。</p><blockquote><ol><li>暂不支持 <code>HAVING</code> 子句过滤查询结果。</li><li>暂不支持结果按照标签值排序。</li><li>暂不支持 <code>LIMIT</code>，<code>OFFSET</code>，<code>SLIMIT</code>，<code>SOFFSET</code>。</li><li>暂不支持 <code>ALIGN BY DEVICE</code>。</li><li>暂不支持聚合函数内部包含表达式，例如 <code>count(s+1)</code>。</li><li>不支持值过滤条件聚合，和分层聚合查询行为保持一致。</li></ol></blockquote><h2 id="聚合结果过滤-having-子句" tabindex="-1"><a class="header-anchor" href="#聚合结果过滤-having-子句"><span>聚合结果过滤（HAVING 子句）</span></a></h2><p>如果想对聚合查询的结果进行过滤，可以在 <code>GROUP BY</code> 子句之后使用 <code>HAVING</code> 子句。</p><p><strong>注意：</strong></p><ol><li><p><code>HAVING</code>子句中的过滤条件必须由聚合值构成，原始序列不能单独出现。</p><p>下列使用方式是不正确的：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">),1ms) </span><span style="color:#C678DD;">having</span><span style="color:#56B6C2;"> sum</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> s1</span></span>
<span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">),1ms) </span><span style="color:#C678DD;">having</span><span style="color:#ABB2BF;"> s1 </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对<code>GROUP BY LEVEL</code>结果进行过滤时，<code>SELECT</code>和<code>HAVING</code>中出现的PATH只能有一级。</p><p>下列使用方式是不正确的：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">),1ms), </span><span style="color:#C678DD;">level</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#C678DD;"> having</span><span style="color:#56B6C2;"> sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">d1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">d1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">),1ms), </span><span style="color:#C678DD;">level</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#C678DD;"> having</span><span style="color:#56B6C2;"> sum</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>SQL 示例：</strong></p><ul><li><p><strong>示例 1：</strong></p><p>对于以下聚合结果进行过滤：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+---------------------+---------------------+</span></span>
<span class="line"><span>|                         Time|count(root.test.*.s1)|count(root.test.*.s2)|</span></span>
<span class="line"><span>+-----------------------------+---------------------+---------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|                    4|                    4|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00|                    1|                    0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|                    2|                    4|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.007+08:00|                    3|                    2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.009+08:00|                    4|                    4|</span></span>
<span class="line"><span>+-----------------------------+---------------------+---------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;"> select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(s1) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">),2ms), </span><span style="color:#C678DD;">level</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#C678DD;"> having</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(s2) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+---------------------+</span></span>
<span class="line"><span>|                         Time|count(root.test.*.s1)|</span></span>
<span class="line"><span>+-----------------------------+---------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|                    4|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|                    2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.009+08:00|                    4|</span></span>
<span class="line"><span>+-----------------------------+---------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>示例 2：</strong></p><p>对于以下聚合结果进行过滤：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------+---------+---------+</span></span>
<span class="line"><span>|                         Time|       Device|count(s1)|count(s2)|</span></span>
<span class="line"><span>+-----------------------------+-------------+---------+---------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|root.test.sg1|        1|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00|root.test.sg1|        1|        0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|root.test.sg1|        1|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.007+08:00|root.test.sg1|        2|        1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.009+08:00|root.test.sg1|        2|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|root.test.sg2|        2|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00|root.test.sg2|        0|        0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|root.test.sg2|        1|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.007+08:00|root.test.sg2|        1|        1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.009+08:00|root.test.sg2|        2|        2|</span></span>
<span class="line"><span>+-----------------------------+-------------+---------+---------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;"> select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(s1), </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s2) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">),2ms) </span><span style="color:#C678DD;">having</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(s2) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------+---------+---------+</span></span>
<span class="line"><span>|                         Time|       Device|count(s1)|count(s2)|</span></span>
<span class="line"><span>+-----------------------------+-------------+---------+---------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|root.test.sg1|        1|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|root.test.sg1|        1|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.009+08:00|root.test.sg1|        2|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|root.test.sg2|        2|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|root.test.sg2|        1|        2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.009+08:00|root.test.sg2|        2|        2|</span></span>
<span class="line"><span>+-----------------------------+-------------+---------+---------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="结果集补空值-fill-子句" tabindex="-1"><a class="header-anchor" href="#结果集补空值-fill-子句"><span>结果集补空值（FILL 子句）</span></a></h2><h3 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍"><span>功能介绍</span></a></h3><p>当执行一些数据查询时，结果集的某行某列可能没有数据，则此位置结果为空，但这种空值不利于进行数据可视化展示和分析，需要对空值进行填充。</p><p>在 IoTDB 中，用户可以使用 <code>FILL</code> 子句指定数据缺失情况下的填充模式，允许用户按照特定的方法对任何查询的结果集填充空值，如取前一个不为空的值、线性插值等。</p><h3 id="语法定义-1" tabindex="-1"><a class="header-anchor" href="#语法定义-1"><span>语法定义</span></a></h3><p><strong><code>FILL</code> 子句的语法定义如下：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">FILL </span><span style="color:#98C379;">&#39;(&#39;</span><span style="color:#ABB2BF;"> PREVIOUS | LINEAR | constant </span><span style="color:#98C379;">&#39;)&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li>在 <code>Fill</code> 语句中只能指定一种填充方法，该方法作用于结果集的全部列。</li><li>空值填充不兼容 0.13 版本及以前的语法（即不支持 <code>FILL((&lt;data_type&gt;[&lt;fill_method&gt;(, &lt;before_range&gt;, &lt;after_range&gt;)?])+)</code>）</li></ul><h3 id="填充方式" tabindex="-1"><a class="header-anchor" href="#填充方式"><span>填充方式</span></a></h3><p><strong>IoTDB 目前支持以下三种空值填充方式：</strong></p><ul><li><code>PREVIOUS</code> 填充：使用该列前一个非空值进行填充。</li><li><code>LINEAR</code> 填充：使用该列前一个非空值和下一个非空值的线性插值进行填充。</li><li>常量填充：使用指定常量填充。</li></ul><p><strong>各数据类型支持的填充方法如下表所示：</strong></p><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">支持的填充方法</th></tr></thead><tbody><tr><td style="text-align:left;">BOOLEAN</td><td style="text-align:left;"><code>PREVIOUS</code>、常量</td></tr><tr><td style="text-align:left;">INT32</td><td style="text-align:left;"><code>PREVIOUS</code>、<code>LINEAR</code>、常量</td></tr><tr><td style="text-align:left;">INT64</td><td style="text-align:left;"><code>PREVIOUS</code>、<code>LINEAR</code>、常量</td></tr><tr><td style="text-align:left;">FLOAT</td><td style="text-align:left;"><code>PREVIOUS</code>、<code>LINEAR</code>、常量</td></tr><tr><td style="text-align:left;">DOUBLE</td><td style="text-align:left;"><code>PREVIOUS</code>、<code>LINEAR</code>、常量</td></tr><tr><td style="text-align:left;">TEXT</td><td style="text-align:left;"><code>PREVIOUS</code>、常量</td></tr></tbody></table><p><strong>注意：</strong> 对于数据类型不支持指定填充方法的列，既不会填充它，也不会报错，只是让那一列保持原样。</p><p><strong>下面通过举例进一步说明。</strong></p><p>如果我们不使用任何填充方式：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature, </span><span style="color:#C678DD;">status</span><span style="color:#C678DD;"> from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sgcc</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf03</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|                         Time|root.sgcc.wf03.wt01.temperature|root.sgcc.wf03.wt01.status|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:37:00.000+08:00|                          21.93|                      true|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:38:00.000+08:00|                           null|                     false|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:39:00.000+08:00|                          22.23|                      null|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:40:00.000+08:00|                          23.43|                      null|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>Total line number = 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="previous-填充" tabindex="-1"><a class="header-anchor" href="#previous-填充"><span><code>PREVIOUS</code> 填充</span></a></h4><p><strong>对于查询结果集中的空值，使用该列前一个非空值进行填充。</strong></p><p><strong>注意：</strong> 如果结果集的某一列第一个值就为空，则不会填充该值，直到遇到该列第一个非空值为止。</p><p>例如，使用 <code>PREVIOUS</code> 填充，SQL 语句如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature, </span><span style="color:#C678DD;">status</span><span style="color:#C678DD;"> from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sgcc</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf03</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;"> fill(previous);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>PREVIOUS</code> 填充后的结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|                         Time|root.sgcc.wf03.wt01.temperature|root.sgcc.wf03.wt01.status|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:37:00.000+08:00|                          21.93|                      true|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:38:00.000+08:00|                          21.93|                     false|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:39:00.000+08:00|                          22.23|                     false|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:40:00.000+08:00|                          23.43|                     false|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>Total line number = 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在前值填充时，能够支持指定一个时间间隔，如果当前null值的时间戳与前一个非null值的时间戳的间隔，超过指定的时间间隔，则不进行填充。</strong></p><blockquote><ol><li>在线性填充和常量填充的情况下，如果指定了第二个参数，会抛出异常</li><li>时间超时参数仅支持整数<br> 例如，原始数据如下所示：</li></ol></blockquote><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1 </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">db</span><span style="color:#ABB2BF;">.d1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------+</span></span>
<span class="line"><span>|                         Time|root.db.d1.s1|</span></span>
<span class="line"><span>+-----------------------------+-------------+</span></span>
<span class="line"><span>|2023-11-08T16:41:50.008+08:00|          1.0|</span></span>
<span class="line"><span>+-----------------------------+-------------+</span></span>
<span class="line"><span>|2023-11-08T16:46:50.011+08:00|          2.0|</span></span>
<span class="line"><span>+-----------------------------+-------------+</span></span>
<span class="line"><span>|2023-11-08T16:48:50.011+08:00|          3.0|</span></span>
<span class="line"><span>+-----------------------------+-------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据时间分组，每1分钟求一个平均值</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(s1) </span></span>
<span class="line"><span style="color:#C678DD;">  from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">db</span><span style="color:#ABB2BF;">.d1 </span></span>
<span class="line"><span style="color:#C678DD;">  group by</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-08T16:</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">008</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-08T16:</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">008</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">), 1m)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|                         Time|avg(root.db.d1.s1)|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:40:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:41:00.008+08:00|               1.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:42:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:43:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:44:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:45:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:46:00.008+08:00|               2.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:47:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:48:00.008+08:00|               3.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:49:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据时间分组并用前值填充</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(s1) </span></span>
<span class="line"><span style="color:#C678DD;">  from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">db</span><span style="color:#ABB2BF;">.d1 </span></span>
<span class="line"><span style="color:#C678DD;">  group by</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-08T16:</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">008</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-08T16:</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">008</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">), 1m)</span></span>
<span class="line"><span style="color:#ABB2BF;">  FILL(PREVIOUS);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|                         Time|avg(root.db.d1.s1)|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:40:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:41:00.008+08:00|               1.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:42:00.008+08:00|               1.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:43:00.008+08:00|               1.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:44:00.008+08:00|               1.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:45:00.008+08:00|               1.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:46:00.008+08:00|               2.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:47:00.008+08:00|               2.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:48:00.008+08:00|               3.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:49:00.008+08:00|               3.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据时间分组并用前值填充，并指定超过2分钟的就不填充</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(s1)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">db</span><span style="color:#ABB2BF;">.d1</span></span>
<span class="line"><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-08T16:</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">008</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-08T16:</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">008</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">), 1m)</span></span>
<span class="line"><span style="color:#ABB2BF;">  FILL(PREVIOUS, 2m);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|                         Time|avg(root.db.d1.s1)|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:40:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:41:00.008+08:00|               1.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:42:00.008+08:00|               1.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:43:00.008+08:00|               1.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:44:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:45:00.008+08:00|              null|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:46:00.008+08:00|               2.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:47:00.008+08:00|               2.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:48:00.008+08:00|               3.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span>
<span class="line"><span>|2023-11-08T16:49:00.008+08:00|               3.0|</span></span>
<span class="line"><span>+-----------------------------+------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="linear-填充" tabindex="-1"><a class="header-anchor" href="#linear-填充"><span><code>LINEAR</code> 填充</span></a></h4><p><strong>对于查询结果集中的空值，使用该列前一个非空值和下一个非空值的线性插值进行填充。</strong></p><p><strong>注意：</strong></p><ul><li>如果某个值之前的所有值都为空，或者某个值之后的所有值都为空，则不会填充该值。</li><li>如果某列的数据类型为boolean/text，我们既不会填充它，也不会报错，只是让那一列保持原样。</li></ul><p>例如，使用 <code>LINEAR</code> 填充，SQL 语句如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature, </span><span style="color:#C678DD;">status</span><span style="color:#C678DD;"> from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sgcc</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf03</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;"> fill(linear);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>LINEAR</code> 填充后的结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|                         Time|root.sgcc.wf03.wt01.temperature|root.sgcc.wf03.wt01.status|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:37:00.000+08:00|                          21.93|                      true|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:38:00.000+08:00|                          22.08|                     false|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:39:00.000+08:00|                          22.23|                      null|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:40:00.000+08:00|                          23.43|                      null|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>Total line number = 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常量填充" tabindex="-1"><a class="header-anchor" href="#常量填充"><span>常量填充</span></a></h4><p><strong>对于查询结果集中的空值，使用指定常量填充。</strong></p><p><strong>注意：</strong></p><ul><li><p>如果某列数据类型与常量类型不兼容，既不填充该列，也不报错，将该列保持原样。对于常量兼容的数据类型，如下表所示：</p><table><thead><tr><th style="text-align:left;">常量类型</th><th style="text-align:left;">能够填充的序列数据类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>BOOLEAN</code></td><td style="text-align:left;"><code>BOOLEAN</code> <code>TEXT</code></td></tr><tr><td style="text-align:left;"><code>INT64</code></td><td style="text-align:left;"><code>INT32</code> <code>INT64</code> <code>FLOAT</code> <code>DOUBLE</code> <code>TEXT</code></td></tr><tr><td style="text-align:left;"><code>DOUBLE</code></td><td style="text-align:left;"><code>FLOAT</code> <code>DOUBLE</code> <code>TEXT</code></td></tr><tr><td style="text-align:left;"><code>TEXT</code></td><td style="text-align:left;"><code>TEXT</code></td></tr></tbody></table></li><li><p>当常量值大于 <code>INT32</code> 所能表示的最大值时，对于 <code>INT32</code> 类型的列，既不填充该列，也不报错，将该列保持原样。</p></li></ul><p>例如，使用 <code>FLOAT</code> 类型的常量填充，SQL 语句如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature, </span><span style="color:#C678DD;">status</span><span style="color:#C678DD;"> from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sgcc</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf03</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;"> fill(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>FLOAT</code> 类型的常量填充后的结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|                         Time|root.sgcc.wf03.wt01.temperature|root.sgcc.wf03.wt01.status|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:37:00.000+08:00|                          21.93|                      true|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:38:00.000+08:00|                            2.0|                     false|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:39:00.000+08:00|                          22.23|                      null|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:40:00.000+08:00|                          23.43|                      null|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>Total line number = 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再比如，使用 <code>BOOLEAN</code> 类型的常量填充，SQL 语句如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature, </span><span style="color:#C678DD;">status</span><span style="color:#C678DD;"> from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sgcc</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf03</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T16:</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;"> fill(true);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>BOOLEAN</code> 类型的常量填充后的结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|                         Time|root.sgcc.wf03.wt01.temperature|root.sgcc.wf03.wt01.status|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:37:00.000+08:00|                          21.93|                      true|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:38:00.000+08:00|                           null|                     false|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:39:00.000+08:00|                          22.23|                      true|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>|2017-11-01T16:40:00.000+08:00|                          23.43|                      true|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+--------------------------+</span></span>
<span class="line"><span>Total line number = 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询结果分页-limit-slimit-子句" tabindex="-1"><a class="header-anchor" href="#查询结果分页-limit-slimit-子句"><span>查询结果分页（LIMIT/SLIMIT 子句）</span></a></h2><p>当查询结果集数据量很大，放在一个页面不利于显示，可以使用 <code>LIMIT/SLIMIT</code> 子句和 <code>OFFSET/SOFFSET </code>子句进行分页控制。</p><ul><li><code>LIMIT</code> 和 <code>SLIMIT</code> 子句用于控制查询结果的行数和列数。</li><li><code>OFFSET</code> 和 <code>SOFFSET</code> 子句用于控制结果显示的起始位置。</li></ul><h3 id="按行分页" tabindex="-1"><a class="header-anchor" href="#按行分页"><span>按行分页</span></a></h3><p>用户可以通过 <code>LIMIT</code> 和 <code>OFFSET</code> 子句控制查询结果的行数，<code>LIMIT rowLimit</code> 指定查询结果的行数，<code>OFFSET rowOffset</code> 指定查询结果显示的起始行位置。</p><p>注意：</p><ul><li>当 <code>rowOffset</code> 超过结果集的大小时，返回空结果集。</li><li>当 <code>rowLimit</code> 超过结果集的大小时，返回所有查询结果。</li><li>当 <code>rowLimit</code> 和 <code>rowOffset</code> 不是正整数，或超过 <code>INT64</code> 允许的最大值时，系统将提示错误。</li></ul><p>我们将通过以下示例演示如何使用 <code>LIMIT</code> 和 <code>OFFSET</code> 子句。</p><ul><li><strong>示例 1：</strong> 基本的 <code>LIMIT</code> 子句</li></ul><p>SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#C678DD;"> status</span><span style="color:#ABB2BF;">, temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> limit</span><span style="color:#D19A66;"> 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>含义：</p><p>所选设备为 ln 组 wf01 工厂 wt01 设备； 选择的时间序列是“状态”和“温度”。 SQL 语句要求返回查询结果的前 10 行。</p><p>结果如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.status|root.ln.wf01.wt01.temperature|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|                    true|                        25.96|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|                    true|                        24.36|</span></span>
<span class="line"><span>|2017-11-01T00:02:00.000+08:00|                   false|                        20.09|</span></span>
<span class="line"><span>|2017-11-01T00:03:00.000+08:00|                   false|                        20.18|</span></span>
<span class="line"><span>|2017-11-01T00:04:00.000+08:00|                   false|                        21.13|</span></span>
<span class="line"><span>|2017-11-01T00:05:00.000+08:00|                   false|                        22.72|</span></span>
<span class="line"><span>|2017-11-01T00:06:00.000+08:00|                   false|                        20.71|</span></span>
<span class="line"><span>|2017-11-01T00:07:00.000+08:00|                   false|                        21.45|</span></span>
<span class="line"><span>|2017-11-01T00:08:00.000+08:00|                   false|                        22.58|</span></span>
<span class="line"><span>|2017-11-01T00:09:00.000+08:00|                   false|                        20.98|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>Total line number = 10</span></span>
<span class="line"><span>It costs 0.000s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>示例 2：</strong> 带 <code>OFFSET</code> 的 <code>LIMIT</code> 子句</li></ul><p>SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#C678DD;"> status</span><span style="color:#ABB2BF;">, temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> limit</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;"> offset </span><span style="color:#D19A66;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>含义：</p><p>所选设备为 ln 组 wf01 工厂 wt01 设备； 选择的时间序列是“状态”和“温度”。 SQL 语句要求返回查询结果的第 3 至 7 行（第一行编号为 0 行）。</p><p>结果如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.status|root.ln.wf01.wt01.temperature|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:03:00.000+08:00|                   false|                        20.18|</span></span>
<span class="line"><span>|2017-11-01T00:04:00.000+08:00|                   false|                        21.13|</span></span>
<span class="line"><span>|2017-11-01T00:05:00.000+08:00|                   false|                        22.72|</span></span>
<span class="line"><span>|2017-11-01T00:06:00.000+08:00|                   false|                        20.71|</span></span>
<span class="line"><span>|2017-11-01T00:07:00.000+08:00|                   false|                        21.45|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>Total line number = 5</span></span>
<span class="line"><span>It costs 0.342s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>示例 3：</strong> <code>LIMIT</code> 子句与 <code>WHERE</code> 子句结合</li></ul><p>SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#C678DD;"> status</span><span style="color:#ABB2BF;">,temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 2024</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">07</span><span style="color:#ABB2BF;">-07T00:</span><span style="color:#D19A66;">05</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 2024</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">07</span><span style="color:#ABB2BF;">-12T00:</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> limit</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;"> offset </span><span style="color:#D19A66;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>含义：</p><p>所选设备为 ln 组 wf01 工厂 wt01 设备； 选择的时间序列是“状态”和“温度”。 SQL 语句要求返回时间“ 2024-07-07T00：05：00.000”和“ 2024-07-12T00：12：00.000”之间的状态和温度传感器值的第 3 至 7 行（第一行编号为第 0 行）。</p><p>结果如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.status|root.ln.wf01.wt01.temperature|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>|2024-07-09T17:32:11.943+08:00|                    true|                    24.941973|</span></span>
<span class="line"><span>|2024-07-09T17:32:12.944+08:00|                    true|                     20.05108|</span></span>
<span class="line"><span>|2024-07-09T17:32:13.945+08:00|                    true|                    20.541632|</span></span>
<span class="line"><span>|2024-07-09T17:32:14.945+08:00|                    null|                     23.09016|</span></span>
<span class="line"><span>|2024-07-09T17:32:14.946+08:00|                    true|                         null|</span></span>
<span class="line"><span>+-----------------------------+------------------------+-----------------------------+</span></span>
<span class="line"><span>Total line number = 5</span></span>
<span class="line"><span>It costs 0.070s</span></span>
<span class="line"><span>\`\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- **示例 4：** \`LIMIT\` 子句与 \`GROUP BY\` 子句组合</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SQL 语句：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`sql</span></span>
<span class="line"><span>select count(status), max_value(temperature) from root.ln.wf01.wt01 group by ([2017-11-01T00:00:00, 2017-11-07T23:00:00),1d) limit 4 offset 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>含义：</p><p>SQL 语句子句要求返回查询结果的第 3 至 6 行（第一行编号为 0 行）。</p><p>结果如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>|2017-11-04T00:00:00.000+08:00|                           1440|                                    26.0|</span></span>
<span class="line"><span>|2017-11-05T00:00:00.000+08:00|                           1440|                                    26.0|</span></span>
<span class="line"><span>|2017-11-06T00:00:00.000+08:00|                           1440|                                   25.99|</span></span>
<span class="line"><span>|2017-11-07T00:00:00.000+08:00|                           1380|                                    26.0|</span></span>
<span class="line"><span>+-----------------------------+-------------------------------+----------------------------------------+</span></span>
<span class="line"><span>Total line number = 4</span></span>
<span class="line"><span>It costs 0.016s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按列分页" tabindex="-1"><a class="header-anchor" href="#按列分页"><span>按列分页</span></a></h3><p>用户可以通过 <code>SLIMIT</code> 和 <code>SOFFSET</code> 子句控制查询结果的列数，<code>SLIMIT seriesLimit</code> 指定查询结果的列数，<code>SOFFSET seriesOffset</code> 指定查询结果显示的起始列位置。</p><p>注意：</p><ul><li>仅用于控制值列，对时间列和设备列无效。</li><li>当 <code>seriesOffset</code> 超过结果集的大小时，返回空结果集。</li><li>当 <code>seriesLimit</code> 超过结果集的大小时，返回所有查询结果。</li><li>当 <code>seriesLimit</code> 和 <code>seriesOffset</code> 不是正整数，或超过 <code>INT64</code> 允许的最大值时，系统将提示错误。</li></ul><p>我们将通过以下示例演示如何使用 <code>SLIMIT</code> 和 <code>SOFFSET</code> 子句。</p><ul><li><strong>示例 1：</strong> 基本的 <code>SLIMIT</code> 子句</li></ul><p>SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">05</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;"> slimit </span><span style="color:#D19A66;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>含义：</p><p>所选设备为 ln 组 wf01 工厂 wt01 设备； 所选时间序列是该设备下的第二列，即温度。 SQL 语句要求在&quot;2017-11-01T00:05:00.000&quot;和&quot;2017-11-01T00:12:00.000&quot;的时间点之间选择温度传感器值。</p><p>结果如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.temperature|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:06:00.000+08:00|                        20.71|</span></span>
<span class="line"><span>|2017-11-01T00:07:00.000+08:00|                        21.45|</span></span>
<span class="line"><span>|2017-11-01T00:08:00.000+08:00|                        22.58|</span></span>
<span class="line"><span>|2017-11-01T00:09:00.000+08:00|                        20.98|</span></span>
<span class="line"><span>|2017-11-01T00:10:00.000+08:00|                        25.52|</span></span>
<span class="line"><span>|2017-11-01T00:11:00.000+08:00|                        22.91|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+</span></span>
<span class="line"><span>Total line number = 6</span></span>
<span class="line"><span>It costs 0.000s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>示例 2：</strong> 带 <code>SOFFSET</code> 的 <code>SLIMIT</code> 子句</li></ul><p>SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">05</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#C678DD;"> and</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;"> slimit </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> soffset </span><span style="color:#D19A66;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>含义：</p><p>所选设备为 ln 组 wf01 工厂 wt01 设备； 所选时间序列是该设备下的第一列，即电源状态。 SQL 语句要求在&quot; 2017-11-01T00:05:00.000&quot;和&quot;2017-11-01T00:12:00.000&quot;的时间点之间选择状态传感器值。</p><p>结果如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.status|</span></span>
<span class="line"><span>+-----------------------------+------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:06:00.000+08:00|                   false|</span></span>
<span class="line"><span>|2017-11-01T00:07:00.000+08:00|                   false|</span></span>
<span class="line"><span>|2017-11-01T00:08:00.000+08:00|                   false|</span></span>
<span class="line"><span>|2017-11-01T00:09:00.000+08:00|                   false|</span></span>
<span class="line"><span>|2017-11-01T00:10:00.000+08:00|                    true|</span></span>
<span class="line"><span>|2017-11-01T00:11:00.000+08:00|                   false|</span></span>
<span class="line"><span>+-----------------------------+------------------------+</span></span>
<span class="line"><span>Total line number = 6</span></span>
<span class="line"><span>It costs 0.003s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>示例 3：</strong> <code>SLIMIT</code> 子句与 <code>GROUP BY</code> 子句结合</li></ul><p>SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> max_value(*) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> group by</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-07T23:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">),1d) slimit </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> soffset </span><span style="color:#D19A66;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>含义：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------------+</span></span>
<span class="line"><span>|                         Time|max_value(root.ln.wf01.wt01.status)|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|                               true|</span></span>
<span class="line"><span>|2017-11-02T00:00:00.000+08:00|                               true|</span></span>
<span class="line"><span>|2017-11-03T00:00:00.000+08:00|                               true|</span></span>
<span class="line"><span>|2017-11-04T00:00:00.000+08:00|                               true|</span></span>
<span class="line"><span>|2017-11-05T00:00:00.000+08:00|                               true|</span></span>
<span class="line"><span>|2017-11-06T00:00:00.000+08:00|                               true|</span></span>
<span class="line"><span>|2017-11-07T00:00:00.000+08:00|                               true|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------------+</span></span>
<span class="line"><span>Total line number = 7</span></span>
<span class="line"><span>It costs 0.000s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>示例 4：</strong> <code>SLIMIT</code> 子句与 <code>LIMIT</code> 子句结合</li></ul><p>SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wf01</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">wt01</span><span style="color:#C678DD;"> limit</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;"> offset </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;"> slimit </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> soffset </span><span style="color:#D19A66;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>含义：</p><p>所选设备为 ln 组 wf01 工厂 wt01 设备； 所选时间序列是此设备下的第 0 列至第 1 列（第一列编号为第 0 列）。 SQL 语句子句要求返回查询结果的第 100 至 109 行（第一行编号为 0 行）。</p><p>结果如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------------------+------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+------------------------+</span></span>
<span class="line"><span>|2017-11-01T01:40:00.000+08:00|                        21.19|                   false|</span></span>
<span class="line"><span>|2017-11-01T01:41:00.000+08:00|                        22.79|                   false|</span></span>
<span class="line"><span>|2017-11-01T01:42:00.000+08:00|                        22.98|                   false|</span></span>
<span class="line"><span>|2017-11-01T01:43:00.000+08:00|                        21.52|                   false|</span></span>
<span class="line"><span>|2017-11-01T01:44:00.000+08:00|                        23.45|                    true|</span></span>
<span class="line"><span>|2017-11-01T01:45:00.000+08:00|                        24.06|                    true|</span></span>
<span class="line"><span>|2017-11-01T01:46:00.000+08:00|                         22.6|                   false|</span></span>
<span class="line"><span>|2017-11-01T01:47:00.000+08:00|                        23.78|                    true|</span></span>
<span class="line"><span>|2017-11-01T01:48:00.000+08:00|                        24.72|                    true|</span></span>
<span class="line"><span>|2017-11-01T01:49:00.000+08:00|                        24.68|                    true|</span></span>
<span class="line"><span>+-----------------------------+-----------------------------+------------------------+</span></span>
<span class="line"><span>Total line number = 10</span></span>
<span class="line"><span>It costs 0.009s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结果集排序-order-by-子句" tabindex="-1"><a class="header-anchor" href="#结果集排序-order-by-子句"><span>结果集排序（ORDER BY 子句）</span></a></h2><h3 id="时间对齐模式下的排序" tabindex="-1"><a class="header-anchor" href="#时间对齐模式下的排序"><span>时间对齐模式下的排序</span></a></h3><p>IoTDB的查询结果集默认按照时间对齐，可以使用<code>ORDER BY TIME</code>的子句指定时间戳的排列顺序。示例代码如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">01</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#C678DD;"> order by</span><span style="color:#C678DD;"> time</span><span style="color:#C678DD;"> desc</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+--------------------------+------------------------+-----------------------------+------------------------+</span></span>
<span class="line"><span>|                         Time|root.ln.wf02.wt02.hardware|root.ln.wf02.wt02.status|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|</span></span>
<span class="line"><span>+-----------------------------+--------------------------+------------------------+-----------------------------+------------------------+</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|                        v2|                    true|                        24.36|                    true|</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|                        v2|                    true|                        25.96|                    true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|                        v2|                   false|                         null|                    null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|                        v1|                    true|                         null|                    null|</span></span>
<span class="line"><span>+-----------------------------+--------------------------+------------------------+-----------------------------+------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设备对齐模式下的排序" tabindex="-1"><a class="header-anchor" href="#设备对齐模式下的排序"><span>设备对齐模式下的排序</span></a></h3><p>当使用<code>ALIGN BY DEVICE</code>查询对齐模式下的结果集时，可以使用<code>ORDER BY</code>子句对返回的结果集顺序进行规定。</p><p>在设备对齐模式下支持4种排序模式的子句,其中包括两种排序键，<code>DEVICE</code>和<code>TIME</code>，靠前的排序键为主排序键，每种排序键都支持<code>ASC</code>和<code>DESC</code>两种排列顺序。</p><ol><li><p><code>ORDER BY DEVICE</code>: 按照设备名的字典序进行排序，排序方式为字典序排序，在这种情况下，相同名的设备会以组的形式进行展示。</p></li><li><p><code>ORDER BY TIME</code>: 按照时间戳进行排序，此时不同的设备对应的数据点会按照时间戳的优先级被打乱排序。</p></li><li><p><code>ORDER BY DEVICE,TIME</code>: 按照设备名的字典序进行排序，设备名相同的数据点会通过时间戳进行排序。</p></li><li><p><code>ORDER BY TIME,DEVICE</code>: 按照时间戳进行排序，时间戳相同的数据点会通过设备名的字典序进行排序。</p></li></ol><blockquote><p>为了保证结果的可观性，当不使用<code>ORDER BY</code>子句，仅使用<code>ALIGN BY DEVICE</code>时，会为设备视图提供默认的排序方式。其中默认的排序视图为<code>ORDER BY DEVCE,TIME</code>，默认的排序顺序为<code>ASC</code>，<br> 即结果集默认先按照设备名升序排列，在相同设备名内再按照时间戳升序排序。</p></blockquote><p>当主排序键为<code>DEVICE</code>时，结果集的格式与默认情况类似：先按照设备名对结果进行排列，在相同的设备名下内按照时间戳进行排序。示例代码如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">01</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#C678DD;"> order by</span><span style="color:#ABB2BF;"> device </span><span style="color:#C678DD;">desc</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">time</span><span style="color:#C678DD;"> asc</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------+--------+------+-----------+</span></span>
<span class="line"><span>|                         Time|           Device|hardware|status|temperature|</span></span>
<span class="line"><span>+-----------------------------+-----------------+--------+------+-----------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|root.ln.wf02.wt02|      v1|  true|       null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|root.ln.wf02.wt02|      v2| false|       null|</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|root.ln.wf02.wt02|      v2|  true|       null|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf02.wt02|      v2|  true|       null|</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|root.ln.wf01.wt01|    null|  true|      25.96|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf01.wt01|    null|  true|      24.36|</span></span>
<span class="line"><span>+-----------------------------+-----------------+--------+------+-----------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主排序键为<code>Time</code>时，结果集会先按照时间戳进行排序，在时间戳相等时按照设备名排序。<br> 示例代码如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">01</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#C678DD;"> order by</span><span style="color:#C678DD;"> time</span><span style="color:#C678DD;"> asc</span><span style="color:#ABB2BF;">,device </span><span style="color:#C678DD;">desc</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------+--------+------+-----------+</span></span>
<span class="line"><span>|                         Time|           Device|hardware|status|temperature|</span></span>
<span class="line"><span>+-----------------------------+-----------------+--------+------+-----------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|root.ln.wf02.wt02|      v1|  true|       null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|root.ln.wf02.wt02|      v2| false|       null|</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|root.ln.wf02.wt02|      v2|  true|       null|</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|root.ln.wf01.wt01|    null|  true|      25.96|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf02.wt02|      v2|  true|       null|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf01.wt01|    null|  true|      24.36|</span></span>
<span class="line"><span>+-----------------------------+-----------------+--------+------+-----------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当没有显式指定时，主排序键默认为<code>Device</code>，排序顺序默认为<code>ASC</code>，示例代码如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">01</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果如图所示，可以看出，<code>ORDER BY DEVICE ASC,TIME ASC</code>就是默认情况下的排序方式，由于<code>ASC</code>是默认排序顺序，此处可以省略。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------+--------+------+-----------+</span></span>
<span class="line"><span>|                         Time|           Device|hardware|status|temperature|</span></span>
<span class="line"><span>+-----------------------------+-----------------+--------+------+-----------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|root.ln.wf01.wt01|    null|  true|      25.96|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf01.wt01|    null|  true|      24.36|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|root.ln.wf02.wt02|      v1|  true|       null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|root.ln.wf02.wt02|      v2| false|       null|</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|root.ln.wf02.wt02|      v2|  true|       null|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf02.wt02|      v2|  true|       null|</span></span>
<span class="line"><span>+-----------------------------+-----------------+--------+------+-----------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，可以在聚合查询中使用<code>ALIGN BY DEVICE</code>和<code>ORDER BY</code>子句，对聚合后的结果进行排序，示例代码如下所示：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> count</span><span style="color:#ABB2BF;">(*) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">group by</span><span style="color:#ABB2BF;"> ((</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">03</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;">],1m) </span><span style="color:#C678DD;">order by</span><span style="color:#ABB2BF;"> device </span><span style="color:#C678DD;">asc</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">time</span><span style="color:#C678DD;"> asc</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------+---------------+-------------+------------------+</span></span>
<span class="line"><span>|                         Time|           Device|count(hardware)|count(status)|count(temperature)|</span></span>
<span class="line"><span>+-----------------------------+-----------------+---------------+-------------+------------------+</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf01.wt01|           null|            1|                 1|</span></span>
<span class="line"><span>|2017-11-01T00:02:00.000+08:00|root.ln.wf01.wt01|           null|            0|                 0|</span></span>
<span class="line"><span>|2017-11-01T00:03:00.000+08:00|root.ln.wf01.wt01|           null|            0|                 0|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf02.wt02|              1|            1|              null|</span></span>
<span class="line"><span>|2017-11-01T00:02:00.000+08:00|root.ln.wf02.wt02|              0|            0|              null|</span></span>
<span class="line"><span>|2017-11-01T00:03:00.000+08:00|root.ln.wf02.wt02|              0|            0|              null|</span></span>
<span class="line"><span>+-----------------------------+-----------------+---------------+-------------+------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任意表达式排序" tabindex="-1"><a class="header-anchor" href="#任意表达式排序"><span>任意表达式排序</span></a></h3><p>除了IoTDB中规定的Time，Device关键字外，还可以通过<code>ORDER BY</code>子句对指定时间序列中任意列的表达式进行排序。</p><p>排序在通过<code>ASC</code>,<code>DESC</code>指定排序顺序的同时，可以通过<code>NULLS</code>语法来指定NULL值在排序中的优先级，<code>NULLS FIRST</code>默认NULL值在结果集的最上方，<code>NULLS LAST</code>则保证NULL值在结果集的最后。如果没有在子句中指定，则默认顺序为<code>ASC</code>，<code>NULLS LAST</code>。</p><p>对于如下的数据，将给出几个任意表达式的查询示例供参考：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-------------+-------+-------+--------+-------+</span></span>
<span class="line"><span>|                         Time|       Device|   base|  score|   bonus|  total|    </span></span>
<span class="line"><span>+-----------------------------+-------------+-------+-------+--------+-------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00|     root.one|     12|   50.0|    45.0|  107.0|  </span></span>
<span class="line"><span>|1970-01-02T08:00:00.000+08:00|     root.one|     10|   50.0|    45.0|  105.0|</span></span>
<span class="line"><span>|1970-01-03T08:00:00.000+08:00|     root.one|      8|   50.0|    45.0|  103.0|       </span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|     root.two|      9|   50.0|    15.0|   74.0|   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|     root.two|      8|   10.0|    15.0|   33.0|  </span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|   root.three|      9|   null|    24.0|   33.0|    </span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|   root.three|      8|   null|    22.5|   30.5|   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|   root.three|      7|   null|    23.5|   30.5|   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|    root.four|      9|   32.0|    45.0|   86.0|  </span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|    root.four|      8|   32.0|    45.0|   85.0|   </span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|    root.five|      7|   53.0|    44.0|  104.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|    root.five|      6|   54.0|    42.0|  102.0|     </span></span>
<span class="line"><span>+-----------------------------+-------------+-------+-------+--------+-------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要根据基础分数score对结果进行排序时，可以直接使用</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> score </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">order by</span><span style="color:#ABB2BF;"> score </span><span style="color:#C678DD;">desc</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会得到如下结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+---------+-----+</span></span>
<span class="line"><span>|                         Time|   Device|score|</span></span>
<span class="line"><span>+-----------------------------+---------+-----+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|root.five| 54.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|root.five| 53.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00| root.one| 50.0|</span></span>
<span class="line"><span>|1970-01-02T08:00:00.000+08:00| root.one| 50.0|</span></span>
<span class="line"><span>|1970-01-03T08:00:00.000+08:00| root.one| 50.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00| root.two| 50.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00| root.two| 50.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|root.four| 32.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|root.four| 32.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00| root.two| 10.0|</span></span>
<span class="line"><span>+-----------------------------+---------+-----+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当想要根据总分对结果进行排序，可以在order by子句中使用表达式进行计算</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> score,total </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">one</span><span style="color:#C678DD;"> order by</span><span style="color:#ABB2BF;"> base+score+bonus </span><span style="color:#C678DD;">desc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该sql等价于</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> score,total </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">one</span><span style="color:#C678DD;"> order by</span><span style="color:#ABB2BF;"> total </span><span style="color:#C678DD;">desc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+--------------+--------------+</span></span>
<span class="line"><span>|                         Time|root.one.score|root.one.total|</span></span>
<span class="line"><span>+-----------------------------+--------------+--------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00|          50.0|         107.0|</span></span>
<span class="line"><span>|1970-01-02T08:00:00.000+08:00|          50.0|         105.0|</span></span>
<span class="line"><span>|1970-01-03T08:00:00.000+08:00|          50.0|         103.0|</span></span>
<span class="line"><span>+-----------------------------+--------------+--------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果要对总分进行排序，且分数相同时依次根据score, base, bonus和提交时间进行排序时，可以通过多个表达式来指定多层排序</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> base, score, bonus, total </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">order by</span><span style="color:#ABB2BF;"> total </span><span style="color:#C678DD;">desc</span><span style="color:#C678DD;"> NULLS</span><span style="color:#C678DD;"> Last</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                                  score </span><span style="color:#C678DD;">desc</span><span style="color:#C678DD;"> NULLS</span><span style="color:#C678DD;"> Last</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                                  bonus </span><span style="color:#C678DD;">desc</span><span style="color:#C678DD;"> NULLS</span><span style="color:#C678DD;"> Last</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">                                  time</span><span style="color:#C678DD;"> desc</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到如下结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+----------+----+-----+-----+-----+</span></span>
<span class="line"><span>|                         Time|    Device|base|score|bonus|total|</span></span>
<span class="line"><span>+-----------------------------+----------+----+-----+-----+-----+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00|  root.one|  12| 50.0| 45.0|107.0|</span></span>
<span class="line"><span>|1970-01-02T08:00:00.000+08:00|  root.one|  10| 50.0| 45.0|105.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00| root.five|   7| 53.0| 44.0|104.0|</span></span>
<span class="line"><span>|1970-01-03T08:00:00.000+08:00|  root.one|   8| 50.0| 45.0|103.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00| root.five|   6| 54.0| 42.0|102.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00| root.four|   9| 32.0| 45.0| 86.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00| root.four|   8| 32.0| 45.0| 85.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|  root.two|   9| 50.0| 15.0| 74.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00|  root.two|   9| 50.0| 15.0| 74.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|  root.two|   8| 10.0| 15.0| 33.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|root.three|   9| null| 24.0| 33.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|root.three|   7| null| 23.5| 30.5|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|root.three|   8| null| 22.5| 30.5|</span></span>
<span class="line"><span>+-----------------------------+----------+----+-----+-----+-----+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在order by中同样可以使用聚合查询表达式</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> min_value(total) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">order by</span><span style="color:#ABB2BF;"> min_value(total) </span><span style="color:#C678DD;">asc</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+----------+----------------+</span></span>
<span class="line"><span>|    Device|min_value(total)|</span></span>
<span class="line"><span>+----------+----------------+</span></span>
<span class="line"><span>|root.three|            30.5|</span></span>
<span class="line"><span>|  root.two|            33.0|</span></span>
<span class="line"><span>| root.four|            85.0|</span></span>
<span class="line"><span>| root.five|           102.0|</span></span>
<span class="line"><span>|  root.one|           103.0|</span></span>
<span class="line"><span>+----------+----------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在查询中指定多列，未被排序的列会随着行和排序列一起改变顺序，当排序列相同时行的顺序和具体实现有关（没有固定顺序）</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> min_value(total),max_value(base) </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">order by</span><span style="color:#ABB2BF;"> max_value(total) </span><span style="color:#C678DD;">desc</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到结果如下<br> ·</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+----------+----------------+---------------+</span></span>
<span class="line"><span>|    Device|min_value(total)|max_value(base)|</span></span>
<span class="line"><span>+----------+----------------+---------------+</span></span>
<span class="line"><span>|  root.one|           103.0|             12|</span></span>
<span class="line"><span>| root.five|           102.0|              7|</span></span>
<span class="line"><span>| root.four|            85.0|              9|</span></span>
<span class="line"><span>|  root.two|            33.0|              9|</span></span>
<span class="line"><span>|root.three|            30.5|              9|</span></span>
<span class="line"><span>+----------+----------------+---------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Order by device, time可以和order by expression共同使用</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> score </span><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">order by</span><span style="color:#ABB2BF;"> device </span><span style="color:#C678DD;">asc</span><span style="color:#ABB2BF;">, score </span><span style="color:#C678DD;">desc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">time</span><span style="color:#C678DD;"> asc</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会得到如下结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+---------+-----+</span></span>
<span class="line"><span>|                         Time|   Device|score|</span></span>
<span class="line"><span>+-----------------------------+---------+-----+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.040+08:00|root.five| 54.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.030+08:00|root.five| 53.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|root.four| 32.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00|root.four| 32.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00| root.one| 50.0|</span></span>
<span class="line"><span>|1970-01-02T08:00:00.000+08:00| root.one| 50.0|</span></span>
<span class="line"><span>|1970-01-03T08:00:00.000+08:00| root.one| 50.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.000+08:00| root.two| 50.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00| root.two| 50.0|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.020+08:00| root.two| 10.0|</span></span>
<span class="line"><span>+-----------------------------+---------+-----+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询对齐模式-align-by-device-子句" tabindex="-1"><a class="header-anchor" href="#查询对齐模式-align-by-device-子句"><span>查询对齐模式（ALIGN BY DEVICE 子句）</span></a></h2><p>在 IoTDB 中，查询结果集<strong>默认按照时间对齐</strong>，包含一列时间列和若干个值列，每一行数据各列的时间戳相同。</p><p>除按照时间对齐外，还支持以下对齐模式：</p><ul><li>按设备对齐 <code>ALIGN BY DEVICE</code></li></ul><h3 id="按设备对齐" tabindex="-1"><a class="header-anchor" href="#按设备对齐"><span>按设备对齐</span></a></h3><p>在按设备对齐模式下，设备名会单独作为一列出现，查询结果集包含一列时间列、一列设备列和若干个值列。如果 <code>SELECT</code> 子句中选择了 <code>N</code> 列，则结果集包含 <code>N + 2</code> 列（时间列和设备名字列）。</p><p>在默认情况下，结果集按照 <code>Device</code> 进行排列，在每个 <code>Device</code> 内按照 <code>Time</code> 列升序排序。</p><p>当查询多个设备时，要求设备之间同名的列数据类型相同。</p><p>为便于理解，可以按照关系模型进行对应。设备可以视为关系模型中的表，选择的列可以视为表中的列，<code>Time + Device</code> 看做其主键。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">ln</span><span style="color:#ABB2BF;">.** </span><span style="color:#C678DD;">where</span><span style="color:#C678DD;"> time</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 2017</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">-01T00:</span><span style="color:#D19A66;">01</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">00</span><span style="color:#ABB2BF;"> align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------------+-----------+------+--------+</span></span>
<span class="line"><span>|                         Time|           Device|temperature|status|hardware|</span></span>
<span class="line"><span>+-----------------------------+-----------------+-----------+------+--------+</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|root.ln.wf01.wt01|      25.96|  true|    null|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf01.wt01|      24.36|  true|    null|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|root.ln.wf02.wt02|       null|  true|      v1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|root.ln.wf02.wt02|       null| false|      v2|</span></span>
<span class="line"><span>|2017-11-01T00:00:00.000+08:00|root.ln.wf02.wt02|       null|  true|      v2|</span></span>
<span class="line"><span>|2017-11-01T00:01:00.000+08:00|root.ln.wf02.wt02|       null|  true|      v2|</span></span>
<span class="line"><span>+-----------------------------+-----------------+-----------+------+--------+</span></span>
<span class="line"><span>Total line number = 6</span></span>
<span class="line"><span>It costs 0.012s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设备对齐模式下的排序-1" tabindex="-1"><a class="header-anchor" href="#设备对齐模式下的排序-1"><span>设备对齐模式下的排序</span></a></h3><p>在设备对齐模式下，默认按照设备名的字典序升序排列，每个设备内部按照时间戳大小升序排列，可以通过 <code>ORDER BY</code> 子句调整设备列和时间列的排序优先级。</p>`,461)),a("p",null,[s[28]||(s[28]=n("详细说明及示例见文档 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/SQL-Manual/Operator-and-Expression.html"},{default:p(()=>s[27]||(s[27]=[n("结果集排序")])),_:1}),s[29]||(s[29]=n("。"))]),s[49]||(s[49]=o(`<h2 id="查询写回-into-子句" tabindex="-1"><a class="header-anchor" href="#查询写回-into-子句"><span>查询写回（INTO 子句）</span></a></h2><p><code>SELECT INTO</code> 语句用于将查询结果写入一系列指定的时间序列中。</p><p>应用场景如下：</p><ul><li><strong>实现 IoTDB 内部 ETL</strong>：对原始数据进行 ETL 处理后写入新序列。</li><li><strong>查询结果存储</strong>：将查询结果进行持久化存储，起到类似物化视图的作用。</li><li><strong>非对齐序列转对齐序列</strong>：对齐序列从0.13版本开始支持，可以通过该功能将非对齐序列的数据写入新的对齐序列中。</li></ul><h3 id="语法定义-2" tabindex="-1"><a class="header-anchor" href="#语法定义-2"><span>语法定义</span></a></h3><h4 id="整体描述" tabindex="-1"><a class="header-anchor" href="#整体描述"><span>整体描述</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">selectIntoStatement</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#C678DD;">SELECT</span></span>
<span class="line"><span style="color:#ABB2BF;">        resultColumn </span><span style="color:#E06C75;">[, resultColumn]</span><span style="color:#ABB2BF;"> ...</span></span>
<span class="line"><span style="color:#C678DD;">        INTO</span><span style="color:#ABB2BF;"> intoItem </span><span style="color:#E06C75;">[, intoItem]</span><span style="color:#ABB2BF;"> ...</span></span>
<span class="line"><span style="color:#C678DD;">        FROM</span><span style="color:#ABB2BF;"> prefixPath </span><span style="color:#E06C75;">[, prefixPath]</span><span style="color:#ABB2BF;"> ...</span></span>
<span class="line"><span style="color:#E06C75;">        [WHERE whereCondition]</span></span>
<span class="line"><span style="color:#E06C75;">        [GROUP BY groupByTimeClause, groupByLevelClause]</span></span>
<span class="line"><span style="color:#E06C75;">        [FILL {PREVIOUS | LINEAR | constant}]</span></span>
<span class="line"><span style="color:#E06C75;">        [LIMIT rowLimit OFFSET rowOffset]</span></span>
<span class="line"><span style="color:#E06C75;">        [ALIGN BY DEVICE]</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">intoItem</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#E06C75;">[ALIGNED]</span><span style="color:#ABB2BF;"> intoDevicePath </span><span style="color:#98C379;">&#39;(&#39;</span><span style="color:#ABB2BF;"> intoMeasurementName </span><span style="color:#E06C75;">[&#39;,&#39; intoMeasurementName]</span><span style="color:#ABB2BF;">* </span><span style="color:#98C379;">&#39;)&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="into-子句-1" tabindex="-1"><a class="header-anchor" href="#into-子句-1"><span><code>INTO</code> 子句</span></a></h4><p><code>INTO</code> 子句由若干个 <code>intoItem</code> 构成。</p><p>每个 <code>intoItem</code> 由一个目标设备路径和一个包含若干目标物理量名的列表组成（与 <code>INSERT</code> 语句中的 <code>INTO</code> 子句写法类似）。</p><p>其中每个目标物理量名与目标设备路径组成一个目标序列，一个 <code>intoItem</code> 包含若干目标序列。例如：<code>root.sg_copy.d1(s1, s2)</code> 指定了两条目标序列 <code>root.sg_copy.d1.s1</code> 和 <code>root.sg_copy.d1.s2</code>。</p><p><code>INTO</code> 子句指定的目标序列要能够与查询结果集的列一一对应。具体规则如下：</p><ul><li><strong>按时间对齐</strong>（默认）：全部 <code>intoItem</code> 包含的目标序列数量要与查询结果集的列数（除时间列外）一致，且按照表头从左到右的顺序一一对应。</li><li><strong>按设备对齐</strong>（使用 <code>ALIGN BY DEVICE</code>）：全部 <code>intoItem</code> 中指定的目标设备数和查询的设备数（即 <code>FROM</code> 子句中路径模式匹配的设备数）一致，且按照结果集设备的输出顺序一一对应。<br> 为每个目标设备指定的目标物理量数量要与查询结果集的列数（除时间和设备列外）一致，且按照表头从左到右的顺序一一对应。</li></ul><p>下面通过示例进一步说明：</p><ul><li><strong>示例 1</strong>（按时间对齐）</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#98C379;"> s1,</span><span style="color:#98C379;"> s2</span><span style="color:#98C379;"> into</span><span style="color:#98C379;"> root.sg_copy.d1</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t1</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.sg_copy.d2</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t1,</span><span style="color:#98C379;"> t2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.sg_copy.d1</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">from</span><span style="color:#98C379;"> root.sg.d1,</span><span style="color:#98C379;"> root.sg.d2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg.d1.s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d1.t1</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">8000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg.d2.s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d2.t1</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg.d1.s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d2.t2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">12000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg.d2.s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d1.t2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.725s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句将 <code>root.sg</code> database 下四条序列的查询结果写入到 <code>root.sg_copy</code> database 下指定的四条序列中。注意，<code>root.sg_copy.d2(t1, t2)</code> 也可以写做 <code>root.sg_copy.d2(t1), root.sg_copy.d2(t2)</code>。</p><p>可以看到，<code>INTO</code> 子句的写法非常灵活，只要满足组合出的目标序列没有重复，且与查询结果列一一对应即可。</p><blockquote><p><code>CLI</code> 展示的结果集中，各列的含义如下：</p><ul><li><code>source column</code> 列表示查询结果的列名。</li><li><code>target timeseries</code> 表示对应列写入的目标序列。</li><li><code>written</code> 表示预期写入的数据量。</li></ul></blockquote><ul><li><strong>示例 2</strong>（按时间对齐）</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#98C379;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> s2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> last_value</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">into</span><span style="color:#98C379;"> root.agg.count</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1_add_s2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.agg.last_value</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">from</span><span style="color:#98C379;"> root.sg.d1</span><span style="color:#98C379;"> group</span><span style="color:#98C379;"> by</span><span style="color:#ABB2BF;"> ([0, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">), 10ms);</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------------------+-------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|                         </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|        </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------------------+-------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">count(root.sg.d1.s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> root.sg.d1.s2</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.agg.count.s1_add_s2</span><span style="color:#ABB2BF;">|      </span><span style="color:#61AFEF;">10</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------------------+-------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|             </span><span style="color:#61AFEF;">last_value(root.sg.d1.s2</span><span style="color:#ABB2BF;">)|   </span><span style="color:#61AFEF;">root.agg.last_value.s2</span><span style="color:#ABB2BF;">|      </span><span style="color:#61AFEF;">10</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------------------+-------------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.375s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句将聚合查询的结果存储到指定序列中。</p><ul><li><strong>示例 3</strong>（按设备对齐）</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#98C379;"> s1,</span><span style="color:#98C379;"> s2</span><span style="color:#98C379;"> into</span><span style="color:#98C379;"> root.sg_copy.d1</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t1,</span><span style="color:#98C379;"> t2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.sg_copy.d2</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t1,</span><span style="color:#98C379;"> t2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">from</span><span style="color:#98C379;"> root.sg.d1,</span><span style="color:#98C379;"> root.sg.d2</span><span style="color:#98C379;"> align</span><span style="color:#98C379;"> by</span><span style="color:#98C379;"> device</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> device</span><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d1</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d1.t1</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">8000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d1</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d1.t2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">11000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d2</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d2.t1</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">12000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d2</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d2.t2</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">9000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.625s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句同样是将 <code>root.sg</code> database 下四条序列的查询结果写入到 <code>root.sg_copy</code> database 下指定的四条序列中。但在按设备对齐中，<code>intoItem</code> 的数量必须和查询的设备数量一致，每个查询设备对应一个 <code>intoItem</code>。</p><blockquote><p>按设备对齐查询时，<code>CLI</code> 展示的结果集多出一列 <code>source device</code> 列表示查询的设备。</p></blockquote><ul><li><strong>示例 4</strong>（按设备对齐）</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#98C379;"> s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> s2</span><span style="color:#98C379;"> into</span><span style="color:#98C379;"> root.expr.add</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">d1s1_d1s2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.expr.add</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">d2s1_d2s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">from</span><span style="color:#98C379;"> root.sg.d1,</span><span style="color:#98C379;"> root.sg.d2</span><span style="color:#98C379;"> align</span><span style="color:#98C379;"> by</span><span style="color:#98C379;"> device</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> device</span><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|       </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d1</span><span style="color:#ABB2BF;">|       </span><span style="color:#61AFEF;">s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.expr.add.d1s1_d1s2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d2</span><span style="color:#ABB2BF;">|       </span><span style="color:#61AFEF;">s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.expr.add.d2s1_d2s2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+------------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.532s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句将表达式计算的结果存储到指定序列中。</p><h4 id="使用变量占位符" tabindex="-1"><a class="header-anchor" href="#使用变量占位符"><span>使用变量占位符</span></a></h4><p>特别地，可以使用变量占位符描述目标序列与查询序列之间的对应规律，简化语句书写。目前支持以下两种变量占位符：</p><ul><li>后缀复制符 <code>::</code>：复制查询设备后缀（或物理量），表示从该层开始一直到设备的最后一层（或物理量），目标设备的节点名（或物理量名）与查询的设备对应的节点名（或物理量名）相同。</li><li>单层节点匹配符 <code>\${i}</code>：表示目标序列当前层节点名与查询序列的第<code>i</code>层节点名相同。比如，对于路径<code>root.sg1.d1.s1</code>而言，<code>\${1}</code>表示<code>sg1</code>，<code>\${2}</code>表示<code>d1</code>，<code>\${3}</code>表示<code>s1</code>。</li></ul><p>在使用变量占位符时，<code>intoItem</code>与查询结果集列的对应关系不能存在歧义，具体情况分类讨论如下：</p><h5 id="按时间对齐-默认" tabindex="-1"><a class="header-anchor" href="#按时间对齐-默认"><span>按时间对齐（默认）</span></a></h5><blockquote><p>注：变量占位符<strong>只能描述序列与序列之间的对应关系</strong>，如果查询中包含聚合、表达式计算，此时查询结果中的列无法与某个序列对应，因此目标设备和目标物理量都不能使用变量占位符。</p></blockquote><h6 id="_1-目标设备不使用变量占位符-目标物理量列表使用变量占位符" tabindex="-1"><a class="header-anchor" href="#_1-目标设备不使用变量占位符-目标物理量列表使用变量占位符"><span>（1）目标设备不使用变量占位符 &amp; 目标物理量列表使用变量占位符</span></a></h6><p><strong>限制：</strong></p><ol><li>每个 <code>intoItem</code> 中，物理量列表的长度必须为 1。<br>（如果长度可以大于1，例如 <code>root.sg1.d1(::, s1)</code>，无法确定具体哪些列与<code>::</code>匹配）</li><li><code>intoItem</code> 数量为 1，或与查询结果集列数一致。<br>（在每个目标物理量列表长度均为 1 的情况下，若 <code>intoItem</code> 只有 1 个，此时表示全部查询序列写入相同设备；若 <code>intoItem</code> 数量与查询序列一致，则表示为每个查询序列指定一个目标设备；若 <code>intoItem</code> 大于 1 小于查询序列数，此时无法与查询序列一一对应）</li></ol><p><strong>匹配方法：</strong> 每个查询序列指定目标设备，而目标物理量根据变量占位符生成。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, s2</span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(::), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(s1), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(\${</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">}), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(::)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句等价于：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, s2</span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(s1), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(s1), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(s2), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(s2)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在这种情况下，语句并不能得到很好地简化。</p><h6 id="_2-目标设备使用变量占位符-目标物理量列表不使用变量占位符" tabindex="-1"><a class="header-anchor" href="#_2-目标设备使用变量占位符-目标物理量列表不使用变量占位符"><span>（2）目标设备使用变量占位符 &amp; 目标物理量列表不使用变量占位符</span></a></h6><p><strong>限制：</strong> 全部 <code>intoItem</code> 中目标物理量的数量与查询结果集列数一致。</p><p><strong>匹配方式：</strong> 为每个查询序列指定了目标物理量，目标设备根据对应目标物理量所在 <code>intoItem</code> 的目标设备占位符生成。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#D19A66;"> d1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">d1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">d2</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">d3</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s4</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#ABB2BF;"> ::(s1_1, s2_2), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2_2(s3_3), </span><span style="color:#C678DD;">root</span><span style="color:#ABB2BF;">.\${</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">}_copy.::(s4)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-目标设备使用变量占位符-目标物理量列表使用变量占位符" tabindex="-1"><a class="header-anchor" href="#_3-目标设备使用变量占位符-目标物理量列表使用变量占位符"><span>（3）目标设备使用变量占位符 &amp; 目标物理量列表使用变量占位符</span></a></h6><p><strong>限制：</strong> <code>intoItem</code> 只有一个且物理量列表的长度为 1。</p><p><strong>匹配方式：</strong> 每个查询序列根据变量占位符可以得到一个目标序列。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_bk</span><span style="color:#ABB2BF;">.::(::) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.**;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将 <code>root.sg</code> 下全部序列的查询结果写到 <code>root.sg_bk</code>，设备名后缀和物理量名保持不变。</p><h5 id="按设备对齐-使用-align-by-device" tabindex="-1"><a class="header-anchor" href="#按设备对齐-使用-align-by-device"><span>按设备对齐（使用 <code>ALIGN BY DEVICE</code>）</span></a></h5><blockquote><p>注：变量占位符<strong>只能描述序列与序列之间的对应关系</strong>，如果查询中包含聚合、表达式计算，此时查询结果中的列无法与某个物理量对应，因此目标物理量不能使用变量占位符。</p></blockquote><h6 id="_1-目标设备不使用变量占位符-目标物理量列表使用变量占位符-1" tabindex="-1"><a class="header-anchor" href="#_1-目标设备不使用变量占位符-目标物理量列表使用变量占位符-1"><span>（1）目标设备不使用变量占位符 &amp; 目标物理量列表使用变量占位符</span></a></h6><p><strong>限制：</strong> 每个 <code>intoItem</code> 中，如果物理量列表使用了变量占位符，则列表的长度必须为 1。</p><p><strong>匹配方法：</strong> 每个查询序列指定目标设备，而目标物理量根据变量占位符生成。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, s2, s3, s4</span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">backup_sg</span><span style="color:#ABB2BF;">.d1(s1, s2, s3, s4), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">backup_sg</span><span style="color:#ABB2BF;">.d2(::), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d3(backup_\${</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d3</span></span>
<span class="line"><span style="color:#ABB2BF;">align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2-目标设备使用变量占位符-目标物理量列表不使用变量占位符-1" tabindex="-1"><a class="header-anchor" href="#_2-目标设备使用变量占位符-目标物理量列表不使用变量占位符-1"><span>（2）目标设备使用变量占位符 &amp; 目标物理量列表不使用变量占位符</span></a></h6><p><strong>限制：</strong> <code>intoItem</code> 只有一个。（如果出现多个带占位符的 <code>intoItem</code>，我们将无法得知每个 <code>intoItem</code> 需要匹配哪几个源设备）</p><p><strong>匹配方式：</strong> 每个查询设备根据变量占位符得到一个目标设备，每个设备下结果集各列写入的目标物理量由目标物理量列表指定。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(s1), </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(s2) + </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(s3), </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s4)</span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">agg_</span><span style="color:#ABB2BF;">\${</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">}.::(avg_s1, sum_s2_add_s3, count_s4)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.**</span></span>
<span class="line"><span style="color:#ABB2BF;">align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-目标设备使用变量占位符-目标物理量列表使用变量占位符-1" tabindex="-1"><a class="header-anchor" href="#_3-目标设备使用变量占位符-目标物理量列表使用变量占位符-1"><span>（3）目标设备使用变量占位符 &amp; 目标物理量列表使用变量占位符</span></a></h6><p><strong>限制：</strong> <code>intoItem</code> 只有一个且物理量列表的长度为 1。</p><p><strong>匹配方式：</strong> 每个查询序列根据变量占位符可以得到一个目标序列。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">into</span><span style="color:#ABB2BF;"> ::(backup_\${</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.** align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将 <code>root.sg</code> 下每条序列的查询结果写到相同设备下，物理量名前加<code>backup_</code>。</p><h4 id="指定目标序列为对齐序列" tabindex="-1"><a class="header-anchor" href="#指定目标序列为对齐序列"><span>指定目标序列为对齐序列</span></a></h4><p>通过 <code>ALIGNED</code> 关键词可以指定写入的目标设备为对齐写入，每个 <code>intoItem</code> 可以独立设置。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, s2 </span><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(t1, t2), aligned </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(t1, t2) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2 align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该语句指定了 <code>root.sg_copy.d1</code> 是非对齐设备，<code>root.sg_copy.d2</code>是对齐设备。</p><h4 id="不支持使用的查询子句" tabindex="-1"><a class="header-anchor" href="#不支持使用的查询子句"><span>不支持使用的查询子句</span></a></h4><ul><li><code>SLIMIT</code>、<code>SOFFSET</code>：查询出来的列不确定，功能不清晰，因此不支持。</li><li><code>LAST</code>查询、<code>GROUP BY TAGS</code>、<code>DISABLE ALIGN</code>：表结构和写入结构不一致，因此不支持。</li></ul><h4 id="其他要注意的点" tabindex="-1"><a class="header-anchor" href="#其他要注意的点"><span>其他要注意的点</span></a></h4>`,81)),a("ul",null,[s[33]||(s[33]=a("li",null,"对于一般的聚合查询，时间戳是无意义的，约定使用 0 来存储。",-1)),a("li",null,[s[31]||(s[31]=n("当目标序列存在时，需要保证源序列和目标时间序列的数据类型兼容。关于数据类型的兼容性，查看文档 ")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/Background-knowledge/Data-Type.html#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%85%BC%E5%AE%B9%E6%80%A7"},{default:p(()=>s[30]||(s[30]=[n("数据类型")])),_:1}),s[32]||(s[32]=n("。"))]),s[34]||(s[34]=a("li",null,"当目标序列不存在时，系统将自动创建目标序列（包括 database）。",-1)),s[35]||(s[35]=a("li",null,"当查询的序列不存在或查询的序列不存在数据，则不会自动创建目标序列。",-1))]),s[50]||(s[50]=o(`<h3 id="应用举例" tabindex="-1"><a class="header-anchor" href="#应用举例"><span>应用举例</span></a></h3><h4 id="实现-iotdb-内部-etl" tabindex="-1"><a class="header-anchor" href="#实现-iotdb-内部-etl"><span>实现 IoTDB 内部 ETL</span></a></h4><p>对原始数据进行 ETL 处理后写入新序列。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IOTDB</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">SELECT</span><span style="color:#98C379;"> preprocess_udf</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1,</span><span style="color:#98C379;"> s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">INTO</span><span style="color:#98C379;"> ::</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">preprocessed_s1,</span><span style="color:#98C379;"> preprocessed_s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">FROM</span><span style="color:#98C379;"> root.sg.</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;"> ALIGN</span><span style="color:#98C379;"> BY</span><span style="color:#98C379;"> DEIVCE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> device</span><span style="color:#ABB2BF;">|      </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|          </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">preprocess_udf(s1</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.d1.preprocessed_s1</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">8000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">preprocess_udf(s2</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.d1.preprocessed_s2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">preprocess_udf(s1</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.d2.preprocessed_s1</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">11000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">preprocess_udf(s2</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.d2.preprocessed_s2</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">9000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+---------------------------+--------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上语句使用自定义函数对数据进行预处理，将预处理后的结果持久化存储到新序列中。</p><h4 id="查询结果存储" tabindex="-1"><a class="header-anchor" href="#查询结果存储"><span>查询结果存储</span></a></h4><p>将查询结果进行持久化存储，起到类似物化视图的作用。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IOTDB</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">SELECT</span><span style="color:#98C379;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> last_value</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">INTO</span><span style="color:#98C379;"> root.sg.agg_</span><span style="color:#E06C75;font-style:italic;">\${2}</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">count_s1,</span><span style="color:#98C379;"> last_value_s1</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">FROM</span><span style="color:#98C379;"> root.sg1.d1</span><span style="color:#98C379;"> GROUP</span><span style="color:#98C379;"> BY</span><span style="color:#ABB2BF;"> ([0, </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">), 10ms);</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+-----------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|             </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+-----------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|      </span><span style="color:#61AFEF;">count(root.sg.d1.s1</span><span style="color:#ABB2BF;">)|      </span><span style="color:#61AFEF;">root.sg.agg_d1.count_s1</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">1000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+-----------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">last_value(root.sg.d1.s2</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.agg_d1.last_value_s2</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">1000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+-----------------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.115s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上语句将降采样查询的结果持久化存储到新序列中。</p><h4 id="非对齐序列转对齐序列" tabindex="-1"><a class="header-anchor" href="#非对齐序列转对齐序列"><span>非对齐序列转对齐序列</span></a></h4><p>对齐序列从 0.13 版本开始支持，可以通过该功能将非对齐序列的数据写入新的对齐序列中。</p><p><strong>注意：</strong> 建议配合使用 <code>LIMIT &amp; OFFSET</code> 子句或 <code>WHERE</code> 子句（时间过滤条件）对数据进行分批，防止单次操作的数据量过大。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IOTDB</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">SELECT</span><span style="color:#98C379;"> s1,</span><span style="color:#98C379;"> s2</span><span style="color:#98C379;"> INTO</span><span style="color:#98C379;"> ALIGNED</span><span style="color:#98C379;"> root.sg1.aligned_d</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1,</span><span style="color:#98C379;"> s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">FROM</span><span style="color:#98C379;"> root.sg1.non_aligned_d</span><span style="color:#98C379;"> WHERE</span><span style="color:#98C379;"> time</span><span style="color:#ABB2BF;"> &gt;</span><span style="color:#98C379;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#98C379;"> and</span><span style="color:#98C379;"> time</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|             </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|     </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg1.non_aligned_d.s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg1.aligned_d.s1</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg1.non_aligned_d.s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg1.aligned_d.s2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.375s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上语句将一组非对齐的序列的数据迁移到一组对齐序列。</p><h3 id="相关用户权限" tabindex="-1"><a class="header-anchor" href="#相关用户权限"><span>相关用户权限</span></a></h3><p>用户必须有下列权限才能正常执行查询写回语句：</p><ul><li>所有 <code>SELECT</code> 子句中源序列的 <code>WRITE_SCHEMA</code> 权限。</li><li>所有 <code>INTO</code> 子句中目标序列 <code>WRITE_DATA</code> 权限。</li></ul>`,17)),a("p",null,[s[37]||(s[37]=n("更多用户权限相关的内容，请参考")),e(l,{to:"/zh/UserGuide/V2.0.1/Tree/User-Manual/Authority-Management.html"},{default:p(()=>s[36]||(s[36]=[n("权限管理语句")])),_:1}),s[38]||(s[38]=n("。"))]),s[51]||(s[51]=o('<h3 id="相关配置参数" tabindex="-1"><a class="header-anchor" href="#相关配置参数"><span>相关配置参数</span></a></h3><ul><li><p><code>select_into_insert_tablet_plan_row_limit</code></p><table><thead><tr><th>参数名</th><th>select_into_insert_tablet_plan_row_limit</th></tr></thead><tbody><tr><td>描述</td><td>写入过程中每一批 <code>Tablet</code> 的最大行数</td></tr><tr><td>类型</td><td>int32</td></tr><tr><td>默认值</td><td>10000</td></tr><tr><td>改后生效方式</td><td>重启后生效</td></tr></tbody></table></li></ul>',2))])}const u=r(d,[["render",B],["__file","Query-Data.html.vue"]]),b=JSON.parse('{"path":"/zh/UserGuide/V2.0.1/Tree/Basic-Concept/Query-Data.html","title":"数据查询","lang":"zh-CN","frontmatter":{"description":"数据查询 概述 在 IoTDB 中，使用 SELECT 语句从一条或多条时间序列中查询数据，IoTDB 不区分历史数据和实时数据，用户可以用统一的sql语法进行查询，通过 WHERE 子句中的时间过滤谓词决定查询的时间范围。 语法定义 语法说明 SELECT 子句 SELECT 子句指定查询的输出，由若干个 selectExpr 组成。 每个 sele...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://iotdb.apache.org/UserGuide/V2.0.1/Tree/Basic-Concept/Query-Data.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/zh/UserGuide/V2.0.1/Tree/Basic-Concept/Query-Data.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"数据查询"}],["meta",{"property":"og:description","content":"数据查询 概述 在 IoTDB 中，使用 SELECT 语句从一条或多条时间序列中查询数据，IoTDB 不区分历史数据和实时数据，用户可以用统一的sql语法进行查询，通过 WHERE 子句中的时间过滤谓词决定查询的时间范围。 语法定义 语法说明 SELECT 子句 SELECT 子句指定查询的输出，由若干个 selectExpr 组成。 每个 sele..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-09T07:17:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-09T07:17:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据查询\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-09T07:17:38.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"语法定义","slug":"语法定义","link":"#语法定义","children":[]},{"level":3,"title":"语法说明","slug":"语法说明","link":"#语法说明","children":[]},{"level":3,"title":"SQL 示例","slug":"sql-示例","link":"#sql-示例","children":[]},{"level":3,"title":"查询执行接口","slug":"查询执行接口","link":"#查询执行接口","children":[]}]},{"level":2,"title":"选择表达式（SELECT FROM 子句）","slug":"选择表达式-select-from-子句","link":"#选择表达式-select-from-子句","children":[{"level":3,"title":"使用别名","slug":"使用别名","link":"#使用别名","children":[]},{"level":3,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":3,"title":"嵌套表达式举例","slug":"嵌套表达式举例","link":"#嵌套表达式举例","children":[]},{"level":3,"title":"最新点查询","slug":"最新点查询","link":"#最新点查询","children":[]}]},{"level":2,"title":"查询过滤条件（WHERE 子句）","slug":"查询过滤条件-where-子句","link":"#查询过滤条件-where-子句","children":[{"level":3,"title":"时间过滤条件","slug":"时间过滤条件","link":"#时间过滤条件","children":[]},{"level":3,"title":"值过滤条件","slug":"值过滤条件","link":"#值过滤条件","children":[]},{"level":3,"title":"模糊查询","slug":"模糊查询","link":"#模糊查询","children":[]}]},{"level":2,"title":"分段分组聚合（GROUP BY 子句）","slug":"分段分组聚合-group-by-子句","link":"#分段分组聚合-group-by-子句","children":[{"level":3,"title":"分段聚合","slug":"分段聚合","link":"#分段聚合","children":[]},{"level":3,"title":"分组聚合","slug":"分组聚合","link":"#分组聚合","children":[]}]},{"level":2,"title":"聚合结果过滤（HAVING 子句）","slug":"聚合结果过滤-having-子句","link":"#聚合结果过滤-having-子句","children":[]},{"level":2,"title":"结果集补空值（FILL 子句）","slug":"结果集补空值-fill-子句","link":"#结果集补空值-fill-子句","children":[{"level":3,"title":"功能介绍","slug":"功能介绍","link":"#功能介绍","children":[]},{"level":3,"title":"语法定义","slug":"语法定义-1","link":"#语法定义-1","children":[]},{"level":3,"title":"填充方式","slug":"填充方式","link":"#填充方式","children":[]}]},{"level":2,"title":"查询结果分页（LIMIT/SLIMIT 子句）","slug":"查询结果分页-limit-slimit-子句","link":"#查询结果分页-limit-slimit-子句","children":[{"level":3,"title":"按行分页","slug":"按行分页","link":"#按行分页","children":[]},{"level":3,"title":"按列分页","slug":"按列分页","link":"#按列分页","children":[]}]},{"level":2,"title":"结果集排序（ORDER BY 子句）","slug":"结果集排序-order-by-子句","link":"#结果集排序-order-by-子句","children":[{"level":3,"title":"时间对齐模式下的排序","slug":"时间对齐模式下的排序","link":"#时间对齐模式下的排序","children":[]},{"level":3,"title":"设备对齐模式下的排序","slug":"设备对齐模式下的排序","link":"#设备对齐模式下的排序","children":[]},{"level":3,"title":"任意表达式排序","slug":"任意表达式排序","link":"#任意表达式排序","children":[]}]},{"level":2,"title":"查询对齐模式（ALIGN BY DEVICE 子句）","slug":"查询对齐模式-align-by-device-子句","link":"#查询对齐模式-align-by-device-子句","children":[{"level":3,"title":"按设备对齐","slug":"按设备对齐","link":"#按设备对齐","children":[]},{"level":3,"title":"设备对齐模式下的排序","slug":"设备对齐模式下的排序-1","link":"#设备对齐模式下的排序-1","children":[]}]},{"level":2,"title":"查询写回（INTO 子句）","slug":"查询写回-into-子句","link":"#查询写回-into-子句","children":[{"level":3,"title":"语法定义","slug":"语法定义-2","link":"#语法定义-2","children":[]},{"level":3,"title":"应用举例","slug":"应用举例","link":"#应用举例","children":[]},{"level":3,"title":"相关用户权限","slug":"相关用户权限","link":"#相关用户权限","children":[]},{"level":3,"title":"相关配置参数","slug":"相关配置参数","link":"#相关配置参数","children":[]}]}],"git":{"createdTime":1688958677000,"updatedTime":1736407058000,"contributors":[{"name":"CritasWang","username":"CritasWang","email":"critas@outlook.com","commits":2,"url":"https://github.com/CritasWang"},{"name":"majialin","username":"majialin","email":"107627937+mal117@users.noreply.github.com","commits":1,"url":"https://github.com/majialin"},{"name":"W1y1r","username":"W1y1r","email":"150988475+W1y1r@users.noreply.github.com","commits":4,"url":"https://github.com/W1y1r"},{"name":"Jackie Tien","username":"Jackie Tien","email":"jackietien97@gmail.com","commits":2,"url":"https://github.com/Jackie Tien"},{"name":"wanghui42","username":"wanghui42","email":"105700158+wanghui42@users.noreply.github.com","commits":1,"url":"https://github.com/wanghui42"},{"name":"Tansgr","username":"Tansgr","email":"101696091+tanxilo@users.noreply.github.com","commits":1,"url":"https://github.com/Tansgr"},{"name":"Lei","username":"Lei","email":"33376433+LeiRui@users.noreply.github.com","commits":1,"url":"https://github.com/Lei"}]},"readingTime":{"minutes":80.55,"words":24165},"filePathRelative":"zh/UserGuide/V2.0.1/Tree/Basic-Concept/Query-Data.md","localizedDate":"2023年7月10日","autoDesc":true}');export{u as comp,b as data};
