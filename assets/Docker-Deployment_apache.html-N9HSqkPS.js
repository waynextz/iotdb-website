import{_ as n,c as a,b as e,o as l}from"./app-Blz7MdAO.js";const o={};function t(i,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="docker-deployment" tabindex="-1"><a class="header-anchor" href="#docker-deployment"><span>Docker Deployment</span></a></h1><h2 id="environmental-preparation" tabindex="-1"><a class="header-anchor" href="#environmental-preparation"><span>Environmental Preparation</span></a></h2><h3 id="docker-installation" tabindex="-1"><a class="header-anchor" href="#docker-installation"><span>Docker Installation</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">#Taking Ubuntu </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> an example, other operating systems can search </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> installation methods themselves</span></span>
<span class="line"><span style="color:#ABB2BF;">#step1: Install some necessary </span><span style="color:#C678DD;">system</span><span style="color:#ABB2BF;"> tools</span></span>
<span class="line"><span style="color:#ABB2BF;">sudo apt-</span><span style="color:#C678DD;">get</span><span style="color:#C678DD;"> update</span></span>
<span class="line"><span style="color:#ABB2BF;">sudo apt-</span><span style="color:#C678DD;">get</span><span style="color:#ABB2BF;"> -y install apt-transport-https ca-certificates curl software-properties-common</span></span>
<span class="line"><span style="color:#ABB2BF;">#step2: Install GPG </span><span style="color:#C678DD;">certificate</span></span>
<span class="line"><span style="color:#ABB2BF;">curl -fsSL https://</span><span style="color:#D19A66;">mirrors</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">aliyun</span><span style="color:#ABB2BF;">.com/docker-ce/linux/ubuntu/gpg | sudo apt-</span><span style="color:#C678DD;">key</span><span style="color:#C678DD;"> add</span><span style="color:#ABB2BF;"> -</span></span>
<span class="line"><span style="color:#ABB2BF;">#step3: Write software source information</span></span>
<span class="line"><span style="color:#ABB2BF;">sudo </span><span style="color:#C678DD;">add</span><span style="color:#ABB2BF;">-apt-repository </span><span style="color:#98C379;">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">#step4: </span><span style="color:#C678DD;">Update</span><span style="color:#C678DD;"> and</span><span style="color:#ABB2BF;"> install Docker CE</span></span>
<span class="line"><span style="color:#ABB2BF;">sudo apt-</span><span style="color:#C678DD;">get</span><span style="color:#ABB2BF;"> -y </span><span style="color:#C678DD;">update</span></span>
<span class="line"><span style="color:#ABB2BF;">sudo apt-</span><span style="color:#C678DD;">get</span><span style="color:#ABB2BF;"> -y install docker-ce</span></span>
<span class="line"><span style="color:#ABB2BF;">#step5: </span><span style="color:#C678DD;">Set</span><span style="color:#ABB2BF;"> Docker </span><span style="color:#C678DD;">to</span><span style="color:#C678DD;"> start</span><span style="color:#ABB2BF;"> automatically upon startup</span></span>
<span class="line"><span style="color:#ABB2BF;">sudo systemctl </span><span style="color:#C678DD;">enable</span><span style="color:#ABB2BF;"> docker</span></span>
<span class="line"><span style="color:#ABB2BF;">#step6： Verify </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> Docker installation </span><span style="color:#C678DD;">is</span><span style="color:#ABB2BF;"> successful</span></span>
<span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#7F848E;font-style:italic;">--version  #Display version information, indicating successful installation</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-compose-installation" tabindex="-1"><a class="header-anchor" href="#docker-compose-installation"><span>Docker-compose Installation</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">#Installation command</span></span>
<span class="line"><span style="color:#ABB2BF;">curl -L </span><span style="color:#98C379;">&quot;https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)&quot;</span><span style="color:#ABB2BF;"> -o /usr/</span><span style="color:#C678DD;">local</span><span style="color:#ABB2BF;">/bin/docker-compose</span></span>
<span class="line"><span style="color:#ABB2BF;">chmod +x /usr/</span><span style="color:#C678DD;">local</span><span style="color:#ABB2BF;">/bin/docker-compose</span></span>
<span class="line"><span style="color:#ABB2BF;">ln -s  /usr/</span><span style="color:#C678DD;">local</span><span style="color:#ABB2BF;">/bin/docker-compose  /usr/bin/docker-compose</span></span>
<span class="line"><span style="color:#ABB2BF;">#Verify </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> the installation was successful</span></span>
<span class="line"><span style="color:#ABB2BF;">docker-compose </span><span style="color:#7F848E;font-style:italic;">--version  #Displaying version information indicates successful installation</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stand-alone-deployment" tabindex="-1"><a class="header-anchor" href="#stand-alone-deployment"><span>Stand-Alone Deployment</span></a></h2><p>This section demonstrates how to deploy a standalone Docker version of 1C1D.</p><h3 id="pull-image-file" tabindex="-1"><a class="header-anchor" href="#pull-image-file"><span>Pull Image File</span></a></h3><p>The Docker image of Apache IoTDB has been uploaded tohttps://hub.docker.com/r/apache/iotdb。</p><p>Taking obtaining version 1.3.2 as an example, pull the image command:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> pull</span><span style="color:#98C379;"> apache/iotdb:1.3.2-standalone</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>View image:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> images</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://alioss.timecho.com/docs/img/开源-拉取镜像.PNG" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="create-docker-bridge-network" tabindex="-1"><a class="header-anchor" href="#create-docker-bridge-network"><span>Create Docker Bridge Network</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> network</span><span style="color:#98C379;"> create</span><span style="color:#D19A66;"> --driver=bridge</span><span style="color:#D19A66;"> --subnet=172.18.0.0/16</span><span style="color:#D19A66;"> --gateway=172.18.0.1</span><span style="color:#98C379;">  iotdb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="write-the-yml-file-for-docker-compose" tabindex="-1"><a class="header-anchor" href="#write-the-yml-file-for-docker-compose"><span>Write The Yml File For Docker-Compose</span></a></h3><p>Here we take the example of consolidating the IoTDB installation directory and yml files in the/docker iotdb folder:</p><p>The file directory structure is:<code>/docker-iotdb/iotdb</code>, <code>/docker-iotdb/docker-compose-standalone.yml </code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">docker-iotdb：</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> iotdb</span><span style="color:#7F848E;font-style:italic;">  #Iotdb installation directory</span></span>
<span class="line"><span style="color:#61AFEF;">│──</span><span style="color:#98C379;"> docker-compose-standalone.yml</span><span style="color:#7F848E;font-style:italic;"> #YML file for standalone Docker Composer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The complete docker-compose-standalone.yml content is as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">version:</span><span style="color:#98C379;"> &quot;3&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">services:</span></span>
<span class="line"><span style="color:#61AFEF;">  iotdb-service:</span></span>
<span class="line"><span style="color:#61AFEF;">    image:</span><span style="color:#98C379;"> apache/iotdb:1.3.2-standalone</span><span style="color:#7F848E;font-style:italic;"> #The image used</span></span>
<span class="line"><span style="color:#61AFEF;">    hostname:</span><span style="color:#98C379;"> iotdb</span></span>
<span class="line"><span style="color:#61AFEF;">    container_name:</span><span style="color:#98C379;"> iotdb</span></span>
<span class="line"><span style="color:#61AFEF;">    restart:</span><span style="color:#98C379;"> always</span><span style="color:#ABB2BF;">       </span></span>
<span class="line"><span style="color:#61AFEF;">    ports:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> &quot;6667:6667&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">    environment:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> cn_internal_address=iotdb</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> cn_internal_port=</span><span style="color:#D19A66;">10710</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> cn_consensus_port=</span><span style="color:#D19A66;">10720</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> cn_seed_config_node=iotdb:10710</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_rpc_address=iotdb</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_internal_address=iotdb</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_rpc_port=</span><span style="color:#D19A66;">6667</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_internal_port=</span><span style="color:#D19A66;">10730</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_mpp_data_exchange_port=</span><span style="color:#D19A66;">10740</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_schema_region_consensus_port=</span><span style="color:#D19A66;">10750</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_data_region_consensus_port=</span><span style="color:#D19A66;">10760</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_seed_config_node=iotdb:10710</span></span>
<span class="line"><span style="color:#61AFEF;">    privileged:</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#61AFEF;">    volumes:</span></span>
<span class="line"><span style="color:#61AFEF;">        -</span><span style="color:#98C379;"> ./iotdb/data:/iotdb/data</span></span>
<span class="line"><span style="color:#61AFEF;">        -</span><span style="color:#98C379;"> ./iotdb/logs:/iotdb/logs</span></span>
<span class="line"><span style="color:#61AFEF;">    networks:</span></span>
<span class="line"><span style="color:#61AFEF;">      iotdb:</span></span>
<span class="line"><span style="color:#61AFEF;">        ipv4_address:</span><span style="color:#D19A66;"> 172.18.0.6</span></span>
<span class="line"><span style="color:#61AFEF;">networks:</span></span>
<span class="line"><span style="color:#61AFEF;">  iotdb:</span></span>
<span class="line"><span style="color:#61AFEF;">    external:</span><span style="color:#D19A66;"> true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="start-iotdb" tabindex="-1"><a class="header-anchor" href="#start-iotdb"><span>Start IoTDB</span></a></h3><p>Use the following command to start:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;">　/docker-iotdb</span></span>
<span class="line"><span style="color:#61AFEF;">docker-compose</span><span style="color:#D19A66;"> -f</span><span style="color:#98C379;"> docker-compose-standalone.yml</span><span style="color:#98C379;"> up</span><span style="color:#D19A66;">  -d</span><span style="color:#7F848E;font-style:italic;">  #Background startup</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="validate-deployment" tabindex="-1"><a class="header-anchor" href="#validate-deployment"><span>Validate Deployment</span></a></h3><ul><li>Viewing the log, the following words indicate successful startup</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">docker logs -f iotdb-datanode #View </span><span style="color:#C678DD;">log</span><span style="color:#ABB2BF;"> command</span></span>
<span class="line"><span style="color:#D19A66;">2024</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">07</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">21</span><span style="color:#D19A66;"> 08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">38</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">457</span><span style="color:#E06C75;"> [main]</span><span style="color:#ABB2BF;"> INFO  </span><span style="color:#D19A66;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">i</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">db</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">service</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">DataNode</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">227</span><span style="color:#ABB2BF;"> - Congratulations, IoTDB DataNode </span><span style="color:#C678DD;">is</span><span style="color:#C678DD;"> set</span><span style="color:#ABB2BF;"> up successfully. </span><span style="color:#C678DD;">Now</span><span style="color:#ABB2BF;">, enjoy yourself!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://alioss.timecho.com/docs/img/开源-验证部署.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Enter the container to view the service running status and activation information</li></ul><p>View the launched container</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">docker ps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://alioss.timecho.com/docs/img/开源-验证部署2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Enter the container, log in to the database through CLI, and use the <code>show cluster</code> command to view the service status and activation status</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#C678DD;">exec</span><span style="color:#ABB2BF;"> -it iotdb   /bin/bash        #Entering the container</span></span>
<span class="line"><span style="color:#ABB2BF;">./</span><span style="color:#C678DD;">start</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">cli</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sh</span><span style="color:#ABB2BF;"> -h iotdb                  #</span><span style="color:#C678DD;">Log</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> to</span><span style="color:#ABB2BF;"> the </span><span style="color:#C678DD;">database</span></span>
<span class="line"><span style="color:#ABB2BF;">IoTDB</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> show cluster                      #View </span><span style="color:#C678DD;">status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can see that all services are running and the activation status shows as activated.</p><figure><img src="https://alioss.timecho.com/docs/img/开源-验证部署3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="map-conf-directory-optional" tabindex="-1"><a class="header-anchor" href="#map-conf-directory-optional"><span>Map/conf Directory (optional)</span></a></h3><p>If you want to directly modify the configuration file in the physical machine in the future, you can map the/conf folder in the container in three steps:</p><p>Step 1: Copy the /conf directory from the container to <code>/docker-iotdb/iotdb/conf</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> cp</span><span style="color:#98C379;"> iotdb:/iotdb/conf</span><span style="color:#98C379;"> /docker-iotdb/iotdb/conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Step 2: Add mappings in docker-compose-standalone.yml</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">    volumes:</span></span>
<span class="line"><span style="color:#61AFEF;">        -</span><span style="color:#98C379;"> ./iotdb/conf:/iotdb/conf</span><span style="color:#7F848E;font-style:italic;">   #Add mapping for this/conf folder</span></span>
<span class="line"><span style="color:#61AFEF;">        -</span><span style="color:#98C379;"> ./iotdb/data:/iotdb/data</span></span>
<span class="line"><span style="color:#61AFEF;">        -</span><span style="color:#98C379;"> ./iotdb/logs:/iotdb/logs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Step 3: Restart IoTDB</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">docker-compose</span><span style="color:#D19A66;">  -f</span><span style="color:#98C379;"> docker-compose-standalone.yml</span><span style="color:#98C379;">  up</span><span style="color:#D19A66;">  -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="cluster-deployment" tabindex="-1"><a class="header-anchor" href="#cluster-deployment"><span>Cluster Deployment</span></a></h2><p>This section describes how to manually deploy an instance that includes 3 Config Nodes and 3 Data Nodes, commonly known as a 3C3D cluster.</p><div align="center"><img src="https://alioss.timecho.com/docs/img/20240705141552.png" alt="" style="width:60%;"></div><p><strong>Note: The cluster version currently only supports host and overlay networks, and does not support bridge networks.</strong></p><p>Taking the host network as an example, we will demonstrate how to deploy a 3C3D cluster.</p><h3 id="set-host-name" tabindex="-1"><a class="header-anchor" href="#set-host-name"><span>Set Host Name</span></a></h3><p>Assuming there are currently three Linux servers, the IP addresses and service role assignments are as follows:</p><table><thead><tr><th>Node IP</th><th>Host Name</th><th>Service</th></tr></thead><tbody><tr><td>192.168.1.3</td><td>iotdb-1</td><td>ConfigNode、DataNode</td></tr><tr><td>192.168.1.4</td><td>iotdb-2</td><td>ConfigNode、DataNode</td></tr><tr><td>192.168.1.5</td><td>iotdb-3</td><td>ConfigNode、DataNode</td></tr></tbody></table><p>Configure the host names on three machines separately. To set the host names, configure <code>/etc/hosts</code> on the target server using the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;192.168.1.3  iotdb-1&quot;</span><span style="color:#ABB2BF;">  &gt;&gt; </span><span style="color:#98C379;">/etc/hosts</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;192.168.1.4  iotdb-2&quot;</span><span style="color:#ABB2BF;">  &gt;&gt; </span><span style="color:#98C379;">/etc/hosts</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;192.168.1.5  iotdb-3&quot;</span><span style="color:#ABB2BF;">  &gt;&gt; </span><span style="color:#98C379;">/etc/hosts</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pull-image-file-1" tabindex="-1"><a class="header-anchor" href="#pull-image-file-1"><span>Pull Image File</span></a></h3><p>The Docker image of Apache IoTDB has been uploaded tohttps://hub.docker.com/r/apache/iotdb。</p><p>Pull IoTDB images from three servers separately, taking version 1.3.2 as an example. The pull image command is:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">docker pull apache/iotdb:</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">-standalone</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>View image:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">docker images</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://alioss.timecho.com/docs/img/开源-集群版1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="write-the-yml-file-for-docker-compose-1" tabindex="-1"><a class="header-anchor" href="#write-the-yml-file-for-docker-compose-1"><span>Write The Yml File For Docker Compose</span></a></h3><p>Here we take the example of consolidating the IoTDB installation directory and yml files in the <code>/docker-iotdb</code> folder:</p><p>The file directory structure is :<code>/docker-iotdb/iotdb</code>, <code>/docker-iotdb/confignode.yml</code>，<code>/docker-iotdb/datanode.yml</code></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">docker-iotdb：</span></span>
<span class="line"><span style="color:#ABB2BF;">├── </span><span style="color:#D19A66;">confignode</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">yml</span><span style="color:#ABB2BF;"> #Yml </span><span style="color:#C678DD;">file</span><span style="color:#ABB2BF;"> of confignode</span></span>
<span class="line"><span style="color:#ABB2BF;">├── </span><span style="color:#D19A66;">datanode</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">yml</span><span style="color:#ABB2BF;">   #Yml </span><span style="color:#C678DD;">file</span><span style="color:#ABB2BF;"> of datanode</span></span>
<span class="line"><span style="color:#ABB2BF;">└── iotdb          #IoTDB installation directory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On each server, two yml files need to be written, namely confignnode. yml and datanode. yml. The example of yml is as follows:</p><p><strong>confignode.yml：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#confignode.yml</span></span>
<span class="line"><span style="color:#61AFEF;">version:</span><span style="color:#98C379;"> &quot;3&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">services:</span></span>
<span class="line"><span style="color:#61AFEF;">  iotdb-confignode:</span></span>
<span class="line"><span style="color:#61AFEF;">    image:</span><span style="color:#98C379;"> iotdb-enterprise:1.3.2.3-standalone</span><span style="color:#7F848E;font-style:italic;"> #The image used</span></span>
<span class="line"><span style="color:#61AFEF;">    hostname:</span><span style="color:#98C379;"> iotdb-1</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-2</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-3</span><span style="color:#7F848E;font-style:italic;"> #Choose from three options based on the actual situation</span></span>
<span class="line"><span style="color:#61AFEF;">    container_name:</span><span style="color:#98C379;"> iotdb-confignode</span></span>
<span class="line"><span style="color:#56B6C2;">    command</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;bash&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;-c&quot;,</span><span style="color:#98C379;"> &quot;entrypoint.sh confignode&quot;]</span></span>
<span class="line"><span style="color:#61AFEF;">    restart:</span><span style="color:#98C379;"> always</span></span>
<span class="line"><span style="color:#61AFEF;">    environment:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> cn_internal_address=iotdb-1</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-2</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-3</span><span style="color:#7F848E;font-style:italic;"> #Choose from three options based on the actual situation</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> cn_internal_port=</span><span style="color:#D19A66;">10710</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> cn_consensus_port=</span><span style="color:#D19A66;">10720</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> cn_seed_config_node=iotdb-1:10710</span><span style="color:#7F848E;font-style:italic;">   #The default first node is the seed node</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> schema_replication_factor=</span><span style="color:#D19A66;">3</span><span style="color:#7F848E;font-style:italic;">         #Number of metadata copies</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> data_replication_factor=</span><span style="color:#D19A66;">2</span><span style="color:#7F848E;font-style:italic;">           #Number of data replicas</span></span>
<span class="line"><span style="color:#61AFEF;">    privileged:</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#61AFEF;">    volumes:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/activation:/iotdb/activation</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/data:/iotdb/data</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/logs:/iotdb/logs</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /usr/sbin/dmidecode:/usr/sbin/dmidecode:ro</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /dev/mem:/dev/mem:ro</span></span>
<span class="line"><span style="color:#61AFEF;">    network_mode:</span><span style="color:#98C379;"> &quot;host&quot;</span><span style="color:#7F848E;font-style:italic;">    #Using the host network</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>datanode.yml：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#datanode.yml</span></span>
<span class="line"><span style="color:#61AFEF;">version:</span><span style="color:#98C379;"> &quot;3&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">services:</span></span>
<span class="line"><span style="color:#61AFEF;">  iotdb-datanode:</span></span>
<span class="line"><span style="color:#61AFEF;">    image:</span><span style="color:#98C379;"> iotdb-enterprise:1.3.2.3-standalone</span><span style="color:#7F848E;font-style:italic;"> #The image used</span></span>
<span class="line"><span style="color:#61AFEF;">    hostname:</span><span style="color:#98C379;"> iotdb-1</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-2</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-3</span><span style="color:#7F848E;font-style:italic;"> #Choose from three options based on the actual situation</span></span>
<span class="line"><span style="color:#61AFEF;">    container_name:</span><span style="color:#98C379;"> iotdb-datanode</span></span>
<span class="line"><span style="color:#56B6C2;">    command</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;bash&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;-c&quot;,</span><span style="color:#98C379;"> &quot;entrypoint.sh datanode&quot;]</span></span>
<span class="line"><span style="color:#61AFEF;">    restart:</span><span style="color:#98C379;"> always</span></span>
<span class="line"><span style="color:#61AFEF;">    ports:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> &quot;6667:6667&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">    privileged:</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#61AFEF;">    environment:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_rpc_address=iotdb-1</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-2</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-3</span><span style="color:#7F848E;font-style:italic;"> #Choose from three options based on the actual situation</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_internal_address=iotdb-1</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-2</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">iotdb-3</span><span style="color:#7F848E;font-style:italic;"> #Choose from three options based on the actual situation</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_seed_config_node=iotdb-1:10710</span><span style="color:#7F848E;font-style:italic;">      #The default first node is the seed node</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_rpc_port=</span><span style="color:#D19A66;">6667</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_internal_port=</span><span style="color:#D19A66;">10730</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_mpp_data_exchange_port=</span><span style="color:#D19A66;">10740</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_schema_region_consensus_port=</span><span style="color:#D19A66;">10750</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> dn_data_region_consensus_port=</span><span style="color:#D19A66;">10760</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> schema_replication_factor=</span><span style="color:#D19A66;">3</span><span style="color:#7F848E;font-style:italic;">         #Number of metadata copies</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> data_replication_factor=</span><span style="color:#D19A66;">2</span><span style="color:#7F848E;font-style:italic;">           #Number of data replicas</span></span>
<span class="line"><span style="color:#61AFEF;">    volumes:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/activation:/iotdb/activation</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/data:/iotdb/data</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/logs:/iotdb/logs</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /usr/sbin/dmidecode:/usr/sbin/dmidecode:ro</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /dev/mem:/dev/mem:ro</span></span>
<span class="line"><span style="color:#61AFEF;">    network_mode:</span><span style="color:#98C379;"> &quot;host&quot;</span><span style="color:#7F848E;font-style:italic;">   #Using the host network</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="starting-confignode-for-the-first-time" tabindex="-1"><a class="header-anchor" href="#starting-confignode-for-the-first-time"><span>Starting Confignode For The First Time</span></a></h3><p>First, start configNodes on each of the three servers to obtain the machine code. Pay attention to the startup order, start the first iotdb-1 first, then start iotdb-2 and iotdb-3.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;">　/docker-iotdb</span></span>
<span class="line"><span style="color:#61AFEF;">docker-compose</span><span style="color:#D19A66;"> -f</span><span style="color:#98C379;"> confignode.yml</span><span style="color:#98C379;"> up</span><span style="color:#D19A66;">  -d</span><span style="color:#7F848E;font-style:italic;"> #Background startup</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="start-datanode" tabindex="-1"><a class="header-anchor" href="#start-datanode"><span>Start Datanode</span></a></h3><p>Start datanodes on 3 servers separately</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">cd /docker-iotdb</span></span>
<span class="line"><span style="color:#ABB2BF;">docker-compose  -f  </span><span style="color:#D19A66;">datanode</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">yml</span><span style="color:#ABB2BF;">  up -d #Background startup</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://alioss.timecho.com/docs/img/开源-集群版2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="validate-deployment-1" tabindex="-1"><a class="header-anchor" href="#validate-deployment-1"><span>Validate Deployment</span></a></h3><ul><li><p>Viewing the logs, the following words indicate that the datanode has successfully started</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">docker logs -f iotdb-datanode #View </span><span style="color:#C678DD;">log</span><span style="color:#ABB2BF;"> command</span></span>
<span class="line"><span style="color:#D19A66;">2024</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">07</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">21</span><span style="color:#D19A66;"> 09</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">58</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">120</span><span style="color:#E06C75;"> [main]</span><span style="color:#ABB2BF;"> INFO  </span><span style="color:#D19A66;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">i</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">db</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">service</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">DataNode</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">227</span><span style="color:#ABB2BF;"> - Congratulations, IoTDB DataNode </span><span style="color:#C678DD;">is</span><span style="color:#C678DD;"> set</span><span style="color:#ABB2BF;"> up successfully. </span><span style="color:#C678DD;">Now</span><span style="color:#ABB2BF;">, enjoy yourself!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://alioss.timecho.com/docs/img/开源-集群版3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>Enter any container to view the service running status and activation information</p><p>View the launched container</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">docker ps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://alioss.timecho.com/docs/img/开源-集群版4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Enter the container, log in to the database through CLI, and use the <code>show cluster</code> command to view the service status and activation status</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#C678DD;">exec</span><span style="color:#ABB2BF;"> -it iotdb-datanode /bin/bash #Entering the container</span></span>
<span class="line"><span style="color:#ABB2BF;">./</span><span style="color:#C678DD;">start</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">cli</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sh</span><span style="color:#ABB2BF;"> -h iotdb-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">                #</span><span style="color:#C678DD;">Log</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> to</span><span style="color:#ABB2BF;"> the </span><span style="color:#C678DD;">database</span></span>
<span class="line"><span style="color:#ABB2BF;">IoTDB</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> show cluster                      #View </span><span style="color:#C678DD;">status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can see that all services are running and the activation status shows as activated.</p><figure><img src="https://alioss.timecho.com/docs/img/开源-集群版5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h3 id="map-conf-directory-optional-1" tabindex="-1"><a class="header-anchor" href="#map-conf-directory-optional-1"><span>Map/conf Directory (optional)</span></a></h3><p>If you want to directly modify the configuration file in the physical machine in the future, you can map the/conf folder in the container in three steps:</p><p>Step 1: Copy the <code>/conf</code> directory from the container to <code>/docker-iotdb/iotdb/conf</code> on each of the three servers</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> cp</span><span style="color:#98C379;"> iotdb-confignode:/iotdb/conf</span><span style="color:#98C379;"> /docker-iotdb/iotdb/conf</span></span>
<span class="line"><span style="color:#61AFEF;">or</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> cp</span><span style="color:#98C379;"> iotdb-datanode:/iotdb/conf</span><span style="color:#98C379;">   /docker-iotdb/iotdb/conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Step 2: Add <code>/conf</code> directory mapping in <code>confignode.yml</code> and <code>datanode. yml</code> on 3 servers</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#confignode.yml</span></span>
<span class="line"><span style="color:#61AFEF;">    volumes:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/conf:/iotdb/conf</span><span style="color:#7F848E;font-style:italic;">  #Add mapping for this /conf folder</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/data:/iotdb/data</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/logs:/iotdb/logs</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /dev/mem:/dev/mem:ro</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#datanode.yml</span></span>
<span class="line"><span style="color:#61AFEF;">    volumes:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/conf:/iotdb/conf</span><span style="color:#7F848E;font-style:italic;">   #Add mapping for this /conf folder</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/data:/iotdb/data</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./iotdb/logs:/iotdb/logs</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /dev/mem:/dev/mem:ro</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Step 3: Restart IoTDB on 3 servers</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> /docker-iotdb</span></span>
<span class="line"><span style="color:#61AFEF;">docker-compose</span><span style="color:#D19A66;">  -f</span><span style="color:#98C379;"> confignode.yml</span><span style="color:#98C379;">  up</span><span style="color:#D19A66;">  -d</span></span>
<span class="line"><span style="color:#61AFEF;">docker-compose</span><span style="color:#D19A66;">  -f</span><span style="color:#98C379;"> datanode.yml</span><span style="color:#98C379;">    up</span><span style="color:#D19A66;">  -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89)]))}const r=n(o,[["render",t],["__file","Docker-Deployment_apache.html.vue"]]),c=JSON.parse('{"path":"/UserGuide/latest/Deployment-and-Maintenance/Docker-Deployment_apache.html","title":"Docker Deployment","lang":"en-US","frontmatter":{"description":"Docker Deployment Environmental Preparation Docker Installation Docker-compose Installation Stand-Alone Deployment This section demonstrates how to deploy a standalone Docker ve...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://iotdb.apache.org/zh/UserGuide/latest/Deployment-and-Maintenance/Docker-Deployment_apache.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/UserGuide/latest/Deployment-and-Maintenance/Docker-Deployment_apache.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"Docker Deployment"}],["meta",{"property":"og:description","content":"Docker Deployment Environmental Preparation Docker Installation Docker-compose Installation Stand-Alone Deployment This section demonstrates how to deploy a standalone Docker ve..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F.PNG"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-25T11:56:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-25T11:56:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker Deployment\\",\\"image\\":[\\"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F.PNG\\",\\"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E9%AA%8C%E8%AF%81%E9%83%A8%E7%BD%B2.png\\",\\"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E9%AA%8C%E8%AF%81%E9%83%A8%E7%BD%B22.png\\",\\"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E9%AA%8C%E8%AF%81%E9%83%A8%E7%BD%B23.png\\",\\"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E9%9B%86%E7%BE%A4%E7%89%881.png\\",\\"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E9%9B%86%E7%BE%A4%E7%89%882.png\\",\\"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E9%9B%86%E7%BE%A4%E7%89%883.png\\",\\"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E9%9B%86%E7%BE%A4%E7%89%884.png\\",\\"https://alioss.timecho.com/docs/img/%E5%BC%80%E6%BA%90-%E9%9B%86%E7%BE%A4%E7%89%885.png\\"],\\"dateModified\\":\\"2024-12-25T11:56:27.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Environmental Preparation","slug":"environmental-preparation","link":"#environmental-preparation","children":[{"level":3,"title":"Docker Installation","slug":"docker-installation","link":"#docker-installation","children":[]},{"level":3,"title":"Docker-compose Installation","slug":"docker-compose-installation","link":"#docker-compose-installation","children":[]}]},{"level":2,"title":"Stand-Alone Deployment","slug":"stand-alone-deployment","link":"#stand-alone-deployment","children":[{"level":3,"title":"Pull Image File","slug":"pull-image-file","link":"#pull-image-file","children":[]},{"level":3,"title":"Create Docker Bridge Network","slug":"create-docker-bridge-network","link":"#create-docker-bridge-network","children":[]},{"level":3,"title":"Write The Yml File For Docker-Compose","slug":"write-the-yml-file-for-docker-compose","link":"#write-the-yml-file-for-docker-compose","children":[]},{"level":3,"title":"Start IoTDB","slug":"start-iotdb","link":"#start-iotdb","children":[]},{"level":3,"title":"Validate Deployment","slug":"validate-deployment","link":"#validate-deployment","children":[]},{"level":3,"title":"Map/conf Directory (optional)","slug":"map-conf-directory-optional","link":"#map-conf-directory-optional","children":[]}]},{"level":2,"title":"Cluster Deployment","slug":"cluster-deployment","link":"#cluster-deployment","children":[{"level":3,"title":"Set Host Name","slug":"set-host-name","link":"#set-host-name","children":[]},{"level":3,"title":"Pull Image File","slug":"pull-image-file-1","link":"#pull-image-file-1","children":[]},{"level":3,"title":"Write The Yml File For Docker Compose","slug":"write-the-yml-file-for-docker-compose-1","link":"#write-the-yml-file-for-docker-compose-1","children":[]},{"level":3,"title":"Starting Confignode For The First Time","slug":"starting-confignode-for-the-first-time","link":"#starting-confignode-for-the-first-time","children":[]},{"level":3,"title":"Start Datanode","slug":"start-datanode","link":"#start-datanode","children":[]},{"level":3,"title":"Validate Deployment","slug":"validate-deployment-1","link":"#validate-deployment-1","children":[]},{"level":3,"title":"Map/conf Directory (optional)","slug":"map-conf-directory-optional-1","link":"#map-conf-directory-optional-1","children":[]}]}],"git":{"createdTime":1723190680000,"updatedTime":1735127787000,"contributors":[{"name":"W1y1r","username":"W1y1r","email":"150988475+W1y1r@users.noreply.github.com","commits":1,"url":"https://github.com/W1y1r"},{"name":"majialin","username":"majialin","email":"107627937+mal117@users.noreply.github.com","commits":3,"url":"https://github.com/majialin"}]},"readingTime":{"minutes":5.69,"words":1708},"filePathRelative":"UserGuide/latest/Deployment-and-Maintenance/Docker-Deployment_apache.md","localizedDate":"August 9, 2024","autoDesc":true}');export{r as comp,c as data};
